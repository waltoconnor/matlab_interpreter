Grammar:

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statements -> statement statements
Rule 5     statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
Rule 6     statement -> if_block
Rule 7     statement -> command
Rule 8     statement -> assign
Rule 9     statement -> FOR assign statements END
Rule 10    statement -> expr NEWLINE
Rule 11    statement -> expr SEMICOLON
Rule 12    statement -> NEWLINE
Rule 13    statement -> SEMICOLON
Rule 14    statement -> statement NEWLINE
Rule 15    statement -> statement SEMICOLON
Rule 16    assign -> ref_expr ASSIGN expr  [precedence=left, level=1]
Rule 17    expr -> expr CTRANSPOSE  [precedence=left, level=12]
Rule 18    expr -> expr TRANSPOSE  [precedence=left, level=12]
Rule 19    expr -> array_literal
Rule 20    expr -> matrix_literal
Rule 21    expr -> expr DOT NAME
Rule 22    expr -> LPAREN expr RPAREN
Rule 23    expr -> expr MPOWER expr  [precedence=left, level=12]
Rule 24    expr -> expr POWER expr  [precedence=left, level=12]
Rule 25    expr -> expr LDIVIDE expr  [precedence=left, level=10]
Rule 26    expr -> expr RDIVIDE expr  [precedence=left, level=10]
Rule 27    expr -> expr TIMES expr  [precedence=left, level=10]
Rule 28    expr -> expr MLDIVIDE expr  [precedence=left, level=10]
Rule 29    expr -> expr MRDIVIDE expr  [precedence=left, level=10]
Rule 30    expr -> expr MTIMES expr  [precedence=left, level=10]
Rule 31    expr -> expr MINUS expr  [precedence=left, level=9]
Rule 32    expr -> expr PLUS expr  [precedence=left, level=9]
Rule 33    expr -> expr NE expr  [precedence=left, level=7]
Rule 34    expr -> expr EQ expr  [precedence=left, level=7]
Rule 35    expr -> expr GE expr  [precedence=left, level=7]
Rule 36    expr -> expr GT expr  [precedence=left, level=7]
Rule 37    expr -> expr LE expr  [precedence=left, level=7]
Rule 38    expr -> expr LT expr  [precedence=left, level=7]
Rule 39    expr -> expr AND expr  [precedence=left, level=6]
Rule 40    expr -> expr OR expr  [precedence=left, level=5]
Rule 41    expr -> expr ANDAND expr  [precedence=left, level=4]
Rule 42    expr -> expr OROR expr  [precedence=left, level=3]
Rule 43    expr -> NOT expr  [precedence=left, level=11]
Rule 44    expr -> MINUS expr  [precedence=left, level=9]
Rule 45    expr -> PLUS expr  [precedence=left, level=9]
Rule 46    expr -> STRING
Rule 47    expr -> NUMBER
Rule 48    expr -> ref_expr
Rule 49    expr -> expr COLON expr  [precedence=left, level=8]
Rule 50    ref_expr -> function_call
Rule 51    ref_expr -> NAME
Rule 52    function_call -> expr LPAREN RPAREN
Rule 53    function_call -> NAME LPAREN args RPAREN
Rule 54    args -> expr
Rule 55    args -> args COMMA expr  [precedence=left, level=2]
Rule 56    array_vals -> expr
Rule 57    array_vals -> expr array_vals
Rule 58    array_vals -> expr COMMA array_vals  [precedence=left, level=2]
Rule 59    array_literal -> LSQR array_vals RSQR
Rule 60    matrix_row_inner -> matrix_row_inner array_vals SEMICOLON
Rule 61    matrix_row_inner -> array_vals SEMICOLON
Rule 62    matrix_literal -> LSQR matrix_row_inner array_vals RSQR
Rule 63    command -> COMMAND
Rule 64    if_block -> IF expr NEWLINE statements ELSE statements END
Rule 65    if_block -> IF expr NEWLINE statements elseif_block
Rule 66    if_block -> IF expr NEWLINE statements END
Rule 67    elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
Rule 68    elseif_block -> ELSEIF expr NEWLINE statements elseif_block
Rule 69    return_vars -> NAME
Rule 70    return_vars -> NAME COMMA return_vars  [precedence=left, level=2]

Unused terminals:

    BREAK
    CASE
    CATCH
    OTHERWISE
    CONTINUE
    RETURN
    SWITCH
    TRY
    WHILE
    ignore_COMMENT
    AT
    ELLIPSIS
    LCURL
    RCURL

Terminals, with rules where they appear:

AND                  : 39
ANDAND               : 41
ASSIGN               : 5 16
AT                   : 
BREAK                : 
CASE                 : 
CATCH                : 
COLON                : 49
COMMA                : 55 58 70
COMMAND              : 63
CONTINUE             : 
CTRANSPOSE           : 17
DOT                  : 21
ELLIPSIS             : 
ELSE                 : 64 67
ELSEIF               : 67 68
END                  : 5 9 64 66 67
EQ                   : 34
FOR                  : 9
FUNCTION             : 5
GE                   : 35
GT                   : 36
IF                   : 64 65 66
LCURL                : 
LDIVIDE              : 25
LE                   : 37
LPAREN               : 5 22 52 53
LSQR                 : 5 59 62
LT                   : 38
MINUS                : 31 44
MLDIVIDE             : 28
MPOWER               : 23
MRDIVIDE             : 29
MTIMES               : 30
NAME                 : 5 21 51 53 69 70
NE                   : 33
NEWLINE              : 5 10 12 14 64 65 66 67 67 68
NOT                  : 43
NUMBER               : 47
OR                   : 40
OROR                 : 42
OTHERWISE            : 
PLUS                 : 32 45
POWER                : 24
RCURL                : 
RDIVIDE              : 26
RETURN               : 
RPAREN               : 5 22 52 53
RSQR                 : 5 59 62
SEMICOLON            : 11 13 15 60 61
STRING               : 46
SWITCH               : 
TIMES                : 27
TRANSPOSE            : 18
TRY                  : 
WHILE                : 
error                : 
ignore_COMMENT       : 

Nonterminals, with rules where they appear:

args                 : 5 53 55
array_literal        : 19
array_vals           : 57 58 59 60 61 62
assign               : 8 9
command              : 7
elseif_block         : 65 68
expr                 : 10 11 16 17 18 21 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 44 45 49 49 52 54 55 56 57 58 64 65 66 67 68
function_call        : 50
if_block             : 6
matrix_literal       : 20
matrix_row_inner     : 60 62
program              : 0
ref_expr             : 16 48
return_vars          : 5 70
statement            : 2 3 4 14 15
statements           : 1 3 4 5 9 64 64 65 66 67 67 68


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 1

    (0) S' -> program .


state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    $end            reduce using rule 1 (program -> statements .)
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 3

    (2) statements -> statement .
    (4) statements -> statement . statements
    (14) statement -> statement . NEWLINE
    (15) statement -> statement . SEMICOLON
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    END             reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    ELSEIF          reduce using rule 2 (statements -> statement .)
    NEWLINE         shift and go to state 28
    SEMICOLON       shift and go to state 29
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    statement                      shift and go to state 3
    statements                     shift and go to state 27
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 4

    (5) statement -> FUNCTION . LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    LSQR            shift and go to state 30


state 5

    (59) array_literal -> LSQR . array_vals RSQR
    (62) matrix_literal -> LSQR . matrix_row_inner array_vals RSQR
    (56) array_vals -> . expr
    (57) array_vals -> . expr array_vals
    (58) array_vals -> . expr COMMA array_vals
    (60) matrix_row_inner -> . matrix_row_inner array_vals SEMICOLON
    (61) matrix_row_inner -> . array_vals SEMICOLON
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    array_vals                     shift and go to state 31
    matrix_row_inner               shift and go to state 32
    expr                           shift and go to state 33
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 6

    (51) ref_expr -> NAME .
    (53) function_call -> NAME . LPAREN args RPAREN
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          reduce using rule 51 (ref_expr -> NAME .)
    NEWLINE         reduce using rule 51 (ref_expr -> NAME .)
    SEMICOLON       reduce using rule 51 (ref_expr -> NAME .)
    CTRANSPOSE      reduce using rule 51 (ref_expr -> NAME .)
    TRANSPOSE       reduce using rule 51 (ref_expr -> NAME .)
    DOT             reduce using rule 51 (ref_expr -> NAME .)
    MPOWER          reduce using rule 51 (ref_expr -> NAME .)
    POWER           reduce using rule 51 (ref_expr -> NAME .)
    LDIVIDE         reduce using rule 51 (ref_expr -> NAME .)
    RDIVIDE         reduce using rule 51 (ref_expr -> NAME .)
    TIMES           reduce using rule 51 (ref_expr -> NAME .)
    MLDIVIDE        reduce using rule 51 (ref_expr -> NAME .)
    MRDIVIDE        reduce using rule 51 (ref_expr -> NAME .)
    MTIMES          reduce using rule 51 (ref_expr -> NAME .)
    MINUS           reduce using rule 51 (ref_expr -> NAME .)
    PLUS            reduce using rule 51 (ref_expr -> NAME .)
    NE              reduce using rule 51 (ref_expr -> NAME .)
    EQ              reduce using rule 51 (ref_expr -> NAME .)
    GE              reduce using rule 51 (ref_expr -> NAME .)
    GT              reduce using rule 51 (ref_expr -> NAME .)
    LE              reduce using rule 51 (ref_expr -> NAME .)
    LT              reduce using rule 51 (ref_expr -> NAME .)
    AND             reduce using rule 51 (ref_expr -> NAME .)
    OR              reduce using rule 51 (ref_expr -> NAME .)
    ANDAND          reduce using rule 51 (ref_expr -> NAME .)
    OROR            reduce using rule 51 (ref_expr -> NAME .)
    COLON           reduce using rule 51 (ref_expr -> NAME .)
    COMMA           reduce using rule 51 (ref_expr -> NAME .)
    NOT             reduce using rule 51 (ref_expr -> NAME .)
    STRING          reduce using rule 51 (ref_expr -> NAME .)
    NUMBER          reduce using rule 51 (ref_expr -> NAME .)
    LSQR            reduce using rule 51 (ref_expr -> NAME .)
    NAME            reduce using rule 51 (ref_expr -> NAME .)
    RSQR            reduce using rule 51 (ref_expr -> NAME .)
    RPAREN          reduce using rule 51 (ref_expr -> NAME .)
    FUNCTION        reduce using rule 51 (ref_expr -> NAME .)
    FOR             reduce using rule 51 (ref_expr -> NAME .)
    IF              reduce using rule 51 (ref_expr -> NAME .)
    COMMAND         reduce using rule 51 (ref_expr -> NAME .)
    $end            reduce using rule 51 (ref_expr -> NAME .)
    END             reduce using rule 51 (ref_expr -> NAME .)
    ELSE            reduce using rule 51 (ref_expr -> NAME .)
    ELSEIF          reduce using rule 51 (ref_expr -> NAME .)
    LPAREN          shift and go to state 35


state 7

    (22) expr -> LPAREN . expr RPAREN
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 36
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 8

    (12) statement -> NEWLINE .
    NEWLINE         reduce using rule 12 (statement -> NEWLINE .)
    SEMICOLON       reduce using rule 12 (statement -> NEWLINE .)
    FUNCTION        reduce using rule 12 (statement -> NEWLINE .)
    FOR             reduce using rule 12 (statement -> NEWLINE .)
    IF              reduce using rule 12 (statement -> NEWLINE .)
    COMMAND         reduce using rule 12 (statement -> NEWLINE .)
    LPAREN          reduce using rule 12 (statement -> NEWLINE .)
    NOT             reduce using rule 12 (statement -> NEWLINE .)
    MINUS           reduce using rule 12 (statement -> NEWLINE .)
    PLUS            reduce using rule 12 (statement -> NEWLINE .)
    STRING          reduce using rule 12 (statement -> NEWLINE .)
    NUMBER          reduce using rule 12 (statement -> NEWLINE .)
    NAME            reduce using rule 12 (statement -> NEWLINE .)
    LSQR            reduce using rule 12 (statement -> NEWLINE .)
    $end            reduce using rule 12 (statement -> NEWLINE .)
    END             reduce using rule 12 (statement -> NEWLINE .)
    ELSE            reduce using rule 12 (statement -> NEWLINE .)
    ELSEIF          reduce using rule 12 (statement -> NEWLINE .)


state 9

    (6) statement -> if_block .
    NEWLINE         reduce using rule 6 (statement -> if_block .)
    SEMICOLON       reduce using rule 6 (statement -> if_block .)
    FUNCTION        reduce using rule 6 (statement -> if_block .)
    FOR             reduce using rule 6 (statement -> if_block .)
    IF              reduce using rule 6 (statement -> if_block .)
    COMMAND         reduce using rule 6 (statement -> if_block .)
    LPAREN          reduce using rule 6 (statement -> if_block .)
    NOT             reduce using rule 6 (statement -> if_block .)
    MINUS           reduce using rule 6 (statement -> if_block .)
    PLUS            reduce using rule 6 (statement -> if_block .)
    STRING          reduce using rule 6 (statement -> if_block .)
    NUMBER          reduce using rule 6 (statement -> if_block .)
    NAME            reduce using rule 6 (statement -> if_block .)
    LSQR            reduce using rule 6 (statement -> if_block .)
    $end            reduce using rule 6 (statement -> if_block .)
    END             reduce using rule 6 (statement -> if_block .)
    ELSE            reduce using rule 6 (statement -> if_block .)
    ELSEIF          reduce using rule 6 (statement -> if_block .)


state 10

    (7) statement -> command .
    NEWLINE         reduce using rule 7 (statement -> command .)
    SEMICOLON       reduce using rule 7 (statement -> command .)
    FUNCTION        reduce using rule 7 (statement -> command .)
    FOR             reduce using rule 7 (statement -> command .)
    IF              reduce using rule 7 (statement -> command .)
    COMMAND         reduce using rule 7 (statement -> command .)
    LPAREN          reduce using rule 7 (statement -> command .)
    NOT             reduce using rule 7 (statement -> command .)
    MINUS           reduce using rule 7 (statement -> command .)
    PLUS            reduce using rule 7 (statement -> command .)
    STRING          reduce using rule 7 (statement -> command .)
    NUMBER          reduce using rule 7 (statement -> command .)
    NAME            reduce using rule 7 (statement -> command .)
    LSQR            reduce using rule 7 (statement -> command .)
    $end            reduce using rule 7 (statement -> command .)
    END             reduce using rule 7 (statement -> command .)
    ELSE            reduce using rule 7 (statement -> command .)
    ELSEIF          reduce using rule 7 (statement -> command .)


state 11

    (8) statement -> assign .
    NEWLINE         reduce using rule 8 (statement -> assign .)
    SEMICOLON       reduce using rule 8 (statement -> assign .)
    FUNCTION        reduce using rule 8 (statement -> assign .)
    FOR             reduce using rule 8 (statement -> assign .)
    IF              reduce using rule 8 (statement -> assign .)
    COMMAND         reduce using rule 8 (statement -> assign .)
    LPAREN          reduce using rule 8 (statement -> assign .)
    NOT             reduce using rule 8 (statement -> assign .)
    MINUS           reduce using rule 8 (statement -> assign .)
    PLUS            reduce using rule 8 (statement -> assign .)
    STRING          reduce using rule 8 (statement -> assign .)
    NUMBER          reduce using rule 8 (statement -> assign .)
    NAME            reduce using rule 8 (statement -> assign .)
    LSQR            reduce using rule 8 (statement -> assign .)
    $end            reduce using rule 8 (statement -> assign .)
    END             reduce using rule 8 (statement -> assign .)
    ELSE            reduce using rule 8 (statement -> assign .)
    ELSEIF          reduce using rule 8 (statement -> assign .)


state 12

    (9) statement -> FOR . assign statements END
    (16) assign -> . ref_expr ASSIGN expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    NAME            shift and go to state 6
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5

    assign                         shift and go to state 37
    ref_expr                       shift and go to state 17
    expr                           shift and go to state 38
    function_call                  shift and go to state 25
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19

state 13

    (10) statement -> expr . NEWLINE
    (11) statement -> expr . SEMICOLON
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 39
    SEMICOLON       shift and go to state 40
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 14

    (13) statement -> SEMICOLON .
    NEWLINE         reduce using rule 13 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 13 (statement -> SEMICOLON .)
    FUNCTION        reduce using rule 13 (statement -> SEMICOLON .)
    FOR             reduce using rule 13 (statement -> SEMICOLON .)
    IF              reduce using rule 13 (statement -> SEMICOLON .)
    COMMAND         reduce using rule 13 (statement -> SEMICOLON .)
    LPAREN          reduce using rule 13 (statement -> SEMICOLON .)
    NOT             reduce using rule 13 (statement -> SEMICOLON .)
    MINUS           reduce using rule 13 (statement -> SEMICOLON .)
    PLUS            reduce using rule 13 (statement -> SEMICOLON .)
    STRING          reduce using rule 13 (statement -> SEMICOLON .)
    NUMBER          reduce using rule 13 (statement -> SEMICOLON .)
    NAME            reduce using rule 13 (statement -> SEMICOLON .)
    LSQR            reduce using rule 13 (statement -> SEMICOLON .)
    $end            reduce using rule 13 (statement -> SEMICOLON .)
    END             reduce using rule 13 (statement -> SEMICOLON .)
    ELSE            reduce using rule 13 (statement -> SEMICOLON .)
    ELSEIF          reduce using rule 13 (statement -> SEMICOLON .)


state 15

    (64) if_block -> IF . expr NEWLINE statements ELSE statements END
    (65) if_block -> IF . expr NEWLINE statements elseif_block
    (66) if_block -> IF . expr NEWLINE statements END
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 66
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 16

    (63) command -> COMMAND .
    NEWLINE         reduce using rule 63 (command -> COMMAND .)
    SEMICOLON       reduce using rule 63 (command -> COMMAND .)
    FUNCTION        reduce using rule 63 (command -> COMMAND .)
    FOR             reduce using rule 63 (command -> COMMAND .)
    IF              reduce using rule 63 (command -> COMMAND .)
    COMMAND         reduce using rule 63 (command -> COMMAND .)
    LPAREN          reduce using rule 63 (command -> COMMAND .)
    NOT             reduce using rule 63 (command -> COMMAND .)
    MINUS           reduce using rule 63 (command -> COMMAND .)
    PLUS            reduce using rule 63 (command -> COMMAND .)
    STRING          reduce using rule 63 (command -> COMMAND .)
    NUMBER          reduce using rule 63 (command -> COMMAND .)
    NAME            reduce using rule 63 (command -> COMMAND .)
    LSQR            reduce using rule 63 (command -> COMMAND .)
    $end            reduce using rule 63 (command -> COMMAND .)
    END             reduce using rule 63 (command -> COMMAND .)
    ELSE            reduce using rule 63 (command -> COMMAND .)
    ELSEIF          reduce using rule 63 (command -> COMMAND .)


state 17

    (16) assign -> ref_expr . ASSIGN expr
    (48) expr -> ref_expr .
    ASSIGN          shift and go to state 67
    NEWLINE         reduce using rule 48 (expr -> ref_expr .)
    SEMICOLON       reduce using rule 48 (expr -> ref_expr .)
    CTRANSPOSE      reduce using rule 48 (expr -> ref_expr .)
    TRANSPOSE       reduce using rule 48 (expr -> ref_expr .)
    DOT             reduce using rule 48 (expr -> ref_expr .)
    MPOWER          reduce using rule 48 (expr -> ref_expr .)
    POWER           reduce using rule 48 (expr -> ref_expr .)
    LDIVIDE         reduce using rule 48 (expr -> ref_expr .)
    RDIVIDE         reduce using rule 48 (expr -> ref_expr .)
    TIMES           reduce using rule 48 (expr -> ref_expr .)
    MLDIVIDE        reduce using rule 48 (expr -> ref_expr .)
    MRDIVIDE        reduce using rule 48 (expr -> ref_expr .)
    MTIMES          reduce using rule 48 (expr -> ref_expr .)
    MINUS           reduce using rule 48 (expr -> ref_expr .)
    PLUS            reduce using rule 48 (expr -> ref_expr .)
    NE              reduce using rule 48 (expr -> ref_expr .)
    EQ              reduce using rule 48 (expr -> ref_expr .)
    GE              reduce using rule 48 (expr -> ref_expr .)
    GT              reduce using rule 48 (expr -> ref_expr .)
    LE              reduce using rule 48 (expr -> ref_expr .)
    LT              reduce using rule 48 (expr -> ref_expr .)
    AND             reduce using rule 48 (expr -> ref_expr .)
    OR              reduce using rule 48 (expr -> ref_expr .)
    ANDAND          reduce using rule 48 (expr -> ref_expr .)
    OROR            reduce using rule 48 (expr -> ref_expr .)
    COLON           reduce using rule 48 (expr -> ref_expr .)
    LPAREN          reduce using rule 48 (expr -> ref_expr .)


state 18

    (19) expr -> array_literal .
    NEWLINE         reduce using rule 19 (expr -> array_literal .)
    SEMICOLON       reduce using rule 19 (expr -> array_literal .)
    CTRANSPOSE      reduce using rule 19 (expr -> array_literal .)
    TRANSPOSE       reduce using rule 19 (expr -> array_literal .)
    DOT             reduce using rule 19 (expr -> array_literal .)
    MPOWER          reduce using rule 19 (expr -> array_literal .)
    POWER           reduce using rule 19 (expr -> array_literal .)
    LDIVIDE         reduce using rule 19 (expr -> array_literal .)
    RDIVIDE         reduce using rule 19 (expr -> array_literal .)
    TIMES           reduce using rule 19 (expr -> array_literal .)
    MLDIVIDE        reduce using rule 19 (expr -> array_literal .)
    MRDIVIDE        reduce using rule 19 (expr -> array_literal .)
    MTIMES          reduce using rule 19 (expr -> array_literal .)
    MINUS           reduce using rule 19 (expr -> array_literal .)
    PLUS            reduce using rule 19 (expr -> array_literal .)
    NE              reduce using rule 19 (expr -> array_literal .)
    EQ              reduce using rule 19 (expr -> array_literal .)
    GE              reduce using rule 19 (expr -> array_literal .)
    GT              reduce using rule 19 (expr -> array_literal .)
    LE              reduce using rule 19 (expr -> array_literal .)
    LT              reduce using rule 19 (expr -> array_literal .)
    AND             reduce using rule 19 (expr -> array_literal .)
    OR              reduce using rule 19 (expr -> array_literal .)
    ANDAND          reduce using rule 19 (expr -> array_literal .)
    OROR            reduce using rule 19 (expr -> array_literal .)
    COLON           reduce using rule 19 (expr -> array_literal .)
    LPAREN          reduce using rule 19 (expr -> array_literal .)
    COMMA           reduce using rule 19 (expr -> array_literal .)
    NOT             reduce using rule 19 (expr -> array_literal .)
    STRING          reduce using rule 19 (expr -> array_literal .)
    NUMBER          reduce using rule 19 (expr -> array_literal .)
    LSQR            reduce using rule 19 (expr -> array_literal .)
    NAME            reduce using rule 19 (expr -> array_literal .)
    RSQR            reduce using rule 19 (expr -> array_literal .)
    RPAREN          reduce using rule 19 (expr -> array_literal .)
    FUNCTION        reduce using rule 19 (expr -> array_literal .)
    FOR             reduce using rule 19 (expr -> array_literal .)
    IF              reduce using rule 19 (expr -> array_literal .)
    COMMAND         reduce using rule 19 (expr -> array_literal .)
    $end            reduce using rule 19 (expr -> array_literal .)
    END             reduce using rule 19 (expr -> array_literal .)
    ELSE            reduce using rule 19 (expr -> array_literal .)
    ELSEIF          reduce using rule 19 (expr -> array_literal .)


state 19

    (20) expr -> matrix_literal .
    NEWLINE         reduce using rule 20 (expr -> matrix_literal .)
    SEMICOLON       reduce using rule 20 (expr -> matrix_literal .)
    CTRANSPOSE      reduce using rule 20 (expr -> matrix_literal .)
    TRANSPOSE       reduce using rule 20 (expr -> matrix_literal .)
    DOT             reduce using rule 20 (expr -> matrix_literal .)
    MPOWER          reduce using rule 20 (expr -> matrix_literal .)
    POWER           reduce using rule 20 (expr -> matrix_literal .)
    LDIVIDE         reduce using rule 20 (expr -> matrix_literal .)
    RDIVIDE         reduce using rule 20 (expr -> matrix_literal .)
    TIMES           reduce using rule 20 (expr -> matrix_literal .)
    MLDIVIDE        reduce using rule 20 (expr -> matrix_literal .)
    MRDIVIDE        reduce using rule 20 (expr -> matrix_literal .)
    MTIMES          reduce using rule 20 (expr -> matrix_literal .)
    MINUS           reduce using rule 20 (expr -> matrix_literal .)
    PLUS            reduce using rule 20 (expr -> matrix_literal .)
    NE              reduce using rule 20 (expr -> matrix_literal .)
    EQ              reduce using rule 20 (expr -> matrix_literal .)
    GE              reduce using rule 20 (expr -> matrix_literal .)
    GT              reduce using rule 20 (expr -> matrix_literal .)
    LE              reduce using rule 20 (expr -> matrix_literal .)
    LT              reduce using rule 20 (expr -> matrix_literal .)
    AND             reduce using rule 20 (expr -> matrix_literal .)
    OR              reduce using rule 20 (expr -> matrix_literal .)
    ANDAND          reduce using rule 20 (expr -> matrix_literal .)
    OROR            reduce using rule 20 (expr -> matrix_literal .)
    COLON           reduce using rule 20 (expr -> matrix_literal .)
    LPAREN          reduce using rule 20 (expr -> matrix_literal .)
    COMMA           reduce using rule 20 (expr -> matrix_literal .)
    NOT             reduce using rule 20 (expr -> matrix_literal .)
    STRING          reduce using rule 20 (expr -> matrix_literal .)
    NUMBER          reduce using rule 20 (expr -> matrix_literal .)
    LSQR            reduce using rule 20 (expr -> matrix_literal .)
    NAME            reduce using rule 20 (expr -> matrix_literal .)
    RSQR            reduce using rule 20 (expr -> matrix_literal .)
    RPAREN          reduce using rule 20 (expr -> matrix_literal .)
    FUNCTION        reduce using rule 20 (expr -> matrix_literal .)
    FOR             reduce using rule 20 (expr -> matrix_literal .)
    IF              reduce using rule 20 (expr -> matrix_literal .)
    COMMAND         reduce using rule 20 (expr -> matrix_literal .)
    $end            reduce using rule 20 (expr -> matrix_literal .)
    END             reduce using rule 20 (expr -> matrix_literal .)
    ELSE            reduce using rule 20 (expr -> matrix_literal .)
    ELSEIF          reduce using rule 20 (expr -> matrix_literal .)


state 20

    (44) expr -> MINUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 68
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 21

    (45) expr -> PLUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 69
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 22

    (43) expr -> NOT . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 70
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 23

    (46) expr -> STRING .
    NEWLINE         reduce using rule 46 (expr -> STRING .)
    SEMICOLON       reduce using rule 46 (expr -> STRING .)
    CTRANSPOSE      reduce using rule 46 (expr -> STRING .)
    TRANSPOSE       reduce using rule 46 (expr -> STRING .)
    DOT             reduce using rule 46 (expr -> STRING .)
    MPOWER          reduce using rule 46 (expr -> STRING .)
    POWER           reduce using rule 46 (expr -> STRING .)
    LDIVIDE         reduce using rule 46 (expr -> STRING .)
    RDIVIDE         reduce using rule 46 (expr -> STRING .)
    TIMES           reduce using rule 46 (expr -> STRING .)
    MLDIVIDE        reduce using rule 46 (expr -> STRING .)
    MRDIVIDE        reduce using rule 46 (expr -> STRING .)
    MTIMES          reduce using rule 46 (expr -> STRING .)
    MINUS           reduce using rule 46 (expr -> STRING .)
    PLUS            reduce using rule 46 (expr -> STRING .)
    NE              reduce using rule 46 (expr -> STRING .)
    EQ              reduce using rule 46 (expr -> STRING .)
    GE              reduce using rule 46 (expr -> STRING .)
    GT              reduce using rule 46 (expr -> STRING .)
    LE              reduce using rule 46 (expr -> STRING .)
    LT              reduce using rule 46 (expr -> STRING .)
    AND             reduce using rule 46 (expr -> STRING .)
    OR              reduce using rule 46 (expr -> STRING .)
    ANDAND          reduce using rule 46 (expr -> STRING .)
    OROR            reduce using rule 46 (expr -> STRING .)
    COLON           reduce using rule 46 (expr -> STRING .)
    LPAREN          reduce using rule 46 (expr -> STRING .)
    COMMA           reduce using rule 46 (expr -> STRING .)
    NOT             reduce using rule 46 (expr -> STRING .)
    STRING          reduce using rule 46 (expr -> STRING .)
    NUMBER          reduce using rule 46 (expr -> STRING .)
    LSQR            reduce using rule 46 (expr -> STRING .)
    NAME            reduce using rule 46 (expr -> STRING .)
    RSQR            reduce using rule 46 (expr -> STRING .)
    RPAREN          reduce using rule 46 (expr -> STRING .)
    FUNCTION        reduce using rule 46 (expr -> STRING .)
    FOR             reduce using rule 46 (expr -> STRING .)
    IF              reduce using rule 46 (expr -> STRING .)
    COMMAND         reduce using rule 46 (expr -> STRING .)
    $end            reduce using rule 46 (expr -> STRING .)
    END             reduce using rule 46 (expr -> STRING .)
    ELSE            reduce using rule 46 (expr -> STRING .)
    ELSEIF          reduce using rule 46 (expr -> STRING .)


state 24

    (47) expr -> NUMBER .
    NEWLINE         reduce using rule 47 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 47 (expr -> NUMBER .)
    CTRANSPOSE      reduce using rule 47 (expr -> NUMBER .)
    TRANSPOSE       reduce using rule 47 (expr -> NUMBER .)
    DOT             reduce using rule 47 (expr -> NUMBER .)
    MPOWER          reduce using rule 47 (expr -> NUMBER .)
    POWER           reduce using rule 47 (expr -> NUMBER .)
    LDIVIDE         reduce using rule 47 (expr -> NUMBER .)
    RDIVIDE         reduce using rule 47 (expr -> NUMBER .)
    TIMES           reduce using rule 47 (expr -> NUMBER .)
    MLDIVIDE        reduce using rule 47 (expr -> NUMBER .)
    MRDIVIDE        reduce using rule 47 (expr -> NUMBER .)
    MTIMES          reduce using rule 47 (expr -> NUMBER .)
    MINUS           reduce using rule 47 (expr -> NUMBER .)
    PLUS            reduce using rule 47 (expr -> NUMBER .)
    NE              reduce using rule 47 (expr -> NUMBER .)
    EQ              reduce using rule 47 (expr -> NUMBER .)
    GE              reduce using rule 47 (expr -> NUMBER .)
    GT              reduce using rule 47 (expr -> NUMBER .)
    LE              reduce using rule 47 (expr -> NUMBER .)
    LT              reduce using rule 47 (expr -> NUMBER .)
    AND             reduce using rule 47 (expr -> NUMBER .)
    OR              reduce using rule 47 (expr -> NUMBER .)
    ANDAND          reduce using rule 47 (expr -> NUMBER .)
    OROR            reduce using rule 47 (expr -> NUMBER .)
    COLON           reduce using rule 47 (expr -> NUMBER .)
    LPAREN          reduce using rule 47 (expr -> NUMBER .)
    COMMA           reduce using rule 47 (expr -> NUMBER .)
    NOT             reduce using rule 47 (expr -> NUMBER .)
    STRING          reduce using rule 47 (expr -> NUMBER .)
    NUMBER          reduce using rule 47 (expr -> NUMBER .)
    LSQR            reduce using rule 47 (expr -> NUMBER .)
    NAME            reduce using rule 47 (expr -> NUMBER .)
    RSQR            reduce using rule 47 (expr -> NUMBER .)
    RPAREN          reduce using rule 47 (expr -> NUMBER .)
    FUNCTION        reduce using rule 47 (expr -> NUMBER .)
    FOR             reduce using rule 47 (expr -> NUMBER .)
    IF              reduce using rule 47 (expr -> NUMBER .)
    COMMAND         reduce using rule 47 (expr -> NUMBER .)
    $end            reduce using rule 47 (expr -> NUMBER .)
    END             reduce using rule 47 (expr -> NUMBER .)
    ELSE            reduce using rule 47 (expr -> NUMBER .)
    ELSEIF          reduce using rule 47 (expr -> NUMBER .)


state 25

    (50) ref_expr -> function_call .
    ASSIGN          reduce using rule 50 (ref_expr -> function_call .)
    NEWLINE         reduce using rule 50 (ref_expr -> function_call .)
    SEMICOLON       reduce using rule 50 (ref_expr -> function_call .)
    CTRANSPOSE      reduce using rule 50 (ref_expr -> function_call .)
    TRANSPOSE       reduce using rule 50 (ref_expr -> function_call .)
    DOT             reduce using rule 50 (ref_expr -> function_call .)
    MPOWER          reduce using rule 50 (ref_expr -> function_call .)
    POWER           reduce using rule 50 (ref_expr -> function_call .)
    LDIVIDE         reduce using rule 50 (ref_expr -> function_call .)
    RDIVIDE         reduce using rule 50 (ref_expr -> function_call .)
    TIMES           reduce using rule 50 (ref_expr -> function_call .)
    MLDIVIDE        reduce using rule 50 (ref_expr -> function_call .)
    MRDIVIDE        reduce using rule 50 (ref_expr -> function_call .)
    MTIMES          reduce using rule 50 (ref_expr -> function_call .)
    MINUS           reduce using rule 50 (ref_expr -> function_call .)
    PLUS            reduce using rule 50 (ref_expr -> function_call .)
    NE              reduce using rule 50 (ref_expr -> function_call .)
    EQ              reduce using rule 50 (ref_expr -> function_call .)
    GE              reduce using rule 50 (ref_expr -> function_call .)
    GT              reduce using rule 50 (ref_expr -> function_call .)
    LE              reduce using rule 50 (ref_expr -> function_call .)
    LT              reduce using rule 50 (ref_expr -> function_call .)
    AND             reduce using rule 50 (ref_expr -> function_call .)
    OR              reduce using rule 50 (ref_expr -> function_call .)
    ANDAND          reduce using rule 50 (ref_expr -> function_call .)
    OROR            reduce using rule 50 (ref_expr -> function_call .)
    COLON           reduce using rule 50 (ref_expr -> function_call .)
    LPAREN          reduce using rule 50 (ref_expr -> function_call .)
    COMMA           reduce using rule 50 (ref_expr -> function_call .)
    NOT             reduce using rule 50 (ref_expr -> function_call .)
    STRING          reduce using rule 50 (ref_expr -> function_call .)
    NUMBER          reduce using rule 50 (ref_expr -> function_call .)
    LSQR            reduce using rule 50 (ref_expr -> function_call .)
    NAME            reduce using rule 50 (ref_expr -> function_call .)
    RSQR            reduce using rule 50 (ref_expr -> function_call .)
    RPAREN          reduce using rule 50 (ref_expr -> function_call .)
    FUNCTION        reduce using rule 50 (ref_expr -> function_call .)
    FOR             reduce using rule 50 (ref_expr -> function_call .)
    IF              reduce using rule 50 (ref_expr -> function_call .)
    COMMAND         reduce using rule 50 (ref_expr -> function_call .)
    $end            reduce using rule 50 (ref_expr -> function_call .)
    END             reduce using rule 50 (ref_expr -> function_call .)
    ELSE            reduce using rule 50 (ref_expr -> function_call .)
    ELSEIF          reduce using rule 50 (ref_expr -> function_call .)


state 26

    (3) statements -> statements statement .
    (14) statement -> statement . NEWLINE
    (15) statement -> statement . SEMICOLON
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    FUNCTION        reduce using rule 3 (statements -> statements statement .)
    FOR             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    COMMAND         reduce using rule 3 (statements -> statements statement .)
    LPAREN          reduce using rule 3 (statements -> statements statement .)
    NOT             reduce using rule 3 (statements -> statements statement .)
    MINUS           reduce using rule 3 (statements -> statements statement .)
    PLUS            reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    NUMBER          reduce using rule 3 (statements -> statements statement .)
    NAME            reduce using rule 3 (statements -> statements statement .)
    LSQR            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    END             reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    ELSEIF          reduce using rule 3 (statements -> statements statement .)
    NEWLINE         shift and go to state 71
    SEMICOLON       shift and go to state 72


state 27

    (4) statements -> statement statements .
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
    $end            reduce using rule 4 (statements -> statement statements .)
    END             reduce using rule 4 (statements -> statement statements .)
    ELSE            reduce using rule 4 (statements -> statement statements .)
    ELSEIF          reduce using rule 4 (statements -> statement statements .)
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 28

    (14) statement -> statement NEWLINE .
    (12) statement -> NEWLINE .
  ! reduce/reduce conflict for NEWLINE resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for IF resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for COMMAND resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for MINUS resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for PLUS resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NAME resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for LSQR resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for END resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 14 (statement -> statement NEWLINE .)
    NEWLINE         reduce using rule 14 (statement -> statement NEWLINE .)
    SEMICOLON       reduce using rule 14 (statement -> statement NEWLINE .)
    FUNCTION        reduce using rule 14 (statement -> statement NEWLINE .)
    FOR             reduce using rule 14 (statement -> statement NEWLINE .)
    IF              reduce using rule 14 (statement -> statement NEWLINE .)
    COMMAND         reduce using rule 14 (statement -> statement NEWLINE .)
    LPAREN          reduce using rule 14 (statement -> statement NEWLINE .)
    NOT             reduce using rule 14 (statement -> statement NEWLINE .)
    MINUS           reduce using rule 14 (statement -> statement NEWLINE .)
    PLUS            reduce using rule 14 (statement -> statement NEWLINE .)
    STRING          reduce using rule 14 (statement -> statement NEWLINE .)
    NUMBER          reduce using rule 14 (statement -> statement NEWLINE .)
    NAME            reduce using rule 14 (statement -> statement NEWLINE .)
    LSQR            reduce using rule 14 (statement -> statement NEWLINE .)
    $end            reduce using rule 14 (statement -> statement NEWLINE .)
    END             reduce using rule 14 (statement -> statement NEWLINE .)
    ELSE            reduce using rule 14 (statement -> statement NEWLINE .)
    ELSEIF          reduce using rule 14 (statement -> statement NEWLINE .)


state 29

    (15) statement -> statement SEMICOLON .
    (13) statement -> SEMICOLON .
  ! reduce/reduce conflict for NEWLINE resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for COMMAND resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for PLUS resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NAME resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for LSQR resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for END resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 15 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 15 (statement -> statement SEMICOLON .)
    NEWLINE         reduce using rule 15 (statement -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 15 (statement -> statement SEMICOLON .)
    FUNCTION        reduce using rule 15 (statement -> statement SEMICOLON .)
    FOR             reduce using rule 15 (statement -> statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> statement SEMICOLON .)
    COMMAND         reduce using rule 15 (statement -> statement SEMICOLON .)
    LPAREN          reduce using rule 15 (statement -> statement SEMICOLON .)
    NOT             reduce using rule 15 (statement -> statement SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> statement SEMICOLON .)
    PLUS            reduce using rule 15 (statement -> statement SEMICOLON .)
    STRING          reduce using rule 15 (statement -> statement SEMICOLON .)
    NUMBER          reduce using rule 15 (statement -> statement SEMICOLON .)
    NAME            reduce using rule 15 (statement -> statement SEMICOLON .)
    LSQR            reduce using rule 15 (statement -> statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> statement SEMICOLON .)
    END             reduce using rule 15 (statement -> statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> statement SEMICOLON .)
    ELSEIF          reduce using rule 15 (statement -> statement SEMICOLON .)


state 30

    (5) statement -> FUNCTION LSQR . return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (69) return_vars -> . NAME
    (70) return_vars -> . NAME COMMA return_vars
    NAME            shift and go to state 74

    return_vars                    shift and go to state 73

state 31

    (59) array_literal -> LSQR array_vals . RSQR
    (61) matrix_row_inner -> array_vals . SEMICOLON
    RSQR            shift and go to state 75
    SEMICOLON       shift and go to state 76


state 32

    (62) matrix_literal -> LSQR matrix_row_inner . array_vals RSQR
    (60) matrix_row_inner -> matrix_row_inner . array_vals SEMICOLON
    (56) array_vals -> . expr
    (57) array_vals -> . expr array_vals
    (58) array_vals -> . expr COMMA array_vals
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    array_vals                     shift and go to state 77
    expr                           shift and go to state 33
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 33

    (56) array_vals -> expr .
    (57) array_vals -> expr . array_vals
    (58) array_vals -> expr . COMMA array_vals
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    (56) array_vals -> . expr
    (57) array_vals -> . expr array_vals
    (58) array_vals -> . expr COMMA array_vals
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    RSQR            reduce using rule 56 (array_vals -> expr .)
    SEMICOLON       reduce using rule 56 (array_vals -> expr .)
    COMMA           shift and go to state 79
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 80
    PLUS            shift and go to state 81
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 82
    NOT             shift and go to state 22
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 33
    array_vals                     shift and go to state 78
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 34

    (48) expr -> ref_expr .
    COMMA           reduce using rule 48 (expr -> ref_expr .)
    CTRANSPOSE      reduce using rule 48 (expr -> ref_expr .)
    TRANSPOSE       reduce using rule 48 (expr -> ref_expr .)
    DOT             reduce using rule 48 (expr -> ref_expr .)
    MPOWER          reduce using rule 48 (expr -> ref_expr .)
    POWER           reduce using rule 48 (expr -> ref_expr .)
    LDIVIDE         reduce using rule 48 (expr -> ref_expr .)
    RDIVIDE         reduce using rule 48 (expr -> ref_expr .)
    TIMES           reduce using rule 48 (expr -> ref_expr .)
    MLDIVIDE        reduce using rule 48 (expr -> ref_expr .)
    MRDIVIDE        reduce using rule 48 (expr -> ref_expr .)
    MTIMES          reduce using rule 48 (expr -> ref_expr .)
    MINUS           reduce using rule 48 (expr -> ref_expr .)
    PLUS            reduce using rule 48 (expr -> ref_expr .)
    NE              reduce using rule 48 (expr -> ref_expr .)
    EQ              reduce using rule 48 (expr -> ref_expr .)
    GE              reduce using rule 48 (expr -> ref_expr .)
    GT              reduce using rule 48 (expr -> ref_expr .)
    LE              reduce using rule 48 (expr -> ref_expr .)
    LT              reduce using rule 48 (expr -> ref_expr .)
    AND             reduce using rule 48 (expr -> ref_expr .)
    OR              reduce using rule 48 (expr -> ref_expr .)
    ANDAND          reduce using rule 48 (expr -> ref_expr .)
    OROR            reduce using rule 48 (expr -> ref_expr .)
    COLON           reduce using rule 48 (expr -> ref_expr .)
    LPAREN          reduce using rule 48 (expr -> ref_expr .)
    NOT             reduce using rule 48 (expr -> ref_expr .)
    STRING          reduce using rule 48 (expr -> ref_expr .)
    NUMBER          reduce using rule 48 (expr -> ref_expr .)
    LSQR            reduce using rule 48 (expr -> ref_expr .)
    NAME            reduce using rule 48 (expr -> ref_expr .)
    RSQR            reduce using rule 48 (expr -> ref_expr .)
    SEMICOLON       reduce using rule 48 (expr -> ref_expr .)
    RPAREN          reduce using rule 48 (expr -> ref_expr .)
    NEWLINE         reduce using rule 48 (expr -> ref_expr .)
    FUNCTION        reduce using rule 48 (expr -> ref_expr .)
    FOR             reduce using rule 48 (expr -> ref_expr .)
    IF              reduce using rule 48 (expr -> ref_expr .)
    COMMAND         reduce using rule 48 (expr -> ref_expr .)
    $end            reduce using rule 48 (expr -> ref_expr .)
    END             reduce using rule 48 (expr -> ref_expr .)
    ELSE            reduce using rule 48 (expr -> ref_expr .)
    ELSEIF          reduce using rule 48 (expr -> ref_expr .)


state 35

    (53) function_call -> NAME LPAREN . args RPAREN
    (54) args -> . expr
    (55) args -> . args COMMA expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    args                           shift and go to state 83
    expr                           shift and go to state 84
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 36

    (22) expr -> LPAREN expr . RPAREN
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    RPAREN          shift and go to state 85
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 37

    (9) statement -> FOR assign . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    assign                         shift and go to state 11
    statements                     shift and go to state 86
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 38

    (52) function_call -> expr . LPAREN RPAREN
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    LPAREN          shift and go to state 65
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64


state 39

    (10) statement -> expr NEWLINE .
    NEWLINE         reduce using rule 10 (statement -> expr NEWLINE .)
    SEMICOLON       reduce using rule 10 (statement -> expr NEWLINE .)
    FUNCTION        reduce using rule 10 (statement -> expr NEWLINE .)
    FOR             reduce using rule 10 (statement -> expr NEWLINE .)
    IF              reduce using rule 10 (statement -> expr NEWLINE .)
    COMMAND         reduce using rule 10 (statement -> expr NEWLINE .)
    LPAREN          reduce using rule 10 (statement -> expr NEWLINE .)
    NOT             reduce using rule 10 (statement -> expr NEWLINE .)
    MINUS           reduce using rule 10 (statement -> expr NEWLINE .)
    PLUS            reduce using rule 10 (statement -> expr NEWLINE .)
    STRING          reduce using rule 10 (statement -> expr NEWLINE .)
    NUMBER          reduce using rule 10 (statement -> expr NEWLINE .)
    NAME            reduce using rule 10 (statement -> expr NEWLINE .)
    LSQR            reduce using rule 10 (statement -> expr NEWLINE .)
    $end            reduce using rule 10 (statement -> expr NEWLINE .)
    END             reduce using rule 10 (statement -> expr NEWLINE .)
    ELSE            reduce using rule 10 (statement -> expr NEWLINE .)
    ELSEIF          reduce using rule 10 (statement -> expr NEWLINE .)


state 40

    (11) statement -> expr SEMICOLON .
    NEWLINE         reduce using rule 11 (statement -> expr SEMICOLON .)
    SEMICOLON       reduce using rule 11 (statement -> expr SEMICOLON .)
    FUNCTION        reduce using rule 11 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 11 (statement -> expr SEMICOLON .)
    IF              reduce using rule 11 (statement -> expr SEMICOLON .)
    COMMAND         reduce using rule 11 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 11 (statement -> expr SEMICOLON .)
    NOT             reduce using rule 11 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 11 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 11 (statement -> expr SEMICOLON .)
    STRING          reduce using rule 11 (statement -> expr SEMICOLON .)
    NUMBER          reduce using rule 11 (statement -> expr SEMICOLON .)
    NAME            reduce using rule 11 (statement -> expr SEMICOLON .)
    LSQR            reduce using rule 11 (statement -> expr SEMICOLON .)
    $end            reduce using rule 11 (statement -> expr SEMICOLON .)
    END             reduce using rule 11 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 11 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 11 (statement -> expr SEMICOLON .)


state 41

    (17) expr -> expr CTRANSPOSE .
    NEWLINE         reduce using rule 17 (expr -> expr CTRANSPOSE .)
    SEMICOLON       reduce using rule 17 (expr -> expr CTRANSPOSE .)
    CTRANSPOSE      reduce using rule 17 (expr -> expr CTRANSPOSE .)
    TRANSPOSE       reduce using rule 17 (expr -> expr CTRANSPOSE .)
    DOT             reduce using rule 17 (expr -> expr CTRANSPOSE .)
    MPOWER          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    POWER           reduce using rule 17 (expr -> expr CTRANSPOSE .)
    LDIVIDE         reduce using rule 17 (expr -> expr CTRANSPOSE .)
    RDIVIDE         reduce using rule 17 (expr -> expr CTRANSPOSE .)
    TIMES           reduce using rule 17 (expr -> expr CTRANSPOSE .)
    MLDIVIDE        reduce using rule 17 (expr -> expr CTRANSPOSE .)
    MRDIVIDE        reduce using rule 17 (expr -> expr CTRANSPOSE .)
    MTIMES          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    MINUS           reduce using rule 17 (expr -> expr CTRANSPOSE .)
    PLUS            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    NE              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    EQ              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    GE              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    GT              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    LE              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    LT              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    AND             reduce using rule 17 (expr -> expr CTRANSPOSE .)
    OR              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    ANDAND          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    OROR            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    COLON           reduce using rule 17 (expr -> expr CTRANSPOSE .)
    LPAREN          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    COMMA           reduce using rule 17 (expr -> expr CTRANSPOSE .)
    NOT             reduce using rule 17 (expr -> expr CTRANSPOSE .)
    STRING          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    NUMBER          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    LSQR            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    NAME            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    RSQR            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    RPAREN          reduce using rule 17 (expr -> expr CTRANSPOSE .)
    FUNCTION        reduce using rule 17 (expr -> expr CTRANSPOSE .)
    FOR             reduce using rule 17 (expr -> expr CTRANSPOSE .)
    IF              reduce using rule 17 (expr -> expr CTRANSPOSE .)
    COMMAND         reduce using rule 17 (expr -> expr CTRANSPOSE .)
    $end            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    END             reduce using rule 17 (expr -> expr CTRANSPOSE .)
    ELSE            reduce using rule 17 (expr -> expr CTRANSPOSE .)
    ELSEIF          reduce using rule 17 (expr -> expr CTRANSPOSE .)


state 42

    (18) expr -> expr TRANSPOSE .
    NEWLINE         reduce using rule 18 (expr -> expr TRANSPOSE .)
    SEMICOLON       reduce using rule 18 (expr -> expr TRANSPOSE .)
    CTRANSPOSE      reduce using rule 18 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 18 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 18 (expr -> expr TRANSPOSE .)
    MPOWER          reduce using rule 18 (expr -> expr TRANSPOSE .)
    POWER           reduce using rule 18 (expr -> expr TRANSPOSE .)
    LDIVIDE         reduce using rule 18 (expr -> expr TRANSPOSE .)
    RDIVIDE         reduce using rule 18 (expr -> expr TRANSPOSE .)
    TIMES           reduce using rule 18 (expr -> expr TRANSPOSE .)
    MLDIVIDE        reduce using rule 18 (expr -> expr TRANSPOSE .)
    MRDIVIDE        reduce using rule 18 (expr -> expr TRANSPOSE .)
    MTIMES          reduce using rule 18 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 18 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 18 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 18 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 18 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 18 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 18 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 18 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 18 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 18 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 18 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 18 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 18 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 18 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 18 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 18 (expr -> expr TRANSPOSE .)
    NOT             reduce using rule 18 (expr -> expr TRANSPOSE .)
    STRING          reduce using rule 18 (expr -> expr TRANSPOSE .)
    NUMBER          reduce using rule 18 (expr -> expr TRANSPOSE .)
    LSQR            reduce using rule 18 (expr -> expr TRANSPOSE .)
    NAME            reduce using rule 18 (expr -> expr TRANSPOSE .)
    RSQR            reduce using rule 18 (expr -> expr TRANSPOSE .)
    RPAREN          reduce using rule 18 (expr -> expr TRANSPOSE .)
    FUNCTION        reduce using rule 18 (expr -> expr TRANSPOSE .)
    FOR             reduce using rule 18 (expr -> expr TRANSPOSE .)
    IF              reduce using rule 18 (expr -> expr TRANSPOSE .)
    COMMAND         reduce using rule 18 (expr -> expr TRANSPOSE .)
    $end            reduce using rule 18 (expr -> expr TRANSPOSE .)
    END             reduce using rule 18 (expr -> expr TRANSPOSE .)
    ELSE            reduce using rule 18 (expr -> expr TRANSPOSE .)
    ELSEIF          reduce using rule 18 (expr -> expr TRANSPOSE .)


state 43

    (21) expr -> expr DOT . NAME
    NAME            shift and go to state 87


state 44

    (23) expr -> expr MPOWER . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 88
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 45

    (24) expr -> expr POWER . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 89
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 46

    (25) expr -> expr LDIVIDE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 90
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 47

    (26) expr -> expr RDIVIDE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 91
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 48

    (27) expr -> expr TIMES . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 92
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 49

    (28) expr -> expr MLDIVIDE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 93
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 50

    (29) expr -> expr MRDIVIDE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 94
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 51

    (30) expr -> expr MTIMES . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 95
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 52

    (31) expr -> expr MINUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 96
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 53

    (32) expr -> expr PLUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 97
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 54

    (33) expr -> expr NE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 98
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 55

    (34) expr -> expr EQ . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 99
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 56

    (35) expr -> expr GE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 100
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 57

    (36) expr -> expr GT . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 101
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 58

    (37) expr -> expr LE . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 102
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 59

    (38) expr -> expr LT . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 103
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 60

    (39) expr -> expr AND . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 104
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 61

    (40) expr -> expr OR . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 105
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 62

    (41) expr -> expr ANDAND . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 106
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 63

    (42) expr -> expr OROR . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 107
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 64

    (49) expr -> expr COLON . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 108
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 65

    (52) function_call -> expr LPAREN . RPAREN
    RPAREN          shift and go to state 109


state 66

    (64) if_block -> IF expr . NEWLINE statements ELSE statements END
    (65) if_block -> IF expr . NEWLINE statements elseif_block
    (66) if_block -> IF expr . NEWLINE statements END
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 110
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 67

    (16) assign -> ref_expr ASSIGN . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    ref_expr                       shift and go to state 34
    expr                           shift and go to state 111
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 68

    (44) expr -> MINUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 44 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 44 (expr -> MINUS expr .)
    MINUS           reduce using rule 44 (expr -> MINUS expr .)
    PLUS            reduce using rule 44 (expr -> MINUS expr .)
    NE              reduce using rule 44 (expr -> MINUS expr .)
    EQ              reduce using rule 44 (expr -> MINUS expr .)
    GE              reduce using rule 44 (expr -> MINUS expr .)
    GT              reduce using rule 44 (expr -> MINUS expr .)
    LE              reduce using rule 44 (expr -> MINUS expr .)
    LT              reduce using rule 44 (expr -> MINUS expr .)
    AND             reduce using rule 44 (expr -> MINUS expr .)
    OR              reduce using rule 44 (expr -> MINUS expr .)
    ANDAND          reduce using rule 44 (expr -> MINUS expr .)
    OROR            reduce using rule 44 (expr -> MINUS expr .)
    COLON           reduce using rule 44 (expr -> MINUS expr .)
    LPAREN          reduce using rule 44 (expr -> MINUS expr .)
    COMMA           reduce using rule 44 (expr -> MINUS expr .)
    NOT             reduce using rule 44 (expr -> MINUS expr .)
    STRING          reduce using rule 44 (expr -> MINUS expr .)
    NUMBER          reduce using rule 44 (expr -> MINUS expr .)
    LSQR            reduce using rule 44 (expr -> MINUS expr .)
    NAME            reduce using rule 44 (expr -> MINUS expr .)
    RSQR            reduce using rule 44 (expr -> MINUS expr .)
    RPAREN          reduce using rule 44 (expr -> MINUS expr .)
    FUNCTION        reduce using rule 44 (expr -> MINUS expr .)
    FOR             reduce using rule 44 (expr -> MINUS expr .)
    IF              reduce using rule 44 (expr -> MINUS expr .)
    COMMAND         reduce using rule 44 (expr -> MINUS expr .)
    $end            reduce using rule 44 (expr -> MINUS expr .)
    END             reduce using rule 44 (expr -> MINUS expr .)
    ELSE            reduce using rule 44 (expr -> MINUS expr .)
    ELSEIF          reduce using rule 44 (expr -> MINUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 69

    (45) expr -> PLUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 45 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 45 (expr -> PLUS expr .)
    MINUS           reduce using rule 45 (expr -> PLUS expr .)
    PLUS            reduce using rule 45 (expr -> PLUS expr .)
    NE              reduce using rule 45 (expr -> PLUS expr .)
    EQ              reduce using rule 45 (expr -> PLUS expr .)
    GE              reduce using rule 45 (expr -> PLUS expr .)
    GT              reduce using rule 45 (expr -> PLUS expr .)
    LE              reduce using rule 45 (expr -> PLUS expr .)
    LT              reduce using rule 45 (expr -> PLUS expr .)
    AND             reduce using rule 45 (expr -> PLUS expr .)
    OR              reduce using rule 45 (expr -> PLUS expr .)
    ANDAND          reduce using rule 45 (expr -> PLUS expr .)
    OROR            reduce using rule 45 (expr -> PLUS expr .)
    COLON           reduce using rule 45 (expr -> PLUS expr .)
    LPAREN          reduce using rule 45 (expr -> PLUS expr .)
    COMMA           reduce using rule 45 (expr -> PLUS expr .)
    NOT             reduce using rule 45 (expr -> PLUS expr .)
    STRING          reduce using rule 45 (expr -> PLUS expr .)
    NUMBER          reduce using rule 45 (expr -> PLUS expr .)
    LSQR            reduce using rule 45 (expr -> PLUS expr .)
    NAME            reduce using rule 45 (expr -> PLUS expr .)
    RSQR            reduce using rule 45 (expr -> PLUS expr .)
    RPAREN          reduce using rule 45 (expr -> PLUS expr .)
    FUNCTION        reduce using rule 45 (expr -> PLUS expr .)
    FOR             reduce using rule 45 (expr -> PLUS expr .)
    IF              reduce using rule 45 (expr -> PLUS expr .)
    COMMAND         reduce using rule 45 (expr -> PLUS expr .)
    $end            reduce using rule 45 (expr -> PLUS expr .)
    END             reduce using rule 45 (expr -> PLUS expr .)
    ELSE            reduce using rule 45 (expr -> PLUS expr .)
    ELSEIF          reduce using rule 45 (expr -> PLUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 70

    (43) expr -> NOT expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 43 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 43 (expr -> NOT expr .)
    LDIVIDE         reduce using rule 43 (expr -> NOT expr .)
    RDIVIDE         reduce using rule 43 (expr -> NOT expr .)
    TIMES           reduce using rule 43 (expr -> NOT expr .)
    MLDIVIDE        reduce using rule 43 (expr -> NOT expr .)
    MRDIVIDE        reduce using rule 43 (expr -> NOT expr .)
    MTIMES          reduce using rule 43 (expr -> NOT expr .)
    MINUS           reduce using rule 43 (expr -> NOT expr .)
    PLUS            reduce using rule 43 (expr -> NOT expr .)
    NE              reduce using rule 43 (expr -> NOT expr .)
    EQ              reduce using rule 43 (expr -> NOT expr .)
    GE              reduce using rule 43 (expr -> NOT expr .)
    GT              reduce using rule 43 (expr -> NOT expr .)
    LE              reduce using rule 43 (expr -> NOT expr .)
    LT              reduce using rule 43 (expr -> NOT expr .)
    AND             reduce using rule 43 (expr -> NOT expr .)
    OR              reduce using rule 43 (expr -> NOT expr .)
    ANDAND          reduce using rule 43 (expr -> NOT expr .)
    OROR            reduce using rule 43 (expr -> NOT expr .)
    COLON           reduce using rule 43 (expr -> NOT expr .)
    LPAREN          reduce using rule 43 (expr -> NOT expr .)
    COMMA           reduce using rule 43 (expr -> NOT expr .)
    NOT             reduce using rule 43 (expr -> NOT expr .)
    STRING          reduce using rule 43 (expr -> NOT expr .)
    NUMBER          reduce using rule 43 (expr -> NOT expr .)
    LSQR            reduce using rule 43 (expr -> NOT expr .)
    NAME            reduce using rule 43 (expr -> NOT expr .)
    RSQR            reduce using rule 43 (expr -> NOT expr .)
    RPAREN          reduce using rule 43 (expr -> NOT expr .)
    FUNCTION        reduce using rule 43 (expr -> NOT expr .)
    FOR             reduce using rule 43 (expr -> NOT expr .)
    IF              reduce using rule 43 (expr -> NOT expr .)
    COMMAND         reduce using rule 43 (expr -> NOT expr .)
    $end            reduce using rule 43 (expr -> NOT expr .)
    END             reduce using rule 43 (expr -> NOT expr .)
    ELSE            reduce using rule 43 (expr -> NOT expr .)
    ELSEIF          reduce using rule 43 (expr -> NOT expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 71

    (14) statement -> statement NEWLINE .
    NEWLINE         reduce using rule 14 (statement -> statement NEWLINE .)
    SEMICOLON       reduce using rule 14 (statement -> statement NEWLINE .)
    FUNCTION        reduce using rule 14 (statement -> statement NEWLINE .)
    FOR             reduce using rule 14 (statement -> statement NEWLINE .)
    IF              reduce using rule 14 (statement -> statement NEWLINE .)
    COMMAND         reduce using rule 14 (statement -> statement NEWLINE .)
    LPAREN          reduce using rule 14 (statement -> statement NEWLINE .)
    NOT             reduce using rule 14 (statement -> statement NEWLINE .)
    MINUS           reduce using rule 14 (statement -> statement NEWLINE .)
    PLUS            reduce using rule 14 (statement -> statement NEWLINE .)
    STRING          reduce using rule 14 (statement -> statement NEWLINE .)
    NUMBER          reduce using rule 14 (statement -> statement NEWLINE .)
    NAME            reduce using rule 14 (statement -> statement NEWLINE .)
    LSQR            reduce using rule 14 (statement -> statement NEWLINE .)
    $end            reduce using rule 14 (statement -> statement NEWLINE .)
    END             reduce using rule 14 (statement -> statement NEWLINE .)
    ELSE            reduce using rule 14 (statement -> statement NEWLINE .)
    ELSEIF          reduce using rule 14 (statement -> statement NEWLINE .)


state 72

    (15) statement -> statement SEMICOLON .
    NEWLINE         reduce using rule 15 (statement -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 15 (statement -> statement SEMICOLON .)
    FUNCTION        reduce using rule 15 (statement -> statement SEMICOLON .)
    FOR             reduce using rule 15 (statement -> statement SEMICOLON .)
    IF              reduce using rule 15 (statement -> statement SEMICOLON .)
    COMMAND         reduce using rule 15 (statement -> statement SEMICOLON .)
    LPAREN          reduce using rule 15 (statement -> statement SEMICOLON .)
    NOT             reduce using rule 15 (statement -> statement SEMICOLON .)
    MINUS           reduce using rule 15 (statement -> statement SEMICOLON .)
    PLUS            reduce using rule 15 (statement -> statement SEMICOLON .)
    STRING          reduce using rule 15 (statement -> statement SEMICOLON .)
    NUMBER          reduce using rule 15 (statement -> statement SEMICOLON .)
    NAME            reduce using rule 15 (statement -> statement SEMICOLON .)
    LSQR            reduce using rule 15 (statement -> statement SEMICOLON .)
    $end            reduce using rule 15 (statement -> statement SEMICOLON .)
    END             reduce using rule 15 (statement -> statement SEMICOLON .)
    ELSE            reduce using rule 15 (statement -> statement SEMICOLON .)
    ELSEIF          reduce using rule 15 (statement -> statement SEMICOLON .)


state 73

    (5) statement -> FUNCTION LSQR return_vars . RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    RSQR            shift and go to state 112


state 74

    (69) return_vars -> NAME .
    (70) return_vars -> NAME . COMMA return_vars
    RSQR            reduce using rule 69 (return_vars -> NAME .)
    COMMA           shift and go to state 113


state 75

    (59) array_literal -> LSQR array_vals RSQR .
    NEWLINE         reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    SEMICOLON       reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    CTRANSPOSE      reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    TRANSPOSE       reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    DOT             reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    MPOWER          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    POWER           reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    LDIVIDE         reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    RDIVIDE         reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    TIMES           reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    MLDIVIDE        reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    MRDIVIDE        reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    MTIMES          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    MINUS           reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    PLUS            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    NE              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    EQ              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    GE              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    GT              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    LE              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    LT              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    AND             reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    OR              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    ANDAND          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    OROR            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    COLON           reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    LPAREN          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    COMMA           reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    NOT             reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    STRING          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    NUMBER          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    LSQR            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    NAME            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    RSQR            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    RPAREN          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    FUNCTION        reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    FOR             reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    IF              reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    COMMAND         reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    $end            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    END             reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    ELSE            reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)
    ELSEIF          reduce using rule 59 (array_literal -> LSQR array_vals RSQR .)


state 76

    (61) matrix_row_inner -> array_vals SEMICOLON .
    LPAREN          reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    NOT             reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    MINUS           reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    PLUS            reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    STRING          reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    NUMBER          reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    LSQR            reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)
    NAME            reduce using rule 61 (matrix_row_inner -> array_vals SEMICOLON .)


state 77

    (62) matrix_literal -> LSQR matrix_row_inner array_vals . RSQR
    (60) matrix_row_inner -> matrix_row_inner array_vals . SEMICOLON
    RSQR            shift and go to state 114
    SEMICOLON       shift and go to state 115


state 78

    (57) array_vals -> expr array_vals .
    RSQR            reduce using rule 57 (array_vals -> expr array_vals .)
    SEMICOLON       reduce using rule 57 (array_vals -> expr array_vals .)


state 79

    (58) array_vals -> expr COMMA . array_vals
    (56) array_vals -> . expr
    (57) array_vals -> . expr array_vals
    (58) array_vals -> . expr COMMA array_vals
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 33
    array_vals                     shift and go to state 116
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 80

    (31) expr -> expr MINUS . expr
    (44) expr -> MINUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 117
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 81

    (32) expr -> expr PLUS . expr
    (45) expr -> PLUS . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 118
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 82

    (52) function_call -> expr LPAREN . RPAREN
    (22) expr -> LPAREN . expr RPAREN
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    RPAREN          shift and go to state 109
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 36
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 83

    (53) function_call -> NAME LPAREN args . RPAREN
    (55) args -> args . COMMA expr
    RPAREN          shift and go to state 119
    COMMA           shift and go to state 120


state 84

    (54) args -> expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    RPAREN          reduce using rule 54 (args -> expr .)
    COMMA           reduce using rule 54 (args -> expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 85

    (22) expr -> LPAREN expr RPAREN .
    NEWLINE         reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    CTRANSPOSE      reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MPOWER          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LDIVIDE         reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    RDIVIDE         reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MLDIVIDE        reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MRDIVIDE        reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MTIMES          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    LSQR            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    NAME            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    RSQR            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    FUNCTION        reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    COMMAND         reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 22 (expr -> LPAREN expr RPAREN .)
    ELSEIF          reduce using rule 22 (expr -> LPAREN expr RPAREN .)


state 86

    (9) statement -> FOR assign statements . END
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 121
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    assign                         shift and go to state 11
    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 87

    (21) expr -> expr DOT NAME .
    NEWLINE         reduce using rule 21 (expr -> expr DOT NAME .)
    SEMICOLON       reduce using rule 21 (expr -> expr DOT NAME .)
    CTRANSPOSE      reduce using rule 21 (expr -> expr DOT NAME .)
    TRANSPOSE       reduce using rule 21 (expr -> expr DOT NAME .)
    DOT             reduce using rule 21 (expr -> expr DOT NAME .)
    MPOWER          reduce using rule 21 (expr -> expr DOT NAME .)
    POWER           reduce using rule 21 (expr -> expr DOT NAME .)
    LDIVIDE         reduce using rule 21 (expr -> expr DOT NAME .)
    RDIVIDE         reduce using rule 21 (expr -> expr DOT NAME .)
    TIMES           reduce using rule 21 (expr -> expr DOT NAME .)
    MLDIVIDE        reduce using rule 21 (expr -> expr DOT NAME .)
    MRDIVIDE        reduce using rule 21 (expr -> expr DOT NAME .)
    MTIMES          reduce using rule 21 (expr -> expr DOT NAME .)
    MINUS           reduce using rule 21 (expr -> expr DOT NAME .)
    PLUS            reduce using rule 21 (expr -> expr DOT NAME .)
    NE              reduce using rule 21 (expr -> expr DOT NAME .)
    EQ              reduce using rule 21 (expr -> expr DOT NAME .)
    GE              reduce using rule 21 (expr -> expr DOT NAME .)
    GT              reduce using rule 21 (expr -> expr DOT NAME .)
    LE              reduce using rule 21 (expr -> expr DOT NAME .)
    LT              reduce using rule 21 (expr -> expr DOT NAME .)
    AND             reduce using rule 21 (expr -> expr DOT NAME .)
    OR              reduce using rule 21 (expr -> expr DOT NAME .)
    ANDAND          reduce using rule 21 (expr -> expr DOT NAME .)
    OROR            reduce using rule 21 (expr -> expr DOT NAME .)
    COLON           reduce using rule 21 (expr -> expr DOT NAME .)
    LPAREN          reduce using rule 21 (expr -> expr DOT NAME .)
    COMMA           reduce using rule 21 (expr -> expr DOT NAME .)
    NOT             reduce using rule 21 (expr -> expr DOT NAME .)
    STRING          reduce using rule 21 (expr -> expr DOT NAME .)
    NUMBER          reduce using rule 21 (expr -> expr DOT NAME .)
    LSQR            reduce using rule 21 (expr -> expr DOT NAME .)
    NAME            reduce using rule 21 (expr -> expr DOT NAME .)
    RSQR            reduce using rule 21 (expr -> expr DOT NAME .)
    RPAREN          reduce using rule 21 (expr -> expr DOT NAME .)
    FUNCTION        reduce using rule 21 (expr -> expr DOT NAME .)
    FOR             reduce using rule 21 (expr -> expr DOT NAME .)
    IF              reduce using rule 21 (expr -> expr DOT NAME .)
    COMMAND         reduce using rule 21 (expr -> expr DOT NAME .)
    $end            reduce using rule 21 (expr -> expr DOT NAME .)
    END             reduce using rule 21 (expr -> expr DOT NAME .)
    ELSE            reduce using rule 21 (expr -> expr DOT NAME .)
    ELSEIF          reduce using rule 21 (expr -> expr DOT NAME .)


state 88

    (23) expr -> expr MPOWER expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 23 (expr -> expr MPOWER expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr MPOWER expr .)
    CTRANSPOSE      reduce using rule 23 (expr -> expr MPOWER expr .)
    TRANSPOSE       reduce using rule 23 (expr -> expr MPOWER expr .)
    MPOWER          reduce using rule 23 (expr -> expr MPOWER expr .)
    POWER           reduce using rule 23 (expr -> expr MPOWER expr .)
    LDIVIDE         reduce using rule 23 (expr -> expr MPOWER expr .)
    RDIVIDE         reduce using rule 23 (expr -> expr MPOWER expr .)
    TIMES           reduce using rule 23 (expr -> expr MPOWER expr .)
    MLDIVIDE        reduce using rule 23 (expr -> expr MPOWER expr .)
    MRDIVIDE        reduce using rule 23 (expr -> expr MPOWER expr .)
    MTIMES          reduce using rule 23 (expr -> expr MPOWER expr .)
    MINUS           reduce using rule 23 (expr -> expr MPOWER expr .)
    PLUS            reduce using rule 23 (expr -> expr MPOWER expr .)
    NE              reduce using rule 23 (expr -> expr MPOWER expr .)
    EQ              reduce using rule 23 (expr -> expr MPOWER expr .)
    GE              reduce using rule 23 (expr -> expr MPOWER expr .)
    GT              reduce using rule 23 (expr -> expr MPOWER expr .)
    LE              reduce using rule 23 (expr -> expr MPOWER expr .)
    LT              reduce using rule 23 (expr -> expr MPOWER expr .)
    AND             reduce using rule 23 (expr -> expr MPOWER expr .)
    OR              reduce using rule 23 (expr -> expr MPOWER expr .)
    ANDAND          reduce using rule 23 (expr -> expr MPOWER expr .)
    OROR            reduce using rule 23 (expr -> expr MPOWER expr .)
    COLON           reduce using rule 23 (expr -> expr MPOWER expr .)
    LPAREN          reduce using rule 23 (expr -> expr MPOWER expr .)
    COMMA           reduce using rule 23 (expr -> expr MPOWER expr .)
    NOT             reduce using rule 23 (expr -> expr MPOWER expr .)
    STRING          reduce using rule 23 (expr -> expr MPOWER expr .)
    NUMBER          reduce using rule 23 (expr -> expr MPOWER expr .)
    LSQR            reduce using rule 23 (expr -> expr MPOWER expr .)
    NAME            reduce using rule 23 (expr -> expr MPOWER expr .)
    RSQR            reduce using rule 23 (expr -> expr MPOWER expr .)
    RPAREN          reduce using rule 23 (expr -> expr MPOWER expr .)
    FUNCTION        reduce using rule 23 (expr -> expr MPOWER expr .)
    FOR             reduce using rule 23 (expr -> expr MPOWER expr .)
    IF              reduce using rule 23 (expr -> expr MPOWER expr .)
    COMMAND         reduce using rule 23 (expr -> expr MPOWER expr .)
    $end            reduce using rule 23 (expr -> expr MPOWER expr .)
    END             reduce using rule 23 (expr -> expr MPOWER expr .)
    ELSE            reduce using rule 23 (expr -> expr MPOWER expr .)
    ELSEIF          reduce using rule 23 (expr -> expr MPOWER expr .)
    DOT             shift and go to state 43


state 89

    (24) expr -> expr POWER expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 24 (expr -> expr POWER expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr POWER expr .)
    CTRANSPOSE      reduce using rule 24 (expr -> expr POWER expr .)
    TRANSPOSE       reduce using rule 24 (expr -> expr POWER expr .)
    MPOWER          reduce using rule 24 (expr -> expr POWER expr .)
    POWER           reduce using rule 24 (expr -> expr POWER expr .)
    LDIVIDE         reduce using rule 24 (expr -> expr POWER expr .)
    RDIVIDE         reduce using rule 24 (expr -> expr POWER expr .)
    TIMES           reduce using rule 24 (expr -> expr POWER expr .)
    MLDIVIDE        reduce using rule 24 (expr -> expr POWER expr .)
    MRDIVIDE        reduce using rule 24 (expr -> expr POWER expr .)
    MTIMES          reduce using rule 24 (expr -> expr POWER expr .)
    MINUS           reduce using rule 24 (expr -> expr POWER expr .)
    PLUS            reduce using rule 24 (expr -> expr POWER expr .)
    NE              reduce using rule 24 (expr -> expr POWER expr .)
    EQ              reduce using rule 24 (expr -> expr POWER expr .)
    GE              reduce using rule 24 (expr -> expr POWER expr .)
    GT              reduce using rule 24 (expr -> expr POWER expr .)
    LE              reduce using rule 24 (expr -> expr POWER expr .)
    LT              reduce using rule 24 (expr -> expr POWER expr .)
    AND             reduce using rule 24 (expr -> expr POWER expr .)
    OR              reduce using rule 24 (expr -> expr POWER expr .)
    ANDAND          reduce using rule 24 (expr -> expr POWER expr .)
    OROR            reduce using rule 24 (expr -> expr POWER expr .)
    COLON           reduce using rule 24 (expr -> expr POWER expr .)
    LPAREN          reduce using rule 24 (expr -> expr POWER expr .)
    COMMA           reduce using rule 24 (expr -> expr POWER expr .)
    NOT             reduce using rule 24 (expr -> expr POWER expr .)
    STRING          reduce using rule 24 (expr -> expr POWER expr .)
    NUMBER          reduce using rule 24 (expr -> expr POWER expr .)
    LSQR            reduce using rule 24 (expr -> expr POWER expr .)
    NAME            reduce using rule 24 (expr -> expr POWER expr .)
    RSQR            reduce using rule 24 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 24 (expr -> expr POWER expr .)
    FUNCTION        reduce using rule 24 (expr -> expr POWER expr .)
    FOR             reduce using rule 24 (expr -> expr POWER expr .)
    IF              reduce using rule 24 (expr -> expr POWER expr .)
    COMMAND         reduce using rule 24 (expr -> expr POWER expr .)
    $end            reduce using rule 24 (expr -> expr POWER expr .)
    END             reduce using rule 24 (expr -> expr POWER expr .)
    ELSE            reduce using rule 24 (expr -> expr POWER expr .)
    ELSEIF          reduce using rule 24 (expr -> expr POWER expr .)
    DOT             shift and go to state 43


state 90

    (25) expr -> expr LDIVIDE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 25 (expr -> expr LDIVIDE expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr LDIVIDE expr .)
    LDIVIDE         reduce using rule 25 (expr -> expr LDIVIDE expr .)
    RDIVIDE         reduce using rule 25 (expr -> expr LDIVIDE expr .)
    TIMES           reduce using rule 25 (expr -> expr LDIVIDE expr .)
    MLDIVIDE        reduce using rule 25 (expr -> expr LDIVIDE expr .)
    MRDIVIDE        reduce using rule 25 (expr -> expr LDIVIDE expr .)
    MTIMES          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    MINUS           reduce using rule 25 (expr -> expr LDIVIDE expr .)
    PLUS            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    NE              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    EQ              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    GE              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    GT              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    LE              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    LT              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    AND             reduce using rule 25 (expr -> expr LDIVIDE expr .)
    OR              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    ANDAND          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    OROR            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    COLON           reduce using rule 25 (expr -> expr LDIVIDE expr .)
    LPAREN          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    COMMA           reduce using rule 25 (expr -> expr LDIVIDE expr .)
    NOT             reduce using rule 25 (expr -> expr LDIVIDE expr .)
    STRING          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    NUMBER          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    LSQR            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    NAME            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    RSQR            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    RPAREN          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    FUNCTION        reduce using rule 25 (expr -> expr LDIVIDE expr .)
    FOR             reduce using rule 25 (expr -> expr LDIVIDE expr .)
    IF              reduce using rule 25 (expr -> expr LDIVIDE expr .)
    COMMAND         reduce using rule 25 (expr -> expr LDIVIDE expr .)
    $end            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    END             reduce using rule 25 (expr -> expr LDIVIDE expr .)
    ELSE            reduce using rule 25 (expr -> expr LDIVIDE expr .)
    ELSEIF          reduce using rule 25 (expr -> expr LDIVIDE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 91

    (26) expr -> expr RDIVIDE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 26 (expr -> expr RDIVIDE expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr RDIVIDE expr .)
    LDIVIDE         reduce using rule 26 (expr -> expr RDIVIDE expr .)
    RDIVIDE         reduce using rule 26 (expr -> expr RDIVIDE expr .)
    TIMES           reduce using rule 26 (expr -> expr RDIVIDE expr .)
    MLDIVIDE        reduce using rule 26 (expr -> expr RDIVIDE expr .)
    MRDIVIDE        reduce using rule 26 (expr -> expr RDIVIDE expr .)
    MTIMES          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    MINUS           reduce using rule 26 (expr -> expr RDIVIDE expr .)
    PLUS            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    NE              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    EQ              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    GE              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    GT              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    LE              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    LT              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    AND             reduce using rule 26 (expr -> expr RDIVIDE expr .)
    OR              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    ANDAND          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    OROR            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    COLON           reduce using rule 26 (expr -> expr RDIVIDE expr .)
    LPAREN          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    COMMA           reduce using rule 26 (expr -> expr RDIVIDE expr .)
    NOT             reduce using rule 26 (expr -> expr RDIVIDE expr .)
    STRING          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    NUMBER          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    LSQR            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    NAME            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    RSQR            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    RPAREN          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    FUNCTION        reduce using rule 26 (expr -> expr RDIVIDE expr .)
    FOR             reduce using rule 26 (expr -> expr RDIVIDE expr .)
    IF              reduce using rule 26 (expr -> expr RDIVIDE expr .)
    COMMAND         reduce using rule 26 (expr -> expr RDIVIDE expr .)
    $end            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    END             reduce using rule 26 (expr -> expr RDIVIDE expr .)
    ELSE            reduce using rule 26 (expr -> expr RDIVIDE expr .)
    ELSEIF          reduce using rule 26 (expr -> expr RDIVIDE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 92

    (27) expr -> expr TIMES expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 27 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr TIMES expr .)
    LDIVIDE         reduce using rule 27 (expr -> expr TIMES expr .)
    RDIVIDE         reduce using rule 27 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 27 (expr -> expr TIMES expr .)
    MLDIVIDE        reduce using rule 27 (expr -> expr TIMES expr .)
    MRDIVIDE        reduce using rule 27 (expr -> expr TIMES expr .)
    MTIMES          reduce using rule 27 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 27 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 27 (expr -> expr TIMES expr .)
    NE              reduce using rule 27 (expr -> expr TIMES expr .)
    EQ              reduce using rule 27 (expr -> expr TIMES expr .)
    GE              reduce using rule 27 (expr -> expr TIMES expr .)
    GT              reduce using rule 27 (expr -> expr TIMES expr .)
    LE              reduce using rule 27 (expr -> expr TIMES expr .)
    LT              reduce using rule 27 (expr -> expr TIMES expr .)
    AND             reduce using rule 27 (expr -> expr TIMES expr .)
    OR              reduce using rule 27 (expr -> expr TIMES expr .)
    ANDAND          reduce using rule 27 (expr -> expr TIMES expr .)
    OROR            reduce using rule 27 (expr -> expr TIMES expr .)
    COLON           reduce using rule 27 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 27 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 27 (expr -> expr TIMES expr .)
    NOT             reduce using rule 27 (expr -> expr TIMES expr .)
    STRING          reduce using rule 27 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 27 (expr -> expr TIMES expr .)
    LSQR            reduce using rule 27 (expr -> expr TIMES expr .)
    NAME            reduce using rule 27 (expr -> expr TIMES expr .)
    RSQR            reduce using rule 27 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 27 (expr -> expr TIMES expr .)
    FUNCTION        reduce using rule 27 (expr -> expr TIMES expr .)
    FOR             reduce using rule 27 (expr -> expr TIMES expr .)
    IF              reduce using rule 27 (expr -> expr TIMES expr .)
    COMMAND         reduce using rule 27 (expr -> expr TIMES expr .)
    $end            reduce using rule 27 (expr -> expr TIMES expr .)
    END             reduce using rule 27 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 27 (expr -> expr TIMES expr .)
    ELSEIF          reduce using rule 27 (expr -> expr TIMES expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 93

    (28) expr -> expr MLDIVIDE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    LDIVIDE         reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    RDIVIDE         reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    TIMES           reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    MLDIVIDE        reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    MRDIVIDE        reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    MTIMES          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    MINUS           reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    PLUS            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    NE              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    EQ              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    GE              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    GT              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    LE              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    LT              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    AND             reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    OR              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    ANDAND          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    OROR            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    COLON           reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    LPAREN          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    COMMA           reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    NOT             reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    STRING          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    NUMBER          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    LSQR            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    NAME            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    RSQR            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    RPAREN          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    FUNCTION        reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    FOR             reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    IF              reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    COMMAND         reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    $end            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    END             reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    ELSE            reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    ELSEIF          reduce using rule 28 (expr -> expr MLDIVIDE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 94

    (29) expr -> expr MRDIVIDE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    LDIVIDE         reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    RDIVIDE         reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    TIMES           reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    MLDIVIDE        reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    MRDIVIDE        reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    MTIMES          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    MINUS           reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    PLUS            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    NE              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    EQ              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    GE              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    GT              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    LE              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    LT              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    AND             reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    OR              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    ANDAND          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    OROR            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    COLON           reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    LPAREN          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    COMMA           reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    NOT             reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    STRING          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    NUMBER          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    LSQR            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    NAME            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    RSQR            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    RPAREN          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    FUNCTION        reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    FOR             reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    IF              reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    COMMAND         reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    $end            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    END             reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    ELSE            reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    ELSEIF          reduce using rule 29 (expr -> expr MRDIVIDE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 95

    (30) expr -> expr MTIMES expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 30 (expr -> expr MTIMES expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr MTIMES expr .)
    LDIVIDE         reduce using rule 30 (expr -> expr MTIMES expr .)
    RDIVIDE         reduce using rule 30 (expr -> expr MTIMES expr .)
    TIMES           reduce using rule 30 (expr -> expr MTIMES expr .)
    MLDIVIDE        reduce using rule 30 (expr -> expr MTIMES expr .)
    MRDIVIDE        reduce using rule 30 (expr -> expr MTIMES expr .)
    MTIMES          reduce using rule 30 (expr -> expr MTIMES expr .)
    MINUS           reduce using rule 30 (expr -> expr MTIMES expr .)
    PLUS            reduce using rule 30 (expr -> expr MTIMES expr .)
    NE              reduce using rule 30 (expr -> expr MTIMES expr .)
    EQ              reduce using rule 30 (expr -> expr MTIMES expr .)
    GE              reduce using rule 30 (expr -> expr MTIMES expr .)
    GT              reduce using rule 30 (expr -> expr MTIMES expr .)
    LE              reduce using rule 30 (expr -> expr MTIMES expr .)
    LT              reduce using rule 30 (expr -> expr MTIMES expr .)
    AND             reduce using rule 30 (expr -> expr MTIMES expr .)
    OR              reduce using rule 30 (expr -> expr MTIMES expr .)
    ANDAND          reduce using rule 30 (expr -> expr MTIMES expr .)
    OROR            reduce using rule 30 (expr -> expr MTIMES expr .)
    COLON           reduce using rule 30 (expr -> expr MTIMES expr .)
    LPAREN          reduce using rule 30 (expr -> expr MTIMES expr .)
    COMMA           reduce using rule 30 (expr -> expr MTIMES expr .)
    NOT             reduce using rule 30 (expr -> expr MTIMES expr .)
    STRING          reduce using rule 30 (expr -> expr MTIMES expr .)
    NUMBER          reduce using rule 30 (expr -> expr MTIMES expr .)
    LSQR            reduce using rule 30 (expr -> expr MTIMES expr .)
    NAME            reduce using rule 30 (expr -> expr MTIMES expr .)
    RSQR            reduce using rule 30 (expr -> expr MTIMES expr .)
    RPAREN          reduce using rule 30 (expr -> expr MTIMES expr .)
    FUNCTION        reduce using rule 30 (expr -> expr MTIMES expr .)
    FOR             reduce using rule 30 (expr -> expr MTIMES expr .)
    IF              reduce using rule 30 (expr -> expr MTIMES expr .)
    COMMAND         reduce using rule 30 (expr -> expr MTIMES expr .)
    $end            reduce using rule 30 (expr -> expr MTIMES expr .)
    END             reduce using rule 30 (expr -> expr MTIMES expr .)
    ELSE            reduce using rule 30 (expr -> expr MTIMES expr .)
    ELSEIF          reduce using rule 30 (expr -> expr MTIMES expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45


state 96

    (31) expr -> expr MINUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 31 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 31 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 31 (expr -> expr MINUS expr .)
    NE              reduce using rule 31 (expr -> expr MINUS expr .)
    EQ              reduce using rule 31 (expr -> expr MINUS expr .)
    GE              reduce using rule 31 (expr -> expr MINUS expr .)
    GT              reduce using rule 31 (expr -> expr MINUS expr .)
    LE              reduce using rule 31 (expr -> expr MINUS expr .)
    LT              reduce using rule 31 (expr -> expr MINUS expr .)
    AND             reduce using rule 31 (expr -> expr MINUS expr .)
    OR              reduce using rule 31 (expr -> expr MINUS expr .)
    ANDAND          reduce using rule 31 (expr -> expr MINUS expr .)
    OROR            reduce using rule 31 (expr -> expr MINUS expr .)
    COLON           reduce using rule 31 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 31 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 31 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 31 (expr -> expr MINUS expr .)
    NOT             reduce using rule 31 (expr -> expr MINUS expr .)
    STRING          reduce using rule 31 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 31 (expr -> expr MINUS expr .)
    LSQR            reduce using rule 31 (expr -> expr MINUS expr .)
    NAME            reduce using rule 31 (expr -> expr MINUS expr .)
    RSQR            reduce using rule 31 (expr -> expr MINUS expr .)
    FUNCTION        reduce using rule 31 (expr -> expr MINUS expr .)
    FOR             reduce using rule 31 (expr -> expr MINUS expr .)
    IF              reduce using rule 31 (expr -> expr MINUS expr .)
    COMMAND         reduce using rule 31 (expr -> expr MINUS expr .)
    $end            reduce using rule 31 (expr -> expr MINUS expr .)
    END             reduce using rule 31 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 31 (expr -> expr MINUS expr .)
    ELSEIF          reduce using rule 31 (expr -> expr MINUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 97

    (32) expr -> expr PLUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 32 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 32 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 32 (expr -> expr PLUS expr .)
    NE              reduce using rule 32 (expr -> expr PLUS expr .)
    EQ              reduce using rule 32 (expr -> expr PLUS expr .)
    GE              reduce using rule 32 (expr -> expr PLUS expr .)
    GT              reduce using rule 32 (expr -> expr PLUS expr .)
    LE              reduce using rule 32 (expr -> expr PLUS expr .)
    LT              reduce using rule 32 (expr -> expr PLUS expr .)
    AND             reduce using rule 32 (expr -> expr PLUS expr .)
    OR              reduce using rule 32 (expr -> expr PLUS expr .)
    ANDAND          reduce using rule 32 (expr -> expr PLUS expr .)
    OROR            reduce using rule 32 (expr -> expr PLUS expr .)
    COLON           reduce using rule 32 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    NOT             reduce using rule 32 (expr -> expr PLUS expr .)
    STRING          reduce using rule 32 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 32 (expr -> expr PLUS expr .)
    LSQR            reduce using rule 32 (expr -> expr PLUS expr .)
    NAME            reduce using rule 32 (expr -> expr PLUS expr .)
    RSQR            reduce using rule 32 (expr -> expr PLUS expr .)
    FUNCTION        reduce using rule 32 (expr -> expr PLUS expr .)
    FOR             reduce using rule 32 (expr -> expr PLUS expr .)
    IF              reduce using rule 32 (expr -> expr PLUS expr .)
    COMMAND         reduce using rule 32 (expr -> expr PLUS expr .)
    $end            reduce using rule 32 (expr -> expr PLUS expr .)
    END             reduce using rule 32 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 32 (expr -> expr PLUS expr .)
    ELSEIF          reduce using rule 32 (expr -> expr PLUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 98

    (33) expr -> expr NE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 33 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr NE expr .)
    NE              reduce using rule 33 (expr -> expr NE expr .)
    EQ              reduce using rule 33 (expr -> expr NE expr .)
    GE              reduce using rule 33 (expr -> expr NE expr .)
    GT              reduce using rule 33 (expr -> expr NE expr .)
    LE              reduce using rule 33 (expr -> expr NE expr .)
    LT              reduce using rule 33 (expr -> expr NE expr .)
    AND             reduce using rule 33 (expr -> expr NE expr .)
    OR              reduce using rule 33 (expr -> expr NE expr .)
    ANDAND          reduce using rule 33 (expr -> expr NE expr .)
    OROR            reduce using rule 33 (expr -> expr NE expr .)
    LPAREN          reduce using rule 33 (expr -> expr NE expr .)
    COMMA           reduce using rule 33 (expr -> expr NE expr .)
    NOT             reduce using rule 33 (expr -> expr NE expr .)
    STRING          reduce using rule 33 (expr -> expr NE expr .)
    NUMBER          reduce using rule 33 (expr -> expr NE expr .)
    LSQR            reduce using rule 33 (expr -> expr NE expr .)
    NAME            reduce using rule 33 (expr -> expr NE expr .)
    RSQR            reduce using rule 33 (expr -> expr NE expr .)
    RPAREN          reduce using rule 33 (expr -> expr NE expr .)
    FUNCTION        reduce using rule 33 (expr -> expr NE expr .)
    FOR             reduce using rule 33 (expr -> expr NE expr .)
    IF              reduce using rule 33 (expr -> expr NE expr .)
    COMMAND         reduce using rule 33 (expr -> expr NE expr .)
    $end            reduce using rule 33 (expr -> expr NE expr .)
    END             reduce using rule 33 (expr -> expr NE expr .)
    ELSE            reduce using rule 33 (expr -> expr NE expr .)
    ELSEIF          reduce using rule 33 (expr -> expr NE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 99

    (34) expr -> expr EQ expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 34 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr EQ expr .)
    NE              reduce using rule 34 (expr -> expr EQ expr .)
    EQ              reduce using rule 34 (expr -> expr EQ expr .)
    GE              reduce using rule 34 (expr -> expr EQ expr .)
    GT              reduce using rule 34 (expr -> expr EQ expr .)
    LE              reduce using rule 34 (expr -> expr EQ expr .)
    LT              reduce using rule 34 (expr -> expr EQ expr .)
    AND             reduce using rule 34 (expr -> expr EQ expr .)
    OR              reduce using rule 34 (expr -> expr EQ expr .)
    ANDAND          reduce using rule 34 (expr -> expr EQ expr .)
    OROR            reduce using rule 34 (expr -> expr EQ expr .)
    LPAREN          reduce using rule 34 (expr -> expr EQ expr .)
    COMMA           reduce using rule 34 (expr -> expr EQ expr .)
    NOT             reduce using rule 34 (expr -> expr EQ expr .)
    STRING          reduce using rule 34 (expr -> expr EQ expr .)
    NUMBER          reduce using rule 34 (expr -> expr EQ expr .)
    LSQR            reduce using rule 34 (expr -> expr EQ expr .)
    NAME            reduce using rule 34 (expr -> expr EQ expr .)
    RSQR            reduce using rule 34 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 34 (expr -> expr EQ expr .)
    FUNCTION        reduce using rule 34 (expr -> expr EQ expr .)
    FOR             reduce using rule 34 (expr -> expr EQ expr .)
    IF              reduce using rule 34 (expr -> expr EQ expr .)
    COMMAND         reduce using rule 34 (expr -> expr EQ expr .)
    $end            reduce using rule 34 (expr -> expr EQ expr .)
    END             reduce using rule 34 (expr -> expr EQ expr .)
    ELSE            reduce using rule 34 (expr -> expr EQ expr .)
    ELSEIF          reduce using rule 34 (expr -> expr EQ expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 100

    (35) expr -> expr GE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 35 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr GE expr .)
    NE              reduce using rule 35 (expr -> expr GE expr .)
    EQ              reduce using rule 35 (expr -> expr GE expr .)
    GE              reduce using rule 35 (expr -> expr GE expr .)
    GT              reduce using rule 35 (expr -> expr GE expr .)
    LE              reduce using rule 35 (expr -> expr GE expr .)
    LT              reduce using rule 35 (expr -> expr GE expr .)
    AND             reduce using rule 35 (expr -> expr GE expr .)
    OR              reduce using rule 35 (expr -> expr GE expr .)
    ANDAND          reduce using rule 35 (expr -> expr GE expr .)
    OROR            reduce using rule 35 (expr -> expr GE expr .)
    LPAREN          reduce using rule 35 (expr -> expr GE expr .)
    COMMA           reduce using rule 35 (expr -> expr GE expr .)
    NOT             reduce using rule 35 (expr -> expr GE expr .)
    STRING          reduce using rule 35 (expr -> expr GE expr .)
    NUMBER          reduce using rule 35 (expr -> expr GE expr .)
    LSQR            reduce using rule 35 (expr -> expr GE expr .)
    NAME            reduce using rule 35 (expr -> expr GE expr .)
    RSQR            reduce using rule 35 (expr -> expr GE expr .)
    RPAREN          reduce using rule 35 (expr -> expr GE expr .)
    FUNCTION        reduce using rule 35 (expr -> expr GE expr .)
    FOR             reduce using rule 35 (expr -> expr GE expr .)
    IF              reduce using rule 35 (expr -> expr GE expr .)
    COMMAND         reduce using rule 35 (expr -> expr GE expr .)
    $end            reduce using rule 35 (expr -> expr GE expr .)
    END             reduce using rule 35 (expr -> expr GE expr .)
    ELSE            reduce using rule 35 (expr -> expr GE expr .)
    ELSEIF          reduce using rule 35 (expr -> expr GE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 101

    (36) expr -> expr GT expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 36 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr GT expr .)
    NE              reduce using rule 36 (expr -> expr GT expr .)
    EQ              reduce using rule 36 (expr -> expr GT expr .)
    GE              reduce using rule 36 (expr -> expr GT expr .)
    GT              reduce using rule 36 (expr -> expr GT expr .)
    LE              reduce using rule 36 (expr -> expr GT expr .)
    LT              reduce using rule 36 (expr -> expr GT expr .)
    AND             reduce using rule 36 (expr -> expr GT expr .)
    OR              reduce using rule 36 (expr -> expr GT expr .)
    ANDAND          reduce using rule 36 (expr -> expr GT expr .)
    OROR            reduce using rule 36 (expr -> expr GT expr .)
    LPAREN          reduce using rule 36 (expr -> expr GT expr .)
    COMMA           reduce using rule 36 (expr -> expr GT expr .)
    NOT             reduce using rule 36 (expr -> expr GT expr .)
    STRING          reduce using rule 36 (expr -> expr GT expr .)
    NUMBER          reduce using rule 36 (expr -> expr GT expr .)
    LSQR            reduce using rule 36 (expr -> expr GT expr .)
    NAME            reduce using rule 36 (expr -> expr GT expr .)
    RSQR            reduce using rule 36 (expr -> expr GT expr .)
    RPAREN          reduce using rule 36 (expr -> expr GT expr .)
    FUNCTION        reduce using rule 36 (expr -> expr GT expr .)
    FOR             reduce using rule 36 (expr -> expr GT expr .)
    IF              reduce using rule 36 (expr -> expr GT expr .)
    COMMAND         reduce using rule 36 (expr -> expr GT expr .)
    $end            reduce using rule 36 (expr -> expr GT expr .)
    END             reduce using rule 36 (expr -> expr GT expr .)
    ELSE            reduce using rule 36 (expr -> expr GT expr .)
    ELSEIF          reduce using rule 36 (expr -> expr GT expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 102

    (37) expr -> expr LE expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 37 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr LE expr .)
    NE              reduce using rule 37 (expr -> expr LE expr .)
    EQ              reduce using rule 37 (expr -> expr LE expr .)
    GE              reduce using rule 37 (expr -> expr LE expr .)
    GT              reduce using rule 37 (expr -> expr LE expr .)
    LE              reduce using rule 37 (expr -> expr LE expr .)
    LT              reduce using rule 37 (expr -> expr LE expr .)
    AND             reduce using rule 37 (expr -> expr LE expr .)
    OR              reduce using rule 37 (expr -> expr LE expr .)
    ANDAND          reduce using rule 37 (expr -> expr LE expr .)
    OROR            reduce using rule 37 (expr -> expr LE expr .)
    LPAREN          reduce using rule 37 (expr -> expr LE expr .)
    COMMA           reduce using rule 37 (expr -> expr LE expr .)
    NOT             reduce using rule 37 (expr -> expr LE expr .)
    STRING          reduce using rule 37 (expr -> expr LE expr .)
    NUMBER          reduce using rule 37 (expr -> expr LE expr .)
    LSQR            reduce using rule 37 (expr -> expr LE expr .)
    NAME            reduce using rule 37 (expr -> expr LE expr .)
    RSQR            reduce using rule 37 (expr -> expr LE expr .)
    RPAREN          reduce using rule 37 (expr -> expr LE expr .)
    FUNCTION        reduce using rule 37 (expr -> expr LE expr .)
    FOR             reduce using rule 37 (expr -> expr LE expr .)
    IF              reduce using rule 37 (expr -> expr LE expr .)
    COMMAND         reduce using rule 37 (expr -> expr LE expr .)
    $end            reduce using rule 37 (expr -> expr LE expr .)
    END             reduce using rule 37 (expr -> expr LE expr .)
    ELSE            reduce using rule 37 (expr -> expr LE expr .)
    ELSEIF          reduce using rule 37 (expr -> expr LE expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 103

    (38) expr -> expr LT expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 38 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr LT expr .)
    NE              reduce using rule 38 (expr -> expr LT expr .)
    EQ              reduce using rule 38 (expr -> expr LT expr .)
    GE              reduce using rule 38 (expr -> expr LT expr .)
    GT              reduce using rule 38 (expr -> expr LT expr .)
    LE              reduce using rule 38 (expr -> expr LT expr .)
    LT              reduce using rule 38 (expr -> expr LT expr .)
    AND             reduce using rule 38 (expr -> expr LT expr .)
    OR              reduce using rule 38 (expr -> expr LT expr .)
    ANDAND          reduce using rule 38 (expr -> expr LT expr .)
    OROR            reduce using rule 38 (expr -> expr LT expr .)
    LPAREN          reduce using rule 38 (expr -> expr LT expr .)
    COMMA           reduce using rule 38 (expr -> expr LT expr .)
    NOT             reduce using rule 38 (expr -> expr LT expr .)
    STRING          reduce using rule 38 (expr -> expr LT expr .)
    NUMBER          reduce using rule 38 (expr -> expr LT expr .)
    LSQR            reduce using rule 38 (expr -> expr LT expr .)
    NAME            reduce using rule 38 (expr -> expr LT expr .)
    RSQR            reduce using rule 38 (expr -> expr LT expr .)
    RPAREN          reduce using rule 38 (expr -> expr LT expr .)
    FUNCTION        reduce using rule 38 (expr -> expr LT expr .)
    FOR             reduce using rule 38 (expr -> expr LT expr .)
    IF              reduce using rule 38 (expr -> expr LT expr .)
    COMMAND         reduce using rule 38 (expr -> expr LT expr .)
    $end            reduce using rule 38 (expr -> expr LT expr .)
    END             reduce using rule 38 (expr -> expr LT expr .)
    ELSE            reduce using rule 38 (expr -> expr LT expr .)
    ELSEIF          reduce using rule 38 (expr -> expr LT expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    COLON           shift and go to state 64


state 104

    (39) expr -> expr AND expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 39 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr AND expr .)
    AND             reduce using rule 39 (expr -> expr AND expr .)
    OR              reduce using rule 39 (expr -> expr AND expr .)
    ANDAND          reduce using rule 39 (expr -> expr AND expr .)
    OROR            reduce using rule 39 (expr -> expr AND expr .)
    LPAREN          reduce using rule 39 (expr -> expr AND expr .)
    COMMA           reduce using rule 39 (expr -> expr AND expr .)
    NOT             reduce using rule 39 (expr -> expr AND expr .)
    STRING          reduce using rule 39 (expr -> expr AND expr .)
    NUMBER          reduce using rule 39 (expr -> expr AND expr .)
    LSQR            reduce using rule 39 (expr -> expr AND expr .)
    NAME            reduce using rule 39 (expr -> expr AND expr .)
    RSQR            reduce using rule 39 (expr -> expr AND expr .)
    RPAREN          reduce using rule 39 (expr -> expr AND expr .)
    FUNCTION        reduce using rule 39 (expr -> expr AND expr .)
    FOR             reduce using rule 39 (expr -> expr AND expr .)
    IF              reduce using rule 39 (expr -> expr AND expr .)
    COMMAND         reduce using rule 39 (expr -> expr AND expr .)
    $end            reduce using rule 39 (expr -> expr AND expr .)
    END             reduce using rule 39 (expr -> expr AND expr .)
    ELSE            reduce using rule 39 (expr -> expr AND expr .)
    ELSEIF          reduce using rule 39 (expr -> expr AND expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    COLON           shift and go to state 64


state 105

    (40) expr -> expr OR expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 40 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr OR expr .)
    OR              reduce using rule 40 (expr -> expr OR expr .)
    ANDAND          reduce using rule 40 (expr -> expr OR expr .)
    OROR            reduce using rule 40 (expr -> expr OR expr .)
    LPAREN          reduce using rule 40 (expr -> expr OR expr .)
    COMMA           reduce using rule 40 (expr -> expr OR expr .)
    NOT             reduce using rule 40 (expr -> expr OR expr .)
    STRING          reduce using rule 40 (expr -> expr OR expr .)
    NUMBER          reduce using rule 40 (expr -> expr OR expr .)
    LSQR            reduce using rule 40 (expr -> expr OR expr .)
    NAME            reduce using rule 40 (expr -> expr OR expr .)
    RSQR            reduce using rule 40 (expr -> expr OR expr .)
    RPAREN          reduce using rule 40 (expr -> expr OR expr .)
    FUNCTION        reduce using rule 40 (expr -> expr OR expr .)
    FOR             reduce using rule 40 (expr -> expr OR expr .)
    IF              reduce using rule 40 (expr -> expr OR expr .)
    COMMAND         reduce using rule 40 (expr -> expr OR expr .)
    $end            reduce using rule 40 (expr -> expr OR expr .)
    END             reduce using rule 40 (expr -> expr OR expr .)
    ELSE            reduce using rule 40 (expr -> expr OR expr .)
    ELSEIF          reduce using rule 40 (expr -> expr OR expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    COLON           shift and go to state 64


state 106

    (41) expr -> expr ANDAND expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 41 (expr -> expr ANDAND expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr ANDAND expr .)
    ANDAND          reduce using rule 41 (expr -> expr ANDAND expr .)
    OROR            reduce using rule 41 (expr -> expr ANDAND expr .)
    LPAREN          reduce using rule 41 (expr -> expr ANDAND expr .)
    COMMA           reduce using rule 41 (expr -> expr ANDAND expr .)
    NOT             reduce using rule 41 (expr -> expr ANDAND expr .)
    STRING          reduce using rule 41 (expr -> expr ANDAND expr .)
    NUMBER          reduce using rule 41 (expr -> expr ANDAND expr .)
    LSQR            reduce using rule 41 (expr -> expr ANDAND expr .)
    NAME            reduce using rule 41 (expr -> expr ANDAND expr .)
    RSQR            reduce using rule 41 (expr -> expr ANDAND expr .)
    RPAREN          reduce using rule 41 (expr -> expr ANDAND expr .)
    FUNCTION        reduce using rule 41 (expr -> expr ANDAND expr .)
    FOR             reduce using rule 41 (expr -> expr ANDAND expr .)
    IF              reduce using rule 41 (expr -> expr ANDAND expr .)
    COMMAND         reduce using rule 41 (expr -> expr ANDAND expr .)
    $end            reduce using rule 41 (expr -> expr ANDAND expr .)
    END             reduce using rule 41 (expr -> expr ANDAND expr .)
    ELSE            reduce using rule 41 (expr -> expr ANDAND expr .)
    ELSEIF          reduce using rule 41 (expr -> expr ANDAND expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    COLON           shift and go to state 64


state 107

    (42) expr -> expr OROR expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 42 (expr -> expr OROR expr .)
    SEMICOLON       reduce using rule 42 (expr -> expr OROR expr .)
    OROR            reduce using rule 42 (expr -> expr OROR expr .)
    LPAREN          reduce using rule 42 (expr -> expr OROR expr .)
    COMMA           reduce using rule 42 (expr -> expr OROR expr .)
    NOT             reduce using rule 42 (expr -> expr OROR expr .)
    STRING          reduce using rule 42 (expr -> expr OROR expr .)
    NUMBER          reduce using rule 42 (expr -> expr OROR expr .)
    LSQR            reduce using rule 42 (expr -> expr OROR expr .)
    NAME            reduce using rule 42 (expr -> expr OROR expr .)
    RSQR            reduce using rule 42 (expr -> expr OROR expr .)
    RPAREN          reduce using rule 42 (expr -> expr OROR expr .)
    FUNCTION        reduce using rule 42 (expr -> expr OROR expr .)
    FOR             reduce using rule 42 (expr -> expr OROR expr .)
    IF              reduce using rule 42 (expr -> expr OROR expr .)
    COMMAND         reduce using rule 42 (expr -> expr OROR expr .)
    $end            reduce using rule 42 (expr -> expr OROR expr .)
    END             reduce using rule 42 (expr -> expr OROR expr .)
    ELSE            reduce using rule 42 (expr -> expr OROR expr .)
    ELSEIF          reduce using rule 42 (expr -> expr OROR expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    COLON           shift and go to state 64


state 108

    (49) expr -> expr COLON expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 49 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr COLON expr .)
    NE              reduce using rule 49 (expr -> expr COLON expr .)
    EQ              reduce using rule 49 (expr -> expr COLON expr .)
    GE              reduce using rule 49 (expr -> expr COLON expr .)
    GT              reduce using rule 49 (expr -> expr COLON expr .)
    LE              reduce using rule 49 (expr -> expr COLON expr .)
    LT              reduce using rule 49 (expr -> expr COLON expr .)
    AND             reduce using rule 49 (expr -> expr COLON expr .)
    OR              reduce using rule 49 (expr -> expr COLON expr .)
    ANDAND          reduce using rule 49 (expr -> expr COLON expr .)
    OROR            reduce using rule 49 (expr -> expr COLON expr .)
    COLON           reduce using rule 49 (expr -> expr COLON expr .)
    LPAREN          reduce using rule 49 (expr -> expr COLON expr .)
    COMMA           reduce using rule 49 (expr -> expr COLON expr .)
    NOT             reduce using rule 49 (expr -> expr COLON expr .)
    STRING          reduce using rule 49 (expr -> expr COLON expr .)
    NUMBER          reduce using rule 49 (expr -> expr COLON expr .)
    LSQR            reduce using rule 49 (expr -> expr COLON expr .)
    NAME            reduce using rule 49 (expr -> expr COLON expr .)
    RSQR            reduce using rule 49 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 49 (expr -> expr COLON expr .)
    FUNCTION        reduce using rule 49 (expr -> expr COLON expr .)
    FOR             reduce using rule 49 (expr -> expr COLON expr .)
    IF              reduce using rule 49 (expr -> expr COLON expr .)
    COMMAND         reduce using rule 49 (expr -> expr COLON expr .)
    $end            reduce using rule 49 (expr -> expr COLON expr .)
    END             reduce using rule 49 (expr -> expr COLON expr .)
    ELSE            reduce using rule 49 (expr -> expr COLON expr .)
    ELSEIF          reduce using rule 49 (expr -> expr COLON expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53


state 109

    (52) function_call -> expr LPAREN RPAREN .
    ASSIGN          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    NEWLINE         reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    SEMICOLON       reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    CTRANSPOSE      reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    TRANSPOSE       reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    DOT             reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    MPOWER          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    POWER           reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    LDIVIDE         reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    RDIVIDE         reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    TIMES           reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    MLDIVIDE        reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    MRDIVIDE        reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    MTIMES          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    MINUS           reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    PLUS            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    NE              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    EQ              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    GE              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    GT              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    LE              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    LT              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    AND             reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    OR              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    ANDAND          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    OROR            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    COLON           reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    LPAREN          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    COMMA           reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    NOT             reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    STRING          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    NUMBER          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    LSQR            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    NAME            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    RSQR            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    RPAREN          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    FUNCTION        reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    FOR             reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    IF              reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    COMMAND         reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    $end            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    END             reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    ELSE            reduce using rule 52 (function_call -> expr LPAREN RPAREN .)
    ELSEIF          reduce using rule 52 (function_call -> expr LPAREN RPAREN .)


state 110

    (64) if_block -> IF expr NEWLINE . statements ELSE statements END
    (65) if_block -> IF expr NEWLINE . statements elseif_block
    (66) if_block -> IF expr NEWLINE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statements                     shift and go to state 122
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 111

    (16) assign -> ref_expr ASSIGN expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    SEMICOLON       reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    FUNCTION        reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    FOR             reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    IF              reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    COMMAND         reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    LPAREN          reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    NOT             reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    STRING          reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    NUMBER          reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    NAME            reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    LSQR            reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    $end            reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    END             reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    ELSE            reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    ELSEIF          reduce using rule 16 (assign -> ref_expr ASSIGN expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64


state 112

    (5) statement -> FUNCTION LSQR return_vars RSQR . ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    ASSIGN          shift and go to state 123


state 113

    (70) return_vars -> NAME COMMA . return_vars
    (69) return_vars -> . NAME
    (70) return_vars -> . NAME COMMA return_vars
    NAME            shift and go to state 74

    return_vars                    shift and go to state 124

state 114

    (62) matrix_literal -> LSQR matrix_row_inner array_vals RSQR .
    NEWLINE         reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    SEMICOLON       reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    CTRANSPOSE      reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    TRANSPOSE       reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    DOT             reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MPOWER          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    POWER           reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LDIVIDE         reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RDIVIDE         reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    TIMES           reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MLDIVIDE        reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MRDIVIDE        reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MTIMES          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MINUS           reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    PLUS            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NE              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    EQ              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    GE              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    GT              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LE              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LT              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    AND             reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    OR              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ANDAND          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    OROR            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COLON           reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LPAREN          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COMMA           reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NOT             reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    STRING          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NUMBER          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LSQR            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NAME            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RSQR            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RPAREN          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    FUNCTION        reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    FOR             reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    IF              reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COMMAND         reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    $end            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    END             reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ELSE            reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ELSEIF          reduce using rule 62 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)


state 115

    (60) matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .
    LPAREN          reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NOT             reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    MINUS           reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    PLUS            reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    STRING          reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NUMBER          reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    LSQR            reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NAME            reduce using rule 60 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)


state 116

    (58) array_vals -> expr COMMA array_vals .
    RSQR            reduce using rule 58 (array_vals -> expr COMMA array_vals .)
    SEMICOLON       reduce using rule 58 (array_vals -> expr COMMA array_vals .)


state 117

    (31) expr -> expr MINUS expr .
    (44) expr -> MINUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
  ! reduce/reduce conflict for COMMA resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for CTRANSPOSE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for DOT resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MPOWER resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for POWER resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LDIVIDE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for RDIVIDE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MLDIVIDE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MRDIVIDE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MTIMES resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for EQ resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for GE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for GT resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LE resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LT resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for AND resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for OR resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for ANDAND resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for OROR resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for COLON resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NOT resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for STRING resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LSQR resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NAME resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for RSQR resolved using rule 44 (expr -> MINUS expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (expr -> MINUS expr .)
    COMMA           reduce using rule 44 (expr -> MINUS expr .)
    MINUS           reduce using rule 44 (expr -> MINUS expr .)
    PLUS            reduce using rule 44 (expr -> MINUS expr .)
    NE              reduce using rule 44 (expr -> MINUS expr .)
    EQ              reduce using rule 44 (expr -> MINUS expr .)
    GE              reduce using rule 44 (expr -> MINUS expr .)
    GT              reduce using rule 44 (expr -> MINUS expr .)
    LE              reduce using rule 44 (expr -> MINUS expr .)
    LT              reduce using rule 44 (expr -> MINUS expr .)
    AND             reduce using rule 44 (expr -> MINUS expr .)
    OR              reduce using rule 44 (expr -> MINUS expr .)
    ANDAND          reduce using rule 44 (expr -> MINUS expr .)
    OROR            reduce using rule 44 (expr -> MINUS expr .)
    COLON           reduce using rule 44 (expr -> MINUS expr .)
    LPAREN          reduce using rule 44 (expr -> MINUS expr .)
    NOT             reduce using rule 44 (expr -> MINUS expr .)
    STRING          reduce using rule 44 (expr -> MINUS expr .)
    NUMBER          reduce using rule 44 (expr -> MINUS expr .)
    LSQR            reduce using rule 44 (expr -> MINUS expr .)
    NAME            reduce using rule 44 (expr -> MINUS expr .)
    RSQR            reduce using rule 44 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 44 (expr -> MINUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 118

    (32) expr -> expr PLUS expr .
    (45) expr -> PLUS expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
  ! reduce/reduce conflict for COMMA resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for CTRANSPOSE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for DOT resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MPOWER resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for POWER resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LDIVIDE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for RDIVIDE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MLDIVIDE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MRDIVIDE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MTIMES resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for EQ resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for GE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for GT resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LE resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LT resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for AND resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for OR resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for ANDAND resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for OROR resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for COLON resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NOT resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for STRING resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NUMBER resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LSQR resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NAME resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for RSQR resolved using rule 45 (expr -> PLUS expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 45 (expr -> PLUS expr .)
    COMMA           reduce using rule 45 (expr -> PLUS expr .)
    MINUS           reduce using rule 45 (expr -> PLUS expr .)
    PLUS            reduce using rule 45 (expr -> PLUS expr .)
    NE              reduce using rule 45 (expr -> PLUS expr .)
    EQ              reduce using rule 45 (expr -> PLUS expr .)
    GE              reduce using rule 45 (expr -> PLUS expr .)
    GT              reduce using rule 45 (expr -> PLUS expr .)
    LE              reduce using rule 45 (expr -> PLUS expr .)
    LT              reduce using rule 45 (expr -> PLUS expr .)
    AND             reduce using rule 45 (expr -> PLUS expr .)
    OR              reduce using rule 45 (expr -> PLUS expr .)
    ANDAND          reduce using rule 45 (expr -> PLUS expr .)
    OROR            reduce using rule 45 (expr -> PLUS expr .)
    COLON           reduce using rule 45 (expr -> PLUS expr .)
    LPAREN          reduce using rule 45 (expr -> PLUS expr .)
    NOT             reduce using rule 45 (expr -> PLUS expr .)
    STRING          reduce using rule 45 (expr -> PLUS expr .)
    NUMBER          reduce using rule 45 (expr -> PLUS expr .)
    LSQR            reduce using rule 45 (expr -> PLUS expr .)
    NAME            reduce using rule 45 (expr -> PLUS expr .)
    RSQR            reduce using rule 45 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 45 (expr -> PLUS expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51


state 119

    (53) function_call -> NAME LPAREN args RPAREN .
    ASSIGN          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    NEWLINE         reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    CTRANSPOSE      reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    TRANSPOSE       reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    DOT             reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    MPOWER          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    POWER           reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    LDIVIDE         reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    RDIVIDE         reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    TIMES           reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    MLDIVIDE        reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    MRDIVIDE        reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    MTIMES          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    MINUS           reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    PLUS            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    NE              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    EQ              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    GE              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    GT              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    LE              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    LT              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    AND             reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    OR              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    ANDAND          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    OROR            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    COLON           reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    LPAREN          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    COMMA           reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    NOT             reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    STRING          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    NUMBER          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    LSQR            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    NAME            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    RSQR            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    RPAREN          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    FUNCTION        reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    FOR             reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    IF              reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    COMMAND         reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    $end            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    END             reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    ELSE            reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)
    ELSEIF          reduce using rule 53 (function_call -> NAME LPAREN args RPAREN .)


state 120

    (55) args -> args COMMA . expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 125
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 121

    (9) statement -> FOR assign statements END .
    NEWLINE         reduce using rule 9 (statement -> FOR assign statements END .)
    SEMICOLON       reduce using rule 9 (statement -> FOR assign statements END .)
    FUNCTION        reduce using rule 9 (statement -> FOR assign statements END .)
    FOR             reduce using rule 9 (statement -> FOR assign statements END .)
    IF              reduce using rule 9 (statement -> FOR assign statements END .)
    COMMAND         reduce using rule 9 (statement -> FOR assign statements END .)
    LPAREN          reduce using rule 9 (statement -> FOR assign statements END .)
    NOT             reduce using rule 9 (statement -> FOR assign statements END .)
    MINUS           reduce using rule 9 (statement -> FOR assign statements END .)
    PLUS            reduce using rule 9 (statement -> FOR assign statements END .)
    STRING          reduce using rule 9 (statement -> FOR assign statements END .)
    NUMBER          reduce using rule 9 (statement -> FOR assign statements END .)
    NAME            reduce using rule 9 (statement -> FOR assign statements END .)
    LSQR            reduce using rule 9 (statement -> FOR assign statements END .)
    $end            reduce using rule 9 (statement -> FOR assign statements END .)
    END             reduce using rule 9 (statement -> FOR assign statements END .)
    ELSE            reduce using rule 9 (statement -> FOR assign statements END .)
    ELSEIF          reduce using rule 9 (statement -> FOR assign statements END .)


state 122

    (64) if_block -> IF expr NEWLINE statements . ELSE statements END
    (65) if_block -> IF expr NEWLINE statements . elseif_block
    (66) if_block -> IF expr NEWLINE statements . END
    (3) statements -> statements . statement
    (67) elseif_block -> . ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
    (68) elseif_block -> . ELSEIF expr NEWLINE statements elseif_block
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    ELSE            shift and go to state 126
    END             shift and go to state 127
    ELSEIF          shift and go to state 129
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    elseif_block                   shift and go to state 128
    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 123

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN . NAME LPAREN args RPAREN statements END NEWLINE
    NAME            shift and go to state 130


state 124

    (70) return_vars -> NAME COMMA return_vars .
    RSQR            reduce using rule 70 (return_vars -> NAME COMMA return_vars .)


state 125

    (55) args -> args COMMA expr .
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    RPAREN          reduce using rule 55 (args -> args COMMA expr .)
    COMMA           reduce using rule 55 (args -> args COMMA expr .)
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 126

    (64) if_block -> IF expr NEWLINE statements ELSE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statements                     shift and go to state 131
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 127

    (66) if_block -> IF expr NEWLINE statements END .
    NEWLINE         reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    SEMICOLON       reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    FUNCTION        reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    FOR             reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    IF              reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    COMMAND         reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    LPAREN          reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    NOT             reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    MINUS           reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    PLUS            reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    STRING          reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    NUMBER          reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    NAME            reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    LSQR            reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    $end            reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    END             reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    ELSE            reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)
    ELSEIF          reduce using rule 66 (if_block -> IF expr NEWLINE statements END .)


state 128

    (65) if_block -> IF expr NEWLINE statements elseif_block .
    NEWLINE         reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    SEMICOLON       reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    FUNCTION        reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    FOR             reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    IF              reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    COMMAND         reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    LPAREN          reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    NOT             reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    MINUS           reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    PLUS            reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    STRING          reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    NUMBER          reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    NAME            reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    LSQR            reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    $end            reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    END             reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    ELSE            reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)
    ELSEIF          reduce using rule 65 (if_block -> IF expr NEWLINE statements elseif_block .)


state 129

    (67) elseif_block -> ELSEIF . expr NEWLINE statements ELSE NEWLINE statements END
    (68) elseif_block -> ELSEIF . expr NEWLINE statements elseif_block
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    expr                           shift and go to state 132
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 130

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME . LPAREN args RPAREN statements END NEWLINE
    LPAREN          shift and go to state 133


state 131

    (64) if_block -> IF expr NEWLINE statements ELSE statements . END
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 134
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 132

    (67) elseif_block -> ELSEIF expr . NEWLINE statements ELSE NEWLINE statements END
    (68) elseif_block -> ELSEIF expr . NEWLINE statements elseif_block
    (17) expr -> expr . CTRANSPOSE
    (18) expr -> expr . TRANSPOSE
    (21) expr -> expr . DOT NAME
    (23) expr -> expr . MPOWER expr
    (24) expr -> expr . POWER expr
    (25) expr -> expr . LDIVIDE expr
    (26) expr -> expr . RDIVIDE expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . MLDIVIDE expr
    (29) expr -> expr . MRDIVIDE expr
    (30) expr -> expr . MTIMES expr
    (31) expr -> expr . MINUS expr
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . NE expr
    (34) expr -> expr . EQ expr
    (35) expr -> expr . GE expr
    (36) expr -> expr . GT expr
    (37) expr -> expr . LE expr
    (38) expr -> expr . LT expr
    (39) expr -> expr . AND expr
    (40) expr -> expr . OR expr
    (41) expr -> expr . ANDAND expr
    (42) expr -> expr . OROR expr
    (49) expr -> expr . COLON expr
    (52) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 135
    CTRANSPOSE      shift and go to state 41
    TRANSPOSE       shift and go to state 42
    DOT             shift and go to state 43
    MPOWER          shift and go to state 44
    POWER           shift and go to state 45
    LDIVIDE         shift and go to state 46
    RDIVIDE         shift and go to state 47
    TIMES           shift and go to state 48
    MLDIVIDE        shift and go to state 49
    MRDIVIDE        shift and go to state 50
    MTIMES          shift and go to state 51
    MINUS           shift and go to state 52
    PLUS            shift and go to state 53
    NE              shift and go to state 54
    EQ              shift and go to state 55
    GE              shift and go to state 56
    GT              shift and go to state 57
    LE              shift and go to state 58
    LT              shift and go to state 59
    AND             shift and go to state 60
    OR              shift and go to state 61
    ANDAND          shift and go to state 62
    OROR            shift and go to state 63
    COLON           shift and go to state 64
    LPAREN          shift and go to state 65


state 133

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN . args RPAREN statements END NEWLINE
    (54) args -> . expr
    (55) args -> . args COMMA expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    LSQR            shift and go to state 5
    NAME            shift and go to state 6

    args                           shift and go to state 136
    expr                           shift and go to state 84
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    ref_expr                       shift and go to state 34
    function_call                  shift and go to state 25

state 134

    (64) if_block -> IF expr NEWLINE statements ELSE statements END .
    NEWLINE         reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    SEMICOLON       reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    FUNCTION        reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    FOR             reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    IF              reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    COMMAND         reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    LPAREN          reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NOT             reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    MINUS           reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    PLUS            reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    STRING          reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NUMBER          reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NAME            reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    LSQR            reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    $end            reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    END             reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    ELSE            reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    ELSEIF          reduce using rule 64 (if_block -> IF expr NEWLINE statements ELSE statements END .)


state 135

    (67) elseif_block -> ELSEIF expr NEWLINE . statements ELSE NEWLINE statements END
    (68) elseif_block -> ELSEIF expr NEWLINE . statements elseif_block
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statements                     shift and go to state 137
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 136

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args . RPAREN statements END NEWLINE
    (55) args -> args . COMMA expr
    RPAREN          shift and go to state 138
    COMMA           shift and go to state 120


state 137

    (67) elseif_block -> ELSEIF expr NEWLINE statements . ELSE NEWLINE statements END
    (68) elseif_block -> ELSEIF expr NEWLINE statements . elseif_block
    (3) statements -> statements . statement
    (67) elseif_block -> . ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
    (68) elseif_block -> . ELSEIF expr NEWLINE statements elseif_block
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    ELSE            shift and go to state 139
    ELSEIF          shift and go to state 129
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    elseif_block                   shift and go to state 140
    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 138

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN . statements END NEWLINE
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    statements                     shift and go to state 141
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 139

    (67) elseif_block -> ELSEIF expr NEWLINE statements ELSE . NEWLINE statements END
    NEWLINE         shift and go to state 142


state 140

    (68) elseif_block -> ELSEIF expr NEWLINE statements elseif_block .
    NEWLINE         reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    SEMICOLON       reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    FUNCTION        reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    FOR             reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    IF              reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    COMMAND         reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    LPAREN          reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NOT             reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    MINUS           reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    PLUS            reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    STRING          reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NUMBER          reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NAME            reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    LSQR            reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    $end            reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    END             reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    ELSE            reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    ELSEIF          reduce using rule 68 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)


state 141

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements . END NEWLINE
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 143
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    expr                           shift and go to state 13
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 142

    (67) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statements                     shift and go to state 144
    statement                      shift and go to state 3
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 143

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END . NEWLINE
    NEWLINE         shift and go to state 145


state 144

    (67) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements . END
    (3) statements -> statements . statement
    (5) statement -> . FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE
    (6) statement -> . if_block
    (7) statement -> . command
    (8) statement -> . assign
    (9) statement -> . FOR assign statements END
    (10) statement -> . expr NEWLINE
    (11) statement -> . expr SEMICOLON
    (12) statement -> . NEWLINE
    (13) statement -> . SEMICOLON
    (14) statement -> . statement NEWLINE
    (15) statement -> . statement SEMICOLON
    (64) if_block -> . IF expr NEWLINE statements ELSE statements END
    (65) if_block -> . IF expr NEWLINE statements elseif_block
    (66) if_block -> . IF expr NEWLINE statements END
    (63) command -> . COMMAND
    (16) assign -> . ref_expr ASSIGN expr
    (17) expr -> . expr CTRANSPOSE
    (18) expr -> . expr TRANSPOSE
    (19) expr -> . array_literal
    (20) expr -> . matrix_literal
    (21) expr -> . expr DOT NAME
    (22) expr -> . LPAREN expr RPAREN
    (23) expr -> . expr MPOWER expr
    (24) expr -> . expr POWER expr
    (25) expr -> . expr LDIVIDE expr
    (26) expr -> . expr RDIVIDE expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr MLDIVIDE expr
    (29) expr -> . expr MRDIVIDE expr
    (30) expr -> . expr MTIMES expr
    (31) expr -> . expr MINUS expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr NE expr
    (34) expr -> . expr EQ expr
    (35) expr -> . expr GE expr
    (36) expr -> . expr GT expr
    (37) expr -> . expr LE expr
    (38) expr -> . expr LT expr
    (39) expr -> . expr AND expr
    (40) expr -> . expr OR expr
    (41) expr -> . expr ANDAND expr
    (42) expr -> . expr OROR expr
    (43) expr -> . NOT expr
    (44) expr -> . MINUS expr
    (45) expr -> . PLUS expr
    (46) expr -> . STRING
    (47) expr -> . NUMBER
    (48) expr -> . ref_expr
    (49) expr -> . expr COLON expr
    (50) ref_expr -> . function_call
    (51) ref_expr -> . NAME
    (59) array_literal -> . LSQR array_vals RSQR
    (62) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (52) function_call -> . expr LPAREN RPAREN
    (53) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 146
    FUNCTION        shift and go to state 4
    FOR             shift and go to state 12
    NEWLINE         shift and go to state 8
    SEMICOLON       shift and go to state 14
    IF              shift and go to state 15
    COMMAND         shift and go to state 16
    LPAREN          shift and go to state 7
    NOT             shift and go to state 22
    MINUS           shift and go to state 20
    PLUS            shift and go to state 21
    STRING          shift and go to state 23
    NUMBER          shift and go to state 24
    NAME            shift and go to state 6
    LSQR            shift and go to state 5

    expr                           shift and go to state 13
    statement                      shift and go to state 26
    if_block                       shift and go to state 9
    command                        shift and go to state 10
    assign                         shift and go to state 11
    ref_expr                       shift and go to state 17
    array_literal                  shift and go to state 18
    matrix_literal                 shift and go to state 19
    function_call                  shift and go to state 25

state 145

    (5) statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .
    NEWLINE         reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    SEMICOLON       reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    FUNCTION        reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    FOR             reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    IF              reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    COMMAND         reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    LPAREN          reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    NOT             reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    MINUS           reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    PLUS            reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    STRING          reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    NUMBER          reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    NAME            reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    LSQR            reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    $end            reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    END             reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    ELSE            reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)
    ELSEIF          reduce using rule 5 (statement -> FUNCTION LSQR return_vars RSQR ASSIGN NAME LPAREN args RPAREN statements END NEWLINE .)


state 146

    (67) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .
    NEWLINE         reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    SEMICOLON       reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    FUNCTION        reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    FOR             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    IF              reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    COMMAND         reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    LPAREN          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NOT             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    MINUS           reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    PLUS            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    STRING          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NUMBER          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NAME            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    LSQR            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    $end            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    END             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    ELSE            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    ELSEIF          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)


Conflicts:

shift/reduce conflict for NEWLINE in state 3 resolved as shift
shift/reduce conflict for SEMICOLON in state 3 resolved as shift
shift/reduce conflict for FUNCTION in state 3 resolved as shift
shift/reduce conflict for FOR in state 3 resolved as shift
shift/reduce conflict for IF in state 3 resolved as shift
shift/reduce conflict for COMMAND in state 3 resolved as shift
shift/reduce conflict for LPAREN in state 3 resolved as shift
shift/reduce conflict for NOT in state 3 resolved as shift
shift/reduce conflict for MINUS in state 3 resolved as shift
shift/reduce conflict for PLUS in state 3 resolved as shift
shift/reduce conflict for STRING in state 3 resolved as shift
shift/reduce conflict for NUMBER in state 3 resolved as shift
shift/reduce conflict for NAME in state 3 resolved as shift
shift/reduce conflict for LSQR in state 3 resolved as shift
shift/reduce conflict for LPAREN in state 6 resolved as shift
shift/reduce conflict for NEWLINE in state 26 resolved as shift
shift/reduce conflict for SEMICOLON in state 26 resolved as shift
shift/reduce conflict for FUNCTION in state 27 resolved as shift
shift/reduce conflict for FOR in state 27 resolved as shift
shift/reduce conflict for NEWLINE in state 27 resolved as shift
shift/reduce conflict for SEMICOLON in state 27 resolved as shift
shift/reduce conflict for IF in state 27 resolved as shift
shift/reduce conflict for COMMAND in state 27 resolved as shift
shift/reduce conflict for LPAREN in state 27 resolved as shift
shift/reduce conflict for NOT in state 27 resolved as shift
shift/reduce conflict for MINUS in state 27 resolved as shift
shift/reduce conflict for PLUS in state 27 resolved as shift
shift/reduce conflict for STRING in state 27 resolved as shift
shift/reduce conflict for NUMBER in state 27 resolved as shift
shift/reduce conflict for NAME in state 27 resolved as shift
shift/reduce conflict for LSQR in state 27 resolved as shift
reduce/reduce conflict in state 28 resolved using rule statement -> statement NEWLINE
rejected rule (statement -> NEWLINE) in state 28
reduce/reduce conflict in state 29 resolved using rule statement -> statement SEMICOLON
rejected rule (statement -> SEMICOLON) in state 29
reduce/reduce conflict in state 117 resolved using rule expr -> MINUS expr  [precedence=left, level=9]
rejected rule (expr -> expr MINUS expr  [precedence=left, level=9]) in state 117
reduce/reduce conflict in state 118 resolved using rule expr -> PLUS expr  [precedence=left, level=9]
rejected rule (expr -> expr PLUS expr  [precedence=left, level=9]) in state 118