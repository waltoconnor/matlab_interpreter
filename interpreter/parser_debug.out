Grammar:

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement
Rule 3     statements -> statements statement
Rule 4     statements -> statement statements
Rule 5     statement -> if_block
Rule 6     statement -> command
Rule 7     statement -> assign
Rule 8     statement -> FOR assign statements END
Rule 9     statement -> expr NEWLINE
Rule 10    statement -> expr SEMICOLON
Rule 11    statement -> NEWLINE
Rule 12    statement -> SEMICOLON
Rule 13    statement -> statement NEWLINE
Rule 14    statement -> statement SEMICOLON
Rule 15    assign -> ref_expr ASSIGN expr  [precedence=left, level=1]
Rule 16    expr -> expr CTRANSPOSE  [precedence=left, level=12]
Rule 17    expr -> expr TRANSPOSE  [precedence=left, level=12]
Rule 18    expr -> array_literal
Rule 19    expr -> matrix_literal
Rule 20    expr -> expr DOT NAME
Rule 21    expr -> LPAREN expr RPAREN
Rule 22    expr -> expr MPOWER expr  [precedence=left, level=12]
Rule 23    expr -> expr POWER expr  [precedence=left, level=12]
Rule 24    expr -> expr LDIVIDE expr  [precedence=left, level=10]
Rule 25    expr -> expr RDIVIDE expr  [precedence=left, level=10]
Rule 26    expr -> expr TIMES expr  [precedence=left, level=10]
Rule 27    expr -> expr MLDIVIDE expr  [precedence=left, level=10]
Rule 28    expr -> expr MRDIVIDE expr  [precedence=left, level=10]
Rule 29    expr -> expr MTIMES expr  [precedence=left, level=10]
Rule 30    expr -> expr MINUS expr  [precedence=left, level=9]
Rule 31    expr -> expr PLUS expr  [precedence=left, level=9]
Rule 32    expr -> expr NE expr  [precedence=left, level=7]
Rule 33    expr -> expr EQ expr  [precedence=left, level=7]
Rule 34    expr -> expr GE expr  [precedence=left, level=7]
Rule 35    expr -> expr GT expr  [precedence=left, level=7]
Rule 36    expr -> expr LE expr  [precedence=left, level=7]
Rule 37    expr -> expr LT expr  [precedence=left, level=7]
Rule 38    expr -> expr AND expr  [precedence=left, level=6]
Rule 39    expr -> expr OR expr  [precedence=left, level=5]
Rule 40    expr -> expr ANDAND expr  [precedence=left, level=4]
Rule 41    expr -> expr OROR expr  [precedence=left, level=3]
Rule 42    expr -> NOT expr  [precedence=left, level=11]
Rule 43    expr -> MINUS expr  [precedence=left, level=9]
Rule 44    expr -> PLUS expr  [precedence=left, level=9]
Rule 45    expr -> STRING
Rule 46    expr -> NUMBER
Rule 47    expr -> ref_expr
Rule 48    expr -> expr COLON expr  [precedence=left, level=8]
Rule 49    ref_expr -> function_call
Rule 50    ref_expr -> NAME
Rule 51    function_call -> expr LPAREN RPAREN
Rule 52    function_call -> NAME LPAREN args RPAREN
Rule 53    args -> expr
Rule 54    args -> args COMMA expr  [precedence=left, level=2]
Rule 55    array_vals -> expr
Rule 56    array_vals -> expr array_vals
Rule 57    array_vals -> expr COMMA array_vals  [precedence=left, level=2]
Rule 58    array_literal -> LSQR array_vals RSQR
Rule 59    matrix_row_inner -> matrix_row_inner array_vals SEMICOLON
Rule 60    matrix_row_inner -> array_vals SEMICOLON
Rule 61    matrix_literal -> LSQR matrix_row_inner array_vals RSQR
Rule 62    command -> COMMAND
Rule 63    if_block -> IF expr NEWLINE statements ELSE statements END
Rule 64    if_block -> IF expr NEWLINE statements elseif_block
Rule 65    if_block -> IF expr NEWLINE statements END
Rule 66    elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
Rule 67    elseif_block -> ELSEIF expr NEWLINE statements elseif_block

Unused terminals:

    BREAK
    CASE
    CATCH
    OTHERWISE
    CONTINUE
    FUNCTION
    RETURN
    SWITCH
    TRY
    WHILE
    ignore_COMMENT
    AT
    ELLIPSIS
    LCURL
    RCURL

Terminals, with rules where they appear:

AND                  : 38
ANDAND               : 40
ASSIGN               : 15
AT                   : 
BREAK                : 
CASE                 : 
CATCH                : 
COLON                : 48
COMMA                : 54 57
COMMAND              : 62
CONTINUE             : 
CTRANSPOSE           : 16
DOT                  : 20
ELLIPSIS             : 
ELSE                 : 63 66
ELSEIF               : 66 67
END                  : 8 63 65 66
EQ                   : 33
FOR                  : 8
FUNCTION             : 
GE                   : 34
GT                   : 35
IF                   : 63 64 65
LCURL                : 
LDIVIDE              : 24
LE                   : 36
LPAREN               : 21 51 52
LSQR                 : 58 61
LT                   : 37
MINUS                : 30 43
MLDIVIDE             : 27
MPOWER               : 22
MRDIVIDE             : 28
MTIMES               : 29
NAME                 : 20 50 52
NE                   : 32
NEWLINE              : 9 11 13 63 64 65 66 66 67
NOT                  : 42
NUMBER               : 46
OR                   : 39
OROR                 : 41
OTHERWISE            : 
PLUS                 : 31 44
POWER                : 23
RCURL                : 
RDIVIDE              : 25
RETURN               : 
RPAREN               : 21 51 52
RSQR                 : 58 61
SEMICOLON            : 10 12 14 59 60
STRING               : 45
SWITCH               : 
TIMES                : 26
TRANSPOSE            : 17
TRY                  : 
WHILE                : 
error                : 
ignore_COMMENT       : 

Nonterminals, with rules where they appear:

args                 : 52 54
array_literal        : 18
array_vals           : 56 57 58 59 60 61
assign               : 7 8
command              : 6
elseif_block         : 64 67
expr                 : 9 10 15 16 17 20 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 43 44 48 48 51 53 54 55 56 57 63 64 65 66 67
function_call        : 49
if_block             : 5
matrix_literal       : 19
matrix_row_inner     : 59 61
program              : 0
ref_expr             : 15 47
statement            : 2 3 4 13 14
statements           : 1 3 4 8 63 63 64 65 66 66 67


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 1

    (0) S' -> program .


state 2

    (1) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    $end            reduce using rule 1 (program -> statements .)
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 3

    (2) statements -> statement .
    (4) statements -> statement . statements
    (13) statement -> statement . NEWLINE
    (14) statement -> statement . SEMICOLON
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
    $end            reduce using rule 2 (statements -> statement .)
    END             reduce using rule 2 (statements -> statement .)
    ELSE            reduce using rule 2 (statements -> statement .)
    ELSEIF          reduce using rule 2 (statements -> statement .)
    NEWLINE         shift and go to state 27
    SEMICOLON       shift and go to state 28
    FOR             shift and go to state 7
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    statement                      shift and go to state 3
    statements                     shift and go to state 26
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 4

    (5) statement -> if_block .
    NEWLINE         reduce using rule 5 (statement -> if_block .)
    SEMICOLON       reduce using rule 5 (statement -> if_block .)
    FOR             reduce using rule 5 (statement -> if_block .)
    IF              reduce using rule 5 (statement -> if_block .)
    COMMAND         reduce using rule 5 (statement -> if_block .)
    LPAREN          reduce using rule 5 (statement -> if_block .)
    NOT             reduce using rule 5 (statement -> if_block .)
    MINUS           reduce using rule 5 (statement -> if_block .)
    PLUS            reduce using rule 5 (statement -> if_block .)
    STRING          reduce using rule 5 (statement -> if_block .)
    NUMBER          reduce using rule 5 (statement -> if_block .)
    NAME            reduce using rule 5 (statement -> if_block .)
    LSQR            reduce using rule 5 (statement -> if_block .)
    $end            reduce using rule 5 (statement -> if_block .)
    END             reduce using rule 5 (statement -> if_block .)
    ELSE            reduce using rule 5 (statement -> if_block .)
    ELSEIF          reduce using rule 5 (statement -> if_block .)


state 5

    (6) statement -> command .
    NEWLINE         reduce using rule 6 (statement -> command .)
    SEMICOLON       reduce using rule 6 (statement -> command .)
    FOR             reduce using rule 6 (statement -> command .)
    IF              reduce using rule 6 (statement -> command .)
    COMMAND         reduce using rule 6 (statement -> command .)
    LPAREN          reduce using rule 6 (statement -> command .)
    NOT             reduce using rule 6 (statement -> command .)
    MINUS           reduce using rule 6 (statement -> command .)
    PLUS            reduce using rule 6 (statement -> command .)
    STRING          reduce using rule 6 (statement -> command .)
    NUMBER          reduce using rule 6 (statement -> command .)
    NAME            reduce using rule 6 (statement -> command .)
    LSQR            reduce using rule 6 (statement -> command .)
    $end            reduce using rule 6 (statement -> command .)
    END             reduce using rule 6 (statement -> command .)
    ELSE            reduce using rule 6 (statement -> command .)
    ELSEIF          reduce using rule 6 (statement -> command .)


state 6

    (7) statement -> assign .
    NEWLINE         reduce using rule 7 (statement -> assign .)
    SEMICOLON       reduce using rule 7 (statement -> assign .)
    FOR             reduce using rule 7 (statement -> assign .)
    IF              reduce using rule 7 (statement -> assign .)
    COMMAND         reduce using rule 7 (statement -> assign .)
    LPAREN          reduce using rule 7 (statement -> assign .)
    NOT             reduce using rule 7 (statement -> assign .)
    MINUS           reduce using rule 7 (statement -> assign .)
    PLUS            reduce using rule 7 (statement -> assign .)
    STRING          reduce using rule 7 (statement -> assign .)
    NUMBER          reduce using rule 7 (statement -> assign .)
    NAME            reduce using rule 7 (statement -> assign .)
    LSQR            reduce using rule 7 (statement -> assign .)
    $end            reduce using rule 7 (statement -> assign .)
    END             reduce using rule 7 (statement -> assign .)
    ELSE            reduce using rule 7 (statement -> assign .)
    ELSEIF          reduce using rule 7 (statement -> assign .)


state 7

    (8) statement -> FOR . assign statements END
    (15) assign -> . ref_expr ASSIGN expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    NAME            shift and go to state 16
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24

    assign                         shift and go to state 29
    ref_expr                       shift and go to state 13
    expr                           shift and go to state 30
    function_call                  shift and go to state 23
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15

state 8

    (9) statement -> expr . NEWLINE
    (10) statement -> expr . SEMICOLON
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 31
    SEMICOLON       shift and go to state 32
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 9

    (11) statement -> NEWLINE .
    NEWLINE         reduce using rule 11 (statement -> NEWLINE .)
    SEMICOLON       reduce using rule 11 (statement -> NEWLINE .)
    FOR             reduce using rule 11 (statement -> NEWLINE .)
    IF              reduce using rule 11 (statement -> NEWLINE .)
    COMMAND         reduce using rule 11 (statement -> NEWLINE .)
    LPAREN          reduce using rule 11 (statement -> NEWLINE .)
    NOT             reduce using rule 11 (statement -> NEWLINE .)
    MINUS           reduce using rule 11 (statement -> NEWLINE .)
    PLUS            reduce using rule 11 (statement -> NEWLINE .)
    STRING          reduce using rule 11 (statement -> NEWLINE .)
    NUMBER          reduce using rule 11 (statement -> NEWLINE .)
    NAME            reduce using rule 11 (statement -> NEWLINE .)
    LSQR            reduce using rule 11 (statement -> NEWLINE .)
    $end            reduce using rule 11 (statement -> NEWLINE .)
    END             reduce using rule 11 (statement -> NEWLINE .)
    ELSE            reduce using rule 11 (statement -> NEWLINE .)
    ELSEIF          reduce using rule 11 (statement -> NEWLINE .)


state 10

    (12) statement -> SEMICOLON .
    NEWLINE         reduce using rule 12 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 12 (statement -> SEMICOLON .)
    FOR             reduce using rule 12 (statement -> SEMICOLON .)
    IF              reduce using rule 12 (statement -> SEMICOLON .)
    COMMAND         reduce using rule 12 (statement -> SEMICOLON .)
    LPAREN          reduce using rule 12 (statement -> SEMICOLON .)
    NOT             reduce using rule 12 (statement -> SEMICOLON .)
    MINUS           reduce using rule 12 (statement -> SEMICOLON .)
    PLUS            reduce using rule 12 (statement -> SEMICOLON .)
    STRING          reduce using rule 12 (statement -> SEMICOLON .)
    NUMBER          reduce using rule 12 (statement -> SEMICOLON .)
    NAME            reduce using rule 12 (statement -> SEMICOLON .)
    LSQR            reduce using rule 12 (statement -> SEMICOLON .)
    $end            reduce using rule 12 (statement -> SEMICOLON .)
    END             reduce using rule 12 (statement -> SEMICOLON .)
    ELSE            reduce using rule 12 (statement -> SEMICOLON .)
    ELSEIF          reduce using rule 12 (statement -> SEMICOLON .)


state 11

    (63) if_block -> IF . expr NEWLINE statements ELSE statements END
    (64) if_block -> IF . expr NEWLINE statements elseif_block
    (65) if_block -> IF . expr NEWLINE statements END
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 58
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 12

    (62) command -> COMMAND .
    NEWLINE         reduce using rule 62 (command -> COMMAND .)
    SEMICOLON       reduce using rule 62 (command -> COMMAND .)
    FOR             reduce using rule 62 (command -> COMMAND .)
    IF              reduce using rule 62 (command -> COMMAND .)
    COMMAND         reduce using rule 62 (command -> COMMAND .)
    LPAREN          reduce using rule 62 (command -> COMMAND .)
    NOT             reduce using rule 62 (command -> COMMAND .)
    MINUS           reduce using rule 62 (command -> COMMAND .)
    PLUS            reduce using rule 62 (command -> COMMAND .)
    STRING          reduce using rule 62 (command -> COMMAND .)
    NUMBER          reduce using rule 62 (command -> COMMAND .)
    NAME            reduce using rule 62 (command -> COMMAND .)
    LSQR            reduce using rule 62 (command -> COMMAND .)
    $end            reduce using rule 62 (command -> COMMAND .)
    END             reduce using rule 62 (command -> COMMAND .)
    ELSE            reduce using rule 62 (command -> COMMAND .)
    ELSEIF          reduce using rule 62 (command -> COMMAND .)


state 13

    (15) assign -> ref_expr . ASSIGN expr
    (47) expr -> ref_expr .
    ASSIGN          shift and go to state 60
    NEWLINE         reduce using rule 47 (expr -> ref_expr .)
    SEMICOLON       reduce using rule 47 (expr -> ref_expr .)
    CTRANSPOSE      reduce using rule 47 (expr -> ref_expr .)
    TRANSPOSE       reduce using rule 47 (expr -> ref_expr .)
    DOT             reduce using rule 47 (expr -> ref_expr .)
    MPOWER          reduce using rule 47 (expr -> ref_expr .)
    POWER           reduce using rule 47 (expr -> ref_expr .)
    LDIVIDE         reduce using rule 47 (expr -> ref_expr .)
    RDIVIDE         reduce using rule 47 (expr -> ref_expr .)
    TIMES           reduce using rule 47 (expr -> ref_expr .)
    MLDIVIDE        reduce using rule 47 (expr -> ref_expr .)
    MRDIVIDE        reduce using rule 47 (expr -> ref_expr .)
    MTIMES          reduce using rule 47 (expr -> ref_expr .)
    MINUS           reduce using rule 47 (expr -> ref_expr .)
    PLUS            reduce using rule 47 (expr -> ref_expr .)
    NE              reduce using rule 47 (expr -> ref_expr .)
    EQ              reduce using rule 47 (expr -> ref_expr .)
    GE              reduce using rule 47 (expr -> ref_expr .)
    GT              reduce using rule 47 (expr -> ref_expr .)
    LE              reduce using rule 47 (expr -> ref_expr .)
    LT              reduce using rule 47 (expr -> ref_expr .)
    AND             reduce using rule 47 (expr -> ref_expr .)
    OR              reduce using rule 47 (expr -> ref_expr .)
    ANDAND          reduce using rule 47 (expr -> ref_expr .)
    OROR            reduce using rule 47 (expr -> ref_expr .)
    COLON           reduce using rule 47 (expr -> ref_expr .)
    LPAREN          reduce using rule 47 (expr -> ref_expr .)


state 14

    (18) expr -> array_literal .
    NEWLINE         reduce using rule 18 (expr -> array_literal .)
    SEMICOLON       reduce using rule 18 (expr -> array_literal .)
    CTRANSPOSE      reduce using rule 18 (expr -> array_literal .)
    TRANSPOSE       reduce using rule 18 (expr -> array_literal .)
    DOT             reduce using rule 18 (expr -> array_literal .)
    MPOWER          reduce using rule 18 (expr -> array_literal .)
    POWER           reduce using rule 18 (expr -> array_literal .)
    LDIVIDE         reduce using rule 18 (expr -> array_literal .)
    RDIVIDE         reduce using rule 18 (expr -> array_literal .)
    TIMES           reduce using rule 18 (expr -> array_literal .)
    MLDIVIDE        reduce using rule 18 (expr -> array_literal .)
    MRDIVIDE        reduce using rule 18 (expr -> array_literal .)
    MTIMES          reduce using rule 18 (expr -> array_literal .)
    MINUS           reduce using rule 18 (expr -> array_literal .)
    PLUS            reduce using rule 18 (expr -> array_literal .)
    NE              reduce using rule 18 (expr -> array_literal .)
    EQ              reduce using rule 18 (expr -> array_literal .)
    GE              reduce using rule 18 (expr -> array_literal .)
    GT              reduce using rule 18 (expr -> array_literal .)
    LE              reduce using rule 18 (expr -> array_literal .)
    LT              reduce using rule 18 (expr -> array_literal .)
    AND             reduce using rule 18 (expr -> array_literal .)
    OR              reduce using rule 18 (expr -> array_literal .)
    ANDAND          reduce using rule 18 (expr -> array_literal .)
    OROR            reduce using rule 18 (expr -> array_literal .)
    COLON           reduce using rule 18 (expr -> array_literal .)
    LPAREN          reduce using rule 18 (expr -> array_literal .)
    RPAREN          reduce using rule 18 (expr -> array_literal .)
    COMMA           reduce using rule 18 (expr -> array_literal .)
    NOT             reduce using rule 18 (expr -> array_literal .)
    STRING          reduce using rule 18 (expr -> array_literal .)
    NUMBER          reduce using rule 18 (expr -> array_literal .)
    LSQR            reduce using rule 18 (expr -> array_literal .)
    NAME            reduce using rule 18 (expr -> array_literal .)
    RSQR            reduce using rule 18 (expr -> array_literal .)
    FOR             reduce using rule 18 (expr -> array_literal .)
    IF              reduce using rule 18 (expr -> array_literal .)
    COMMAND         reduce using rule 18 (expr -> array_literal .)
    $end            reduce using rule 18 (expr -> array_literal .)
    END             reduce using rule 18 (expr -> array_literal .)
    ELSE            reduce using rule 18 (expr -> array_literal .)
    ELSEIF          reduce using rule 18 (expr -> array_literal .)


state 15

    (19) expr -> matrix_literal .
    NEWLINE         reduce using rule 19 (expr -> matrix_literal .)
    SEMICOLON       reduce using rule 19 (expr -> matrix_literal .)
    CTRANSPOSE      reduce using rule 19 (expr -> matrix_literal .)
    TRANSPOSE       reduce using rule 19 (expr -> matrix_literal .)
    DOT             reduce using rule 19 (expr -> matrix_literal .)
    MPOWER          reduce using rule 19 (expr -> matrix_literal .)
    POWER           reduce using rule 19 (expr -> matrix_literal .)
    LDIVIDE         reduce using rule 19 (expr -> matrix_literal .)
    RDIVIDE         reduce using rule 19 (expr -> matrix_literal .)
    TIMES           reduce using rule 19 (expr -> matrix_literal .)
    MLDIVIDE        reduce using rule 19 (expr -> matrix_literal .)
    MRDIVIDE        reduce using rule 19 (expr -> matrix_literal .)
    MTIMES          reduce using rule 19 (expr -> matrix_literal .)
    MINUS           reduce using rule 19 (expr -> matrix_literal .)
    PLUS            reduce using rule 19 (expr -> matrix_literal .)
    NE              reduce using rule 19 (expr -> matrix_literal .)
    EQ              reduce using rule 19 (expr -> matrix_literal .)
    GE              reduce using rule 19 (expr -> matrix_literal .)
    GT              reduce using rule 19 (expr -> matrix_literal .)
    LE              reduce using rule 19 (expr -> matrix_literal .)
    LT              reduce using rule 19 (expr -> matrix_literal .)
    AND             reduce using rule 19 (expr -> matrix_literal .)
    OR              reduce using rule 19 (expr -> matrix_literal .)
    ANDAND          reduce using rule 19 (expr -> matrix_literal .)
    OROR            reduce using rule 19 (expr -> matrix_literal .)
    COLON           reduce using rule 19 (expr -> matrix_literal .)
    LPAREN          reduce using rule 19 (expr -> matrix_literal .)
    RPAREN          reduce using rule 19 (expr -> matrix_literal .)
    COMMA           reduce using rule 19 (expr -> matrix_literal .)
    NOT             reduce using rule 19 (expr -> matrix_literal .)
    STRING          reduce using rule 19 (expr -> matrix_literal .)
    NUMBER          reduce using rule 19 (expr -> matrix_literal .)
    LSQR            reduce using rule 19 (expr -> matrix_literal .)
    NAME            reduce using rule 19 (expr -> matrix_literal .)
    RSQR            reduce using rule 19 (expr -> matrix_literal .)
    FOR             reduce using rule 19 (expr -> matrix_literal .)
    IF              reduce using rule 19 (expr -> matrix_literal .)
    COMMAND         reduce using rule 19 (expr -> matrix_literal .)
    $end            reduce using rule 19 (expr -> matrix_literal .)
    END             reduce using rule 19 (expr -> matrix_literal .)
    ELSE            reduce using rule 19 (expr -> matrix_literal .)
    ELSEIF          reduce using rule 19 (expr -> matrix_literal .)


state 16

    (50) ref_expr -> NAME .
    (52) function_call -> NAME . LPAREN args RPAREN
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          reduce using rule 50 (ref_expr -> NAME .)
    NEWLINE         reduce using rule 50 (ref_expr -> NAME .)
    SEMICOLON       reduce using rule 50 (ref_expr -> NAME .)
    CTRANSPOSE      reduce using rule 50 (ref_expr -> NAME .)
    TRANSPOSE       reduce using rule 50 (ref_expr -> NAME .)
    DOT             reduce using rule 50 (ref_expr -> NAME .)
    MPOWER          reduce using rule 50 (ref_expr -> NAME .)
    POWER           reduce using rule 50 (ref_expr -> NAME .)
    LDIVIDE         reduce using rule 50 (ref_expr -> NAME .)
    RDIVIDE         reduce using rule 50 (ref_expr -> NAME .)
    TIMES           reduce using rule 50 (ref_expr -> NAME .)
    MLDIVIDE        reduce using rule 50 (ref_expr -> NAME .)
    MRDIVIDE        reduce using rule 50 (ref_expr -> NAME .)
    MTIMES          reduce using rule 50 (ref_expr -> NAME .)
    MINUS           reduce using rule 50 (ref_expr -> NAME .)
    PLUS            reduce using rule 50 (ref_expr -> NAME .)
    NE              reduce using rule 50 (ref_expr -> NAME .)
    EQ              reduce using rule 50 (ref_expr -> NAME .)
    GE              reduce using rule 50 (ref_expr -> NAME .)
    GT              reduce using rule 50 (ref_expr -> NAME .)
    LE              reduce using rule 50 (ref_expr -> NAME .)
    LT              reduce using rule 50 (ref_expr -> NAME .)
    AND             reduce using rule 50 (ref_expr -> NAME .)
    OR              reduce using rule 50 (ref_expr -> NAME .)
    ANDAND          reduce using rule 50 (ref_expr -> NAME .)
    OROR            reduce using rule 50 (ref_expr -> NAME .)
    COLON           reduce using rule 50 (ref_expr -> NAME .)
    RPAREN          reduce using rule 50 (ref_expr -> NAME .)
    COMMA           reduce using rule 50 (ref_expr -> NAME .)
    NOT             reduce using rule 50 (ref_expr -> NAME .)
    STRING          reduce using rule 50 (ref_expr -> NAME .)
    NUMBER          reduce using rule 50 (ref_expr -> NAME .)
    LSQR            reduce using rule 50 (ref_expr -> NAME .)
    NAME            reduce using rule 50 (ref_expr -> NAME .)
    RSQR            reduce using rule 50 (ref_expr -> NAME .)
    FOR             reduce using rule 50 (ref_expr -> NAME .)
    IF              reduce using rule 50 (ref_expr -> NAME .)
    COMMAND         reduce using rule 50 (ref_expr -> NAME .)
    $end            reduce using rule 50 (ref_expr -> NAME .)
    END             reduce using rule 50 (ref_expr -> NAME .)
    ELSE            reduce using rule 50 (ref_expr -> NAME .)
    ELSEIF          reduce using rule 50 (ref_expr -> NAME .)
    LPAREN          shift and go to state 61


state 17

    (21) expr -> LPAREN . expr RPAREN
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 62
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 18

    (43) expr -> MINUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 63
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 19

    (44) expr -> PLUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 64
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 20

    (42) expr -> NOT . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 65
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 21

    (45) expr -> STRING .
    NEWLINE         reduce using rule 45 (expr -> STRING .)
    SEMICOLON       reduce using rule 45 (expr -> STRING .)
    CTRANSPOSE      reduce using rule 45 (expr -> STRING .)
    TRANSPOSE       reduce using rule 45 (expr -> STRING .)
    DOT             reduce using rule 45 (expr -> STRING .)
    MPOWER          reduce using rule 45 (expr -> STRING .)
    POWER           reduce using rule 45 (expr -> STRING .)
    LDIVIDE         reduce using rule 45 (expr -> STRING .)
    RDIVIDE         reduce using rule 45 (expr -> STRING .)
    TIMES           reduce using rule 45 (expr -> STRING .)
    MLDIVIDE        reduce using rule 45 (expr -> STRING .)
    MRDIVIDE        reduce using rule 45 (expr -> STRING .)
    MTIMES          reduce using rule 45 (expr -> STRING .)
    MINUS           reduce using rule 45 (expr -> STRING .)
    PLUS            reduce using rule 45 (expr -> STRING .)
    NE              reduce using rule 45 (expr -> STRING .)
    EQ              reduce using rule 45 (expr -> STRING .)
    GE              reduce using rule 45 (expr -> STRING .)
    GT              reduce using rule 45 (expr -> STRING .)
    LE              reduce using rule 45 (expr -> STRING .)
    LT              reduce using rule 45 (expr -> STRING .)
    AND             reduce using rule 45 (expr -> STRING .)
    OR              reduce using rule 45 (expr -> STRING .)
    ANDAND          reduce using rule 45 (expr -> STRING .)
    OROR            reduce using rule 45 (expr -> STRING .)
    COLON           reduce using rule 45 (expr -> STRING .)
    LPAREN          reduce using rule 45 (expr -> STRING .)
    RPAREN          reduce using rule 45 (expr -> STRING .)
    COMMA           reduce using rule 45 (expr -> STRING .)
    NOT             reduce using rule 45 (expr -> STRING .)
    STRING          reduce using rule 45 (expr -> STRING .)
    NUMBER          reduce using rule 45 (expr -> STRING .)
    LSQR            reduce using rule 45 (expr -> STRING .)
    NAME            reduce using rule 45 (expr -> STRING .)
    RSQR            reduce using rule 45 (expr -> STRING .)
    FOR             reduce using rule 45 (expr -> STRING .)
    IF              reduce using rule 45 (expr -> STRING .)
    COMMAND         reduce using rule 45 (expr -> STRING .)
    $end            reduce using rule 45 (expr -> STRING .)
    END             reduce using rule 45 (expr -> STRING .)
    ELSE            reduce using rule 45 (expr -> STRING .)
    ELSEIF          reduce using rule 45 (expr -> STRING .)


state 22

    (46) expr -> NUMBER .
    NEWLINE         reduce using rule 46 (expr -> NUMBER .)
    SEMICOLON       reduce using rule 46 (expr -> NUMBER .)
    CTRANSPOSE      reduce using rule 46 (expr -> NUMBER .)
    TRANSPOSE       reduce using rule 46 (expr -> NUMBER .)
    DOT             reduce using rule 46 (expr -> NUMBER .)
    MPOWER          reduce using rule 46 (expr -> NUMBER .)
    POWER           reduce using rule 46 (expr -> NUMBER .)
    LDIVIDE         reduce using rule 46 (expr -> NUMBER .)
    RDIVIDE         reduce using rule 46 (expr -> NUMBER .)
    TIMES           reduce using rule 46 (expr -> NUMBER .)
    MLDIVIDE        reduce using rule 46 (expr -> NUMBER .)
    MRDIVIDE        reduce using rule 46 (expr -> NUMBER .)
    MTIMES          reduce using rule 46 (expr -> NUMBER .)
    MINUS           reduce using rule 46 (expr -> NUMBER .)
    PLUS            reduce using rule 46 (expr -> NUMBER .)
    NE              reduce using rule 46 (expr -> NUMBER .)
    EQ              reduce using rule 46 (expr -> NUMBER .)
    GE              reduce using rule 46 (expr -> NUMBER .)
    GT              reduce using rule 46 (expr -> NUMBER .)
    LE              reduce using rule 46 (expr -> NUMBER .)
    LT              reduce using rule 46 (expr -> NUMBER .)
    AND             reduce using rule 46 (expr -> NUMBER .)
    OR              reduce using rule 46 (expr -> NUMBER .)
    ANDAND          reduce using rule 46 (expr -> NUMBER .)
    OROR            reduce using rule 46 (expr -> NUMBER .)
    COLON           reduce using rule 46 (expr -> NUMBER .)
    LPAREN          reduce using rule 46 (expr -> NUMBER .)
    RPAREN          reduce using rule 46 (expr -> NUMBER .)
    COMMA           reduce using rule 46 (expr -> NUMBER .)
    NOT             reduce using rule 46 (expr -> NUMBER .)
    STRING          reduce using rule 46 (expr -> NUMBER .)
    NUMBER          reduce using rule 46 (expr -> NUMBER .)
    LSQR            reduce using rule 46 (expr -> NUMBER .)
    NAME            reduce using rule 46 (expr -> NUMBER .)
    RSQR            reduce using rule 46 (expr -> NUMBER .)
    FOR             reduce using rule 46 (expr -> NUMBER .)
    IF              reduce using rule 46 (expr -> NUMBER .)
    COMMAND         reduce using rule 46 (expr -> NUMBER .)
    $end            reduce using rule 46 (expr -> NUMBER .)
    END             reduce using rule 46 (expr -> NUMBER .)
    ELSE            reduce using rule 46 (expr -> NUMBER .)
    ELSEIF          reduce using rule 46 (expr -> NUMBER .)


state 23

    (49) ref_expr -> function_call .
    ASSIGN          reduce using rule 49 (ref_expr -> function_call .)
    NEWLINE         reduce using rule 49 (ref_expr -> function_call .)
    SEMICOLON       reduce using rule 49 (ref_expr -> function_call .)
    CTRANSPOSE      reduce using rule 49 (ref_expr -> function_call .)
    TRANSPOSE       reduce using rule 49 (ref_expr -> function_call .)
    DOT             reduce using rule 49 (ref_expr -> function_call .)
    MPOWER          reduce using rule 49 (ref_expr -> function_call .)
    POWER           reduce using rule 49 (ref_expr -> function_call .)
    LDIVIDE         reduce using rule 49 (ref_expr -> function_call .)
    RDIVIDE         reduce using rule 49 (ref_expr -> function_call .)
    TIMES           reduce using rule 49 (ref_expr -> function_call .)
    MLDIVIDE        reduce using rule 49 (ref_expr -> function_call .)
    MRDIVIDE        reduce using rule 49 (ref_expr -> function_call .)
    MTIMES          reduce using rule 49 (ref_expr -> function_call .)
    MINUS           reduce using rule 49 (ref_expr -> function_call .)
    PLUS            reduce using rule 49 (ref_expr -> function_call .)
    NE              reduce using rule 49 (ref_expr -> function_call .)
    EQ              reduce using rule 49 (ref_expr -> function_call .)
    GE              reduce using rule 49 (ref_expr -> function_call .)
    GT              reduce using rule 49 (ref_expr -> function_call .)
    LE              reduce using rule 49 (ref_expr -> function_call .)
    LT              reduce using rule 49 (ref_expr -> function_call .)
    AND             reduce using rule 49 (ref_expr -> function_call .)
    OR              reduce using rule 49 (ref_expr -> function_call .)
    ANDAND          reduce using rule 49 (ref_expr -> function_call .)
    OROR            reduce using rule 49 (ref_expr -> function_call .)
    COLON           reduce using rule 49 (ref_expr -> function_call .)
    LPAREN          reduce using rule 49 (ref_expr -> function_call .)
    RPAREN          reduce using rule 49 (ref_expr -> function_call .)
    COMMA           reduce using rule 49 (ref_expr -> function_call .)
    NOT             reduce using rule 49 (ref_expr -> function_call .)
    STRING          reduce using rule 49 (ref_expr -> function_call .)
    NUMBER          reduce using rule 49 (ref_expr -> function_call .)
    LSQR            reduce using rule 49 (ref_expr -> function_call .)
    NAME            reduce using rule 49 (ref_expr -> function_call .)
    RSQR            reduce using rule 49 (ref_expr -> function_call .)
    FOR             reduce using rule 49 (ref_expr -> function_call .)
    IF              reduce using rule 49 (ref_expr -> function_call .)
    COMMAND         reduce using rule 49 (ref_expr -> function_call .)
    $end            reduce using rule 49 (ref_expr -> function_call .)
    END             reduce using rule 49 (ref_expr -> function_call .)
    ELSE            reduce using rule 49 (ref_expr -> function_call .)
    ELSEIF          reduce using rule 49 (ref_expr -> function_call .)


state 24

    (58) array_literal -> LSQR . array_vals RSQR
    (61) matrix_literal -> LSQR . matrix_row_inner array_vals RSQR
    (55) array_vals -> . expr
    (56) array_vals -> . expr array_vals
    (57) array_vals -> . expr COMMA array_vals
    (59) matrix_row_inner -> . matrix_row_inner array_vals SEMICOLON
    (60) matrix_row_inner -> . array_vals SEMICOLON
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    array_vals                     shift and go to state 66
    matrix_row_inner               shift and go to state 67
    expr                           shift and go to state 68
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 25

    (3) statements -> statements statement .
    (13) statement -> statement . NEWLINE
    (14) statement -> statement . SEMICOLON
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
    FOR             reduce using rule 3 (statements -> statements statement .)
    IF              reduce using rule 3 (statements -> statements statement .)
    COMMAND         reduce using rule 3 (statements -> statements statement .)
    LPAREN          reduce using rule 3 (statements -> statements statement .)
    NOT             reduce using rule 3 (statements -> statements statement .)
    MINUS           reduce using rule 3 (statements -> statements statement .)
    PLUS            reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    NUMBER          reduce using rule 3 (statements -> statements statement .)
    NAME            reduce using rule 3 (statements -> statements statement .)
    LSQR            reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    END             reduce using rule 3 (statements -> statements statement .)
    ELSE            reduce using rule 3 (statements -> statements statement .)
    ELSEIF          reduce using rule 3 (statements -> statements statement .)
    NEWLINE         shift and go to state 69
    SEMICOLON       shift and go to state 70


state 26

    (4) statements -> statement statements .
    (3) statements -> statements . statement
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for COMMAND resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LSQR resolved as shift
    $end            reduce using rule 4 (statements -> statement statements .)
    END             reduce using rule 4 (statements -> statement statements .)
    ELSE            reduce using rule 4 (statements -> statement statements .)
    ELSEIF          reduce using rule 4 (statements -> statement statements .)
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 27

    (13) statement -> statement NEWLINE .
    (11) statement -> NEWLINE .
  ! reduce/reduce conflict for NEWLINE resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for FOR resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for IF resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for COMMAND resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for LPAREN resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NOT resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for MINUS resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for PLUS resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for STRING resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for NAME resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for LSQR resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for $end resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for END resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (statement -> statement NEWLINE .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 13 (statement -> statement NEWLINE .)
    NEWLINE         reduce using rule 13 (statement -> statement NEWLINE .)
    SEMICOLON       reduce using rule 13 (statement -> statement NEWLINE .)
    FOR             reduce using rule 13 (statement -> statement NEWLINE .)
    IF              reduce using rule 13 (statement -> statement NEWLINE .)
    COMMAND         reduce using rule 13 (statement -> statement NEWLINE .)
    LPAREN          reduce using rule 13 (statement -> statement NEWLINE .)
    NOT             reduce using rule 13 (statement -> statement NEWLINE .)
    MINUS           reduce using rule 13 (statement -> statement NEWLINE .)
    PLUS            reduce using rule 13 (statement -> statement NEWLINE .)
    STRING          reduce using rule 13 (statement -> statement NEWLINE .)
    NUMBER          reduce using rule 13 (statement -> statement NEWLINE .)
    NAME            reduce using rule 13 (statement -> statement NEWLINE .)
    LSQR            reduce using rule 13 (statement -> statement NEWLINE .)
    $end            reduce using rule 13 (statement -> statement NEWLINE .)
    END             reduce using rule 13 (statement -> statement NEWLINE .)
    ELSE            reduce using rule 13 (statement -> statement NEWLINE .)
    ELSEIF          reduce using rule 13 (statement -> statement NEWLINE .)


state 28

    (14) statement -> statement SEMICOLON .
    (12) statement -> SEMICOLON .
  ! reduce/reduce conflict for NEWLINE resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for FOR resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for IF resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for COMMAND resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for LPAREN resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NOT resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for MINUS resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for PLUS resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for STRING resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NUMBER resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for NAME resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for LSQR resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for END resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for ELSE resolved using rule 14 (statement -> statement SEMICOLON .)
  ! reduce/reduce conflict for ELSEIF resolved using rule 14 (statement -> statement SEMICOLON .)
    NEWLINE         reduce using rule 14 (statement -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 14 (statement -> statement SEMICOLON .)
    FOR             reduce using rule 14 (statement -> statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> statement SEMICOLON .)
    COMMAND         reduce using rule 14 (statement -> statement SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> statement SEMICOLON .)
    NOT             reduce using rule 14 (statement -> statement SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> statement SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> statement SEMICOLON .)
    STRING          reduce using rule 14 (statement -> statement SEMICOLON .)
    NUMBER          reduce using rule 14 (statement -> statement SEMICOLON .)
    NAME            reduce using rule 14 (statement -> statement SEMICOLON .)
    LSQR            reduce using rule 14 (statement -> statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> statement SEMICOLON .)
    END             reduce using rule 14 (statement -> statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> statement SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> statement SEMICOLON .)


state 29

    (8) statement -> FOR assign . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    assign                         shift and go to state 6
    statements                     shift and go to state 71
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 30

    (51) function_call -> expr . LPAREN RPAREN
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    LPAREN          shift and go to state 57
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56


state 31

    (9) statement -> expr NEWLINE .
    NEWLINE         reduce using rule 9 (statement -> expr NEWLINE .)
    SEMICOLON       reduce using rule 9 (statement -> expr NEWLINE .)
    FOR             reduce using rule 9 (statement -> expr NEWLINE .)
    IF              reduce using rule 9 (statement -> expr NEWLINE .)
    COMMAND         reduce using rule 9 (statement -> expr NEWLINE .)
    LPAREN          reduce using rule 9 (statement -> expr NEWLINE .)
    NOT             reduce using rule 9 (statement -> expr NEWLINE .)
    MINUS           reduce using rule 9 (statement -> expr NEWLINE .)
    PLUS            reduce using rule 9 (statement -> expr NEWLINE .)
    STRING          reduce using rule 9 (statement -> expr NEWLINE .)
    NUMBER          reduce using rule 9 (statement -> expr NEWLINE .)
    NAME            reduce using rule 9 (statement -> expr NEWLINE .)
    LSQR            reduce using rule 9 (statement -> expr NEWLINE .)
    $end            reduce using rule 9 (statement -> expr NEWLINE .)
    END             reduce using rule 9 (statement -> expr NEWLINE .)
    ELSE            reduce using rule 9 (statement -> expr NEWLINE .)
    ELSEIF          reduce using rule 9 (statement -> expr NEWLINE .)


state 32

    (10) statement -> expr SEMICOLON .
    NEWLINE         reduce using rule 10 (statement -> expr SEMICOLON .)
    SEMICOLON       reduce using rule 10 (statement -> expr SEMICOLON .)
    FOR             reduce using rule 10 (statement -> expr SEMICOLON .)
    IF              reduce using rule 10 (statement -> expr SEMICOLON .)
    COMMAND         reduce using rule 10 (statement -> expr SEMICOLON .)
    LPAREN          reduce using rule 10 (statement -> expr SEMICOLON .)
    NOT             reduce using rule 10 (statement -> expr SEMICOLON .)
    MINUS           reduce using rule 10 (statement -> expr SEMICOLON .)
    PLUS            reduce using rule 10 (statement -> expr SEMICOLON .)
    STRING          reduce using rule 10 (statement -> expr SEMICOLON .)
    NUMBER          reduce using rule 10 (statement -> expr SEMICOLON .)
    NAME            reduce using rule 10 (statement -> expr SEMICOLON .)
    LSQR            reduce using rule 10 (statement -> expr SEMICOLON .)
    $end            reduce using rule 10 (statement -> expr SEMICOLON .)
    END             reduce using rule 10 (statement -> expr SEMICOLON .)
    ELSE            reduce using rule 10 (statement -> expr SEMICOLON .)
    ELSEIF          reduce using rule 10 (statement -> expr SEMICOLON .)


state 33

    (16) expr -> expr CTRANSPOSE .
    NEWLINE         reduce using rule 16 (expr -> expr CTRANSPOSE .)
    SEMICOLON       reduce using rule 16 (expr -> expr CTRANSPOSE .)
    CTRANSPOSE      reduce using rule 16 (expr -> expr CTRANSPOSE .)
    TRANSPOSE       reduce using rule 16 (expr -> expr CTRANSPOSE .)
    DOT             reduce using rule 16 (expr -> expr CTRANSPOSE .)
    MPOWER          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    POWER           reduce using rule 16 (expr -> expr CTRANSPOSE .)
    LDIVIDE         reduce using rule 16 (expr -> expr CTRANSPOSE .)
    RDIVIDE         reduce using rule 16 (expr -> expr CTRANSPOSE .)
    TIMES           reduce using rule 16 (expr -> expr CTRANSPOSE .)
    MLDIVIDE        reduce using rule 16 (expr -> expr CTRANSPOSE .)
    MRDIVIDE        reduce using rule 16 (expr -> expr CTRANSPOSE .)
    MTIMES          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    MINUS           reduce using rule 16 (expr -> expr CTRANSPOSE .)
    PLUS            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    NE              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    EQ              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    GE              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    GT              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    LE              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    LT              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    AND             reduce using rule 16 (expr -> expr CTRANSPOSE .)
    OR              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    ANDAND          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    OROR            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    COLON           reduce using rule 16 (expr -> expr CTRANSPOSE .)
    LPAREN          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    RPAREN          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    COMMA           reduce using rule 16 (expr -> expr CTRANSPOSE .)
    NOT             reduce using rule 16 (expr -> expr CTRANSPOSE .)
    STRING          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    NUMBER          reduce using rule 16 (expr -> expr CTRANSPOSE .)
    LSQR            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    NAME            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    RSQR            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    FOR             reduce using rule 16 (expr -> expr CTRANSPOSE .)
    IF              reduce using rule 16 (expr -> expr CTRANSPOSE .)
    COMMAND         reduce using rule 16 (expr -> expr CTRANSPOSE .)
    $end            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    END             reduce using rule 16 (expr -> expr CTRANSPOSE .)
    ELSE            reduce using rule 16 (expr -> expr CTRANSPOSE .)
    ELSEIF          reduce using rule 16 (expr -> expr CTRANSPOSE .)


state 34

    (17) expr -> expr TRANSPOSE .
    NEWLINE         reduce using rule 17 (expr -> expr TRANSPOSE .)
    SEMICOLON       reduce using rule 17 (expr -> expr TRANSPOSE .)
    CTRANSPOSE      reduce using rule 17 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 17 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 17 (expr -> expr TRANSPOSE .)
    MPOWER          reduce using rule 17 (expr -> expr TRANSPOSE .)
    POWER           reduce using rule 17 (expr -> expr TRANSPOSE .)
    LDIVIDE         reduce using rule 17 (expr -> expr TRANSPOSE .)
    RDIVIDE         reduce using rule 17 (expr -> expr TRANSPOSE .)
    TIMES           reduce using rule 17 (expr -> expr TRANSPOSE .)
    MLDIVIDE        reduce using rule 17 (expr -> expr TRANSPOSE .)
    MRDIVIDE        reduce using rule 17 (expr -> expr TRANSPOSE .)
    MTIMES          reduce using rule 17 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 17 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 17 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 17 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 17 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 17 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 17 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 17 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 17 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 17 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 17 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 17 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 17 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 17 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 17 (expr -> expr TRANSPOSE .)
    RPAREN          reduce using rule 17 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 17 (expr -> expr TRANSPOSE .)
    NOT             reduce using rule 17 (expr -> expr TRANSPOSE .)
    STRING          reduce using rule 17 (expr -> expr TRANSPOSE .)
    NUMBER          reduce using rule 17 (expr -> expr TRANSPOSE .)
    LSQR            reduce using rule 17 (expr -> expr TRANSPOSE .)
    NAME            reduce using rule 17 (expr -> expr TRANSPOSE .)
    RSQR            reduce using rule 17 (expr -> expr TRANSPOSE .)
    FOR             reduce using rule 17 (expr -> expr TRANSPOSE .)
    IF              reduce using rule 17 (expr -> expr TRANSPOSE .)
    COMMAND         reduce using rule 17 (expr -> expr TRANSPOSE .)
    $end            reduce using rule 17 (expr -> expr TRANSPOSE .)
    END             reduce using rule 17 (expr -> expr TRANSPOSE .)
    ELSE            reduce using rule 17 (expr -> expr TRANSPOSE .)
    ELSEIF          reduce using rule 17 (expr -> expr TRANSPOSE .)


state 35

    (20) expr -> expr DOT . NAME
    NAME            shift and go to state 72


state 36

    (22) expr -> expr MPOWER . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 73
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 37

    (23) expr -> expr POWER . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 74
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 38

    (24) expr -> expr LDIVIDE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 75
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 39

    (25) expr -> expr RDIVIDE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 76
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 40

    (26) expr -> expr TIMES . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 77
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 41

    (27) expr -> expr MLDIVIDE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 78
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 42

    (28) expr -> expr MRDIVIDE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 79
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 43

    (29) expr -> expr MTIMES . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 80
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 44

    (30) expr -> expr MINUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 81
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 45

    (31) expr -> expr PLUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 82
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 46

    (32) expr -> expr NE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 83
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 47

    (33) expr -> expr EQ . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 84
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 48

    (34) expr -> expr GE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 85
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 49

    (35) expr -> expr GT . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 86
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 50

    (36) expr -> expr LE . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 87
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 51

    (37) expr -> expr LT . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 88
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 52

    (38) expr -> expr AND . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 89
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 53

    (39) expr -> expr OR . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 90
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 54

    (40) expr -> expr ANDAND . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 91
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 55

    (41) expr -> expr OROR . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 92
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 56

    (48) expr -> expr COLON . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 93
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 57

    (51) function_call -> expr LPAREN . RPAREN
    RPAREN          shift and go to state 94


state 58

    (63) if_block -> IF expr . NEWLINE statements ELSE statements END
    (64) if_block -> IF expr . NEWLINE statements elseif_block
    (65) if_block -> IF expr . NEWLINE statements END
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 95
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 59

    (47) expr -> ref_expr .
    NEWLINE         reduce using rule 47 (expr -> ref_expr .)
    CTRANSPOSE      reduce using rule 47 (expr -> ref_expr .)
    TRANSPOSE       reduce using rule 47 (expr -> ref_expr .)
    DOT             reduce using rule 47 (expr -> ref_expr .)
    MPOWER          reduce using rule 47 (expr -> ref_expr .)
    POWER           reduce using rule 47 (expr -> ref_expr .)
    LDIVIDE         reduce using rule 47 (expr -> ref_expr .)
    RDIVIDE         reduce using rule 47 (expr -> ref_expr .)
    TIMES           reduce using rule 47 (expr -> ref_expr .)
    MLDIVIDE        reduce using rule 47 (expr -> ref_expr .)
    MRDIVIDE        reduce using rule 47 (expr -> ref_expr .)
    MTIMES          reduce using rule 47 (expr -> ref_expr .)
    MINUS           reduce using rule 47 (expr -> ref_expr .)
    PLUS            reduce using rule 47 (expr -> ref_expr .)
    NE              reduce using rule 47 (expr -> ref_expr .)
    EQ              reduce using rule 47 (expr -> ref_expr .)
    GE              reduce using rule 47 (expr -> ref_expr .)
    GT              reduce using rule 47 (expr -> ref_expr .)
    LE              reduce using rule 47 (expr -> ref_expr .)
    LT              reduce using rule 47 (expr -> ref_expr .)
    AND             reduce using rule 47 (expr -> ref_expr .)
    OR              reduce using rule 47 (expr -> ref_expr .)
    ANDAND          reduce using rule 47 (expr -> ref_expr .)
    OROR            reduce using rule 47 (expr -> ref_expr .)
    COLON           reduce using rule 47 (expr -> ref_expr .)
    LPAREN          reduce using rule 47 (expr -> ref_expr .)
    RPAREN          reduce using rule 47 (expr -> ref_expr .)
    SEMICOLON       reduce using rule 47 (expr -> ref_expr .)
    COMMA           reduce using rule 47 (expr -> ref_expr .)
    NOT             reduce using rule 47 (expr -> ref_expr .)
    STRING          reduce using rule 47 (expr -> ref_expr .)
    NUMBER          reduce using rule 47 (expr -> ref_expr .)
    LSQR            reduce using rule 47 (expr -> ref_expr .)
    NAME            reduce using rule 47 (expr -> ref_expr .)
    RSQR            reduce using rule 47 (expr -> ref_expr .)
    FOR             reduce using rule 47 (expr -> ref_expr .)
    IF              reduce using rule 47 (expr -> ref_expr .)
    COMMAND         reduce using rule 47 (expr -> ref_expr .)
    $end            reduce using rule 47 (expr -> ref_expr .)
    END             reduce using rule 47 (expr -> ref_expr .)
    ELSE            reduce using rule 47 (expr -> ref_expr .)
    ELSEIF          reduce using rule 47 (expr -> ref_expr .)


state 60

    (15) assign -> ref_expr ASSIGN . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    ref_expr                       shift and go to state 59
    expr                           shift and go to state 96
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 61

    (52) function_call -> NAME LPAREN . args RPAREN
    (53) args -> . expr
    (54) args -> . args COMMA expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    args                           shift and go to state 97
    expr                           shift and go to state 98
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 62

    (21) expr -> LPAREN expr . RPAREN
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    RPAREN          shift and go to state 99
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 63

    (43) expr -> MINUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 43 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 43 (expr -> MINUS expr .)
    MINUS           reduce using rule 43 (expr -> MINUS expr .)
    PLUS            reduce using rule 43 (expr -> MINUS expr .)
    NE              reduce using rule 43 (expr -> MINUS expr .)
    EQ              reduce using rule 43 (expr -> MINUS expr .)
    GE              reduce using rule 43 (expr -> MINUS expr .)
    GT              reduce using rule 43 (expr -> MINUS expr .)
    LE              reduce using rule 43 (expr -> MINUS expr .)
    LT              reduce using rule 43 (expr -> MINUS expr .)
    AND             reduce using rule 43 (expr -> MINUS expr .)
    OR              reduce using rule 43 (expr -> MINUS expr .)
    ANDAND          reduce using rule 43 (expr -> MINUS expr .)
    OROR            reduce using rule 43 (expr -> MINUS expr .)
    COLON           reduce using rule 43 (expr -> MINUS expr .)
    LPAREN          reduce using rule 43 (expr -> MINUS expr .)
    RPAREN          reduce using rule 43 (expr -> MINUS expr .)
    COMMA           reduce using rule 43 (expr -> MINUS expr .)
    NOT             reduce using rule 43 (expr -> MINUS expr .)
    STRING          reduce using rule 43 (expr -> MINUS expr .)
    NUMBER          reduce using rule 43 (expr -> MINUS expr .)
    LSQR            reduce using rule 43 (expr -> MINUS expr .)
    NAME            reduce using rule 43 (expr -> MINUS expr .)
    RSQR            reduce using rule 43 (expr -> MINUS expr .)
    FOR             reduce using rule 43 (expr -> MINUS expr .)
    IF              reduce using rule 43 (expr -> MINUS expr .)
    COMMAND         reduce using rule 43 (expr -> MINUS expr .)
    $end            reduce using rule 43 (expr -> MINUS expr .)
    END             reduce using rule 43 (expr -> MINUS expr .)
    ELSE            reduce using rule 43 (expr -> MINUS expr .)
    ELSEIF          reduce using rule 43 (expr -> MINUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 64

    (44) expr -> PLUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 44 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 44 (expr -> PLUS expr .)
    MINUS           reduce using rule 44 (expr -> PLUS expr .)
    PLUS            reduce using rule 44 (expr -> PLUS expr .)
    NE              reduce using rule 44 (expr -> PLUS expr .)
    EQ              reduce using rule 44 (expr -> PLUS expr .)
    GE              reduce using rule 44 (expr -> PLUS expr .)
    GT              reduce using rule 44 (expr -> PLUS expr .)
    LE              reduce using rule 44 (expr -> PLUS expr .)
    LT              reduce using rule 44 (expr -> PLUS expr .)
    AND             reduce using rule 44 (expr -> PLUS expr .)
    OR              reduce using rule 44 (expr -> PLUS expr .)
    ANDAND          reduce using rule 44 (expr -> PLUS expr .)
    OROR            reduce using rule 44 (expr -> PLUS expr .)
    COLON           reduce using rule 44 (expr -> PLUS expr .)
    LPAREN          reduce using rule 44 (expr -> PLUS expr .)
    RPAREN          reduce using rule 44 (expr -> PLUS expr .)
    COMMA           reduce using rule 44 (expr -> PLUS expr .)
    NOT             reduce using rule 44 (expr -> PLUS expr .)
    STRING          reduce using rule 44 (expr -> PLUS expr .)
    NUMBER          reduce using rule 44 (expr -> PLUS expr .)
    LSQR            reduce using rule 44 (expr -> PLUS expr .)
    NAME            reduce using rule 44 (expr -> PLUS expr .)
    RSQR            reduce using rule 44 (expr -> PLUS expr .)
    FOR             reduce using rule 44 (expr -> PLUS expr .)
    IF              reduce using rule 44 (expr -> PLUS expr .)
    COMMAND         reduce using rule 44 (expr -> PLUS expr .)
    $end            reduce using rule 44 (expr -> PLUS expr .)
    END             reduce using rule 44 (expr -> PLUS expr .)
    ELSE            reduce using rule 44 (expr -> PLUS expr .)
    ELSEIF          reduce using rule 44 (expr -> PLUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 65

    (42) expr -> NOT expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 42 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 42 (expr -> NOT expr .)
    LDIVIDE         reduce using rule 42 (expr -> NOT expr .)
    RDIVIDE         reduce using rule 42 (expr -> NOT expr .)
    TIMES           reduce using rule 42 (expr -> NOT expr .)
    MLDIVIDE        reduce using rule 42 (expr -> NOT expr .)
    MRDIVIDE        reduce using rule 42 (expr -> NOT expr .)
    MTIMES          reduce using rule 42 (expr -> NOT expr .)
    MINUS           reduce using rule 42 (expr -> NOT expr .)
    PLUS            reduce using rule 42 (expr -> NOT expr .)
    NE              reduce using rule 42 (expr -> NOT expr .)
    EQ              reduce using rule 42 (expr -> NOT expr .)
    GE              reduce using rule 42 (expr -> NOT expr .)
    GT              reduce using rule 42 (expr -> NOT expr .)
    LE              reduce using rule 42 (expr -> NOT expr .)
    LT              reduce using rule 42 (expr -> NOT expr .)
    AND             reduce using rule 42 (expr -> NOT expr .)
    OR              reduce using rule 42 (expr -> NOT expr .)
    ANDAND          reduce using rule 42 (expr -> NOT expr .)
    OROR            reduce using rule 42 (expr -> NOT expr .)
    COLON           reduce using rule 42 (expr -> NOT expr .)
    LPAREN          reduce using rule 42 (expr -> NOT expr .)
    RPAREN          reduce using rule 42 (expr -> NOT expr .)
    COMMA           reduce using rule 42 (expr -> NOT expr .)
    NOT             reduce using rule 42 (expr -> NOT expr .)
    STRING          reduce using rule 42 (expr -> NOT expr .)
    NUMBER          reduce using rule 42 (expr -> NOT expr .)
    LSQR            reduce using rule 42 (expr -> NOT expr .)
    NAME            reduce using rule 42 (expr -> NOT expr .)
    RSQR            reduce using rule 42 (expr -> NOT expr .)
    FOR             reduce using rule 42 (expr -> NOT expr .)
    IF              reduce using rule 42 (expr -> NOT expr .)
    COMMAND         reduce using rule 42 (expr -> NOT expr .)
    $end            reduce using rule 42 (expr -> NOT expr .)
    END             reduce using rule 42 (expr -> NOT expr .)
    ELSE            reduce using rule 42 (expr -> NOT expr .)
    ELSEIF          reduce using rule 42 (expr -> NOT expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 66

    (58) array_literal -> LSQR array_vals . RSQR
    (60) matrix_row_inner -> array_vals . SEMICOLON
    RSQR            shift and go to state 100
    SEMICOLON       shift and go to state 101


state 67

    (61) matrix_literal -> LSQR matrix_row_inner . array_vals RSQR
    (59) matrix_row_inner -> matrix_row_inner . array_vals SEMICOLON
    (55) array_vals -> . expr
    (56) array_vals -> . expr array_vals
    (57) array_vals -> . expr COMMA array_vals
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    array_vals                     shift and go to state 102
    expr                           shift and go to state 68
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 68

    (55) array_vals -> expr .
    (56) array_vals -> expr . array_vals
    (57) array_vals -> expr . COMMA array_vals
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    (55) array_vals -> . expr
    (56) array_vals -> . expr array_vals
    (57) array_vals -> . expr COMMA array_vals
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    RSQR            reduce using rule 55 (array_vals -> expr .)
    SEMICOLON       reduce using rule 55 (array_vals -> expr .)
    COMMA           shift and go to state 104
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 105
    PLUS            shift and go to state 106
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 107
    NOT             shift and go to state 20
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 68
    array_vals                     shift and go to state 103
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 69

    (13) statement -> statement NEWLINE .
    NEWLINE         reduce using rule 13 (statement -> statement NEWLINE .)
    SEMICOLON       reduce using rule 13 (statement -> statement NEWLINE .)
    FOR             reduce using rule 13 (statement -> statement NEWLINE .)
    IF              reduce using rule 13 (statement -> statement NEWLINE .)
    COMMAND         reduce using rule 13 (statement -> statement NEWLINE .)
    LPAREN          reduce using rule 13 (statement -> statement NEWLINE .)
    NOT             reduce using rule 13 (statement -> statement NEWLINE .)
    MINUS           reduce using rule 13 (statement -> statement NEWLINE .)
    PLUS            reduce using rule 13 (statement -> statement NEWLINE .)
    STRING          reduce using rule 13 (statement -> statement NEWLINE .)
    NUMBER          reduce using rule 13 (statement -> statement NEWLINE .)
    NAME            reduce using rule 13 (statement -> statement NEWLINE .)
    LSQR            reduce using rule 13 (statement -> statement NEWLINE .)
    $end            reduce using rule 13 (statement -> statement NEWLINE .)
    END             reduce using rule 13 (statement -> statement NEWLINE .)
    ELSE            reduce using rule 13 (statement -> statement NEWLINE .)
    ELSEIF          reduce using rule 13 (statement -> statement NEWLINE .)


state 70

    (14) statement -> statement SEMICOLON .
    NEWLINE         reduce using rule 14 (statement -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 14 (statement -> statement SEMICOLON .)
    FOR             reduce using rule 14 (statement -> statement SEMICOLON .)
    IF              reduce using rule 14 (statement -> statement SEMICOLON .)
    COMMAND         reduce using rule 14 (statement -> statement SEMICOLON .)
    LPAREN          reduce using rule 14 (statement -> statement SEMICOLON .)
    NOT             reduce using rule 14 (statement -> statement SEMICOLON .)
    MINUS           reduce using rule 14 (statement -> statement SEMICOLON .)
    PLUS            reduce using rule 14 (statement -> statement SEMICOLON .)
    STRING          reduce using rule 14 (statement -> statement SEMICOLON .)
    NUMBER          reduce using rule 14 (statement -> statement SEMICOLON .)
    NAME            reduce using rule 14 (statement -> statement SEMICOLON .)
    LSQR            reduce using rule 14 (statement -> statement SEMICOLON .)
    $end            reduce using rule 14 (statement -> statement SEMICOLON .)
    END             reduce using rule 14 (statement -> statement SEMICOLON .)
    ELSE            reduce using rule 14 (statement -> statement SEMICOLON .)
    ELSEIF          reduce using rule 14 (statement -> statement SEMICOLON .)


state 71

    (8) statement -> FOR assign statements . END
    (3) statements -> statements . statement
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 108
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    assign                         shift and go to state 6
    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    expr                           shift and go to state 8
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 72

    (20) expr -> expr DOT NAME .
    NEWLINE         reduce using rule 20 (expr -> expr DOT NAME .)
    SEMICOLON       reduce using rule 20 (expr -> expr DOT NAME .)
    CTRANSPOSE      reduce using rule 20 (expr -> expr DOT NAME .)
    TRANSPOSE       reduce using rule 20 (expr -> expr DOT NAME .)
    DOT             reduce using rule 20 (expr -> expr DOT NAME .)
    MPOWER          reduce using rule 20 (expr -> expr DOT NAME .)
    POWER           reduce using rule 20 (expr -> expr DOT NAME .)
    LDIVIDE         reduce using rule 20 (expr -> expr DOT NAME .)
    RDIVIDE         reduce using rule 20 (expr -> expr DOT NAME .)
    TIMES           reduce using rule 20 (expr -> expr DOT NAME .)
    MLDIVIDE        reduce using rule 20 (expr -> expr DOT NAME .)
    MRDIVIDE        reduce using rule 20 (expr -> expr DOT NAME .)
    MTIMES          reduce using rule 20 (expr -> expr DOT NAME .)
    MINUS           reduce using rule 20 (expr -> expr DOT NAME .)
    PLUS            reduce using rule 20 (expr -> expr DOT NAME .)
    NE              reduce using rule 20 (expr -> expr DOT NAME .)
    EQ              reduce using rule 20 (expr -> expr DOT NAME .)
    GE              reduce using rule 20 (expr -> expr DOT NAME .)
    GT              reduce using rule 20 (expr -> expr DOT NAME .)
    LE              reduce using rule 20 (expr -> expr DOT NAME .)
    LT              reduce using rule 20 (expr -> expr DOT NAME .)
    AND             reduce using rule 20 (expr -> expr DOT NAME .)
    OR              reduce using rule 20 (expr -> expr DOT NAME .)
    ANDAND          reduce using rule 20 (expr -> expr DOT NAME .)
    OROR            reduce using rule 20 (expr -> expr DOT NAME .)
    COLON           reduce using rule 20 (expr -> expr DOT NAME .)
    LPAREN          reduce using rule 20 (expr -> expr DOT NAME .)
    RPAREN          reduce using rule 20 (expr -> expr DOT NAME .)
    COMMA           reduce using rule 20 (expr -> expr DOT NAME .)
    NOT             reduce using rule 20 (expr -> expr DOT NAME .)
    STRING          reduce using rule 20 (expr -> expr DOT NAME .)
    NUMBER          reduce using rule 20 (expr -> expr DOT NAME .)
    LSQR            reduce using rule 20 (expr -> expr DOT NAME .)
    NAME            reduce using rule 20 (expr -> expr DOT NAME .)
    RSQR            reduce using rule 20 (expr -> expr DOT NAME .)
    FOR             reduce using rule 20 (expr -> expr DOT NAME .)
    IF              reduce using rule 20 (expr -> expr DOT NAME .)
    COMMAND         reduce using rule 20 (expr -> expr DOT NAME .)
    $end            reduce using rule 20 (expr -> expr DOT NAME .)
    END             reduce using rule 20 (expr -> expr DOT NAME .)
    ELSE            reduce using rule 20 (expr -> expr DOT NAME .)
    ELSEIF          reduce using rule 20 (expr -> expr DOT NAME .)


state 73

    (22) expr -> expr MPOWER expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 22 (expr -> expr MPOWER expr .)
    SEMICOLON       reduce using rule 22 (expr -> expr MPOWER expr .)
    CTRANSPOSE      reduce using rule 22 (expr -> expr MPOWER expr .)
    TRANSPOSE       reduce using rule 22 (expr -> expr MPOWER expr .)
    MPOWER          reduce using rule 22 (expr -> expr MPOWER expr .)
    POWER           reduce using rule 22 (expr -> expr MPOWER expr .)
    LDIVIDE         reduce using rule 22 (expr -> expr MPOWER expr .)
    RDIVIDE         reduce using rule 22 (expr -> expr MPOWER expr .)
    TIMES           reduce using rule 22 (expr -> expr MPOWER expr .)
    MLDIVIDE        reduce using rule 22 (expr -> expr MPOWER expr .)
    MRDIVIDE        reduce using rule 22 (expr -> expr MPOWER expr .)
    MTIMES          reduce using rule 22 (expr -> expr MPOWER expr .)
    MINUS           reduce using rule 22 (expr -> expr MPOWER expr .)
    PLUS            reduce using rule 22 (expr -> expr MPOWER expr .)
    NE              reduce using rule 22 (expr -> expr MPOWER expr .)
    EQ              reduce using rule 22 (expr -> expr MPOWER expr .)
    GE              reduce using rule 22 (expr -> expr MPOWER expr .)
    GT              reduce using rule 22 (expr -> expr MPOWER expr .)
    LE              reduce using rule 22 (expr -> expr MPOWER expr .)
    LT              reduce using rule 22 (expr -> expr MPOWER expr .)
    AND             reduce using rule 22 (expr -> expr MPOWER expr .)
    OR              reduce using rule 22 (expr -> expr MPOWER expr .)
    ANDAND          reduce using rule 22 (expr -> expr MPOWER expr .)
    OROR            reduce using rule 22 (expr -> expr MPOWER expr .)
    COLON           reduce using rule 22 (expr -> expr MPOWER expr .)
    LPAREN          reduce using rule 22 (expr -> expr MPOWER expr .)
    RPAREN          reduce using rule 22 (expr -> expr MPOWER expr .)
    COMMA           reduce using rule 22 (expr -> expr MPOWER expr .)
    NOT             reduce using rule 22 (expr -> expr MPOWER expr .)
    STRING          reduce using rule 22 (expr -> expr MPOWER expr .)
    NUMBER          reduce using rule 22 (expr -> expr MPOWER expr .)
    LSQR            reduce using rule 22 (expr -> expr MPOWER expr .)
    NAME            reduce using rule 22 (expr -> expr MPOWER expr .)
    RSQR            reduce using rule 22 (expr -> expr MPOWER expr .)
    FOR             reduce using rule 22 (expr -> expr MPOWER expr .)
    IF              reduce using rule 22 (expr -> expr MPOWER expr .)
    COMMAND         reduce using rule 22 (expr -> expr MPOWER expr .)
    $end            reduce using rule 22 (expr -> expr MPOWER expr .)
    END             reduce using rule 22 (expr -> expr MPOWER expr .)
    ELSE            reduce using rule 22 (expr -> expr MPOWER expr .)
    ELSEIF          reduce using rule 22 (expr -> expr MPOWER expr .)
    DOT             shift and go to state 35


state 74

    (23) expr -> expr POWER expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 23 (expr -> expr POWER expr .)
    SEMICOLON       reduce using rule 23 (expr -> expr POWER expr .)
    CTRANSPOSE      reduce using rule 23 (expr -> expr POWER expr .)
    TRANSPOSE       reduce using rule 23 (expr -> expr POWER expr .)
    MPOWER          reduce using rule 23 (expr -> expr POWER expr .)
    POWER           reduce using rule 23 (expr -> expr POWER expr .)
    LDIVIDE         reduce using rule 23 (expr -> expr POWER expr .)
    RDIVIDE         reduce using rule 23 (expr -> expr POWER expr .)
    TIMES           reduce using rule 23 (expr -> expr POWER expr .)
    MLDIVIDE        reduce using rule 23 (expr -> expr POWER expr .)
    MRDIVIDE        reduce using rule 23 (expr -> expr POWER expr .)
    MTIMES          reduce using rule 23 (expr -> expr POWER expr .)
    MINUS           reduce using rule 23 (expr -> expr POWER expr .)
    PLUS            reduce using rule 23 (expr -> expr POWER expr .)
    NE              reduce using rule 23 (expr -> expr POWER expr .)
    EQ              reduce using rule 23 (expr -> expr POWER expr .)
    GE              reduce using rule 23 (expr -> expr POWER expr .)
    GT              reduce using rule 23 (expr -> expr POWER expr .)
    LE              reduce using rule 23 (expr -> expr POWER expr .)
    LT              reduce using rule 23 (expr -> expr POWER expr .)
    AND             reduce using rule 23 (expr -> expr POWER expr .)
    OR              reduce using rule 23 (expr -> expr POWER expr .)
    ANDAND          reduce using rule 23 (expr -> expr POWER expr .)
    OROR            reduce using rule 23 (expr -> expr POWER expr .)
    COLON           reduce using rule 23 (expr -> expr POWER expr .)
    LPAREN          reduce using rule 23 (expr -> expr POWER expr .)
    RPAREN          reduce using rule 23 (expr -> expr POWER expr .)
    COMMA           reduce using rule 23 (expr -> expr POWER expr .)
    NOT             reduce using rule 23 (expr -> expr POWER expr .)
    STRING          reduce using rule 23 (expr -> expr POWER expr .)
    NUMBER          reduce using rule 23 (expr -> expr POWER expr .)
    LSQR            reduce using rule 23 (expr -> expr POWER expr .)
    NAME            reduce using rule 23 (expr -> expr POWER expr .)
    RSQR            reduce using rule 23 (expr -> expr POWER expr .)
    FOR             reduce using rule 23 (expr -> expr POWER expr .)
    IF              reduce using rule 23 (expr -> expr POWER expr .)
    COMMAND         reduce using rule 23 (expr -> expr POWER expr .)
    $end            reduce using rule 23 (expr -> expr POWER expr .)
    END             reduce using rule 23 (expr -> expr POWER expr .)
    ELSE            reduce using rule 23 (expr -> expr POWER expr .)
    ELSEIF          reduce using rule 23 (expr -> expr POWER expr .)
    DOT             shift and go to state 35


state 75

    (24) expr -> expr LDIVIDE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 24 (expr -> expr LDIVIDE expr .)
    SEMICOLON       reduce using rule 24 (expr -> expr LDIVIDE expr .)
    LDIVIDE         reduce using rule 24 (expr -> expr LDIVIDE expr .)
    RDIVIDE         reduce using rule 24 (expr -> expr LDIVIDE expr .)
    TIMES           reduce using rule 24 (expr -> expr LDIVIDE expr .)
    MLDIVIDE        reduce using rule 24 (expr -> expr LDIVIDE expr .)
    MRDIVIDE        reduce using rule 24 (expr -> expr LDIVIDE expr .)
    MTIMES          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    MINUS           reduce using rule 24 (expr -> expr LDIVIDE expr .)
    PLUS            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    NE              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    EQ              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    GE              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    GT              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    LE              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    LT              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    AND             reduce using rule 24 (expr -> expr LDIVIDE expr .)
    OR              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    ANDAND          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    OROR            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    COLON           reduce using rule 24 (expr -> expr LDIVIDE expr .)
    LPAREN          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    RPAREN          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    COMMA           reduce using rule 24 (expr -> expr LDIVIDE expr .)
    NOT             reduce using rule 24 (expr -> expr LDIVIDE expr .)
    STRING          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    NUMBER          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    LSQR            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    NAME            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    RSQR            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    FOR             reduce using rule 24 (expr -> expr LDIVIDE expr .)
    IF              reduce using rule 24 (expr -> expr LDIVIDE expr .)
    COMMAND         reduce using rule 24 (expr -> expr LDIVIDE expr .)
    $end            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    END             reduce using rule 24 (expr -> expr LDIVIDE expr .)
    ELSE            reduce using rule 24 (expr -> expr LDIVIDE expr .)
    ELSEIF          reduce using rule 24 (expr -> expr LDIVIDE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 76

    (25) expr -> expr RDIVIDE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 25 (expr -> expr RDIVIDE expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr RDIVIDE expr .)
    LDIVIDE         reduce using rule 25 (expr -> expr RDIVIDE expr .)
    RDIVIDE         reduce using rule 25 (expr -> expr RDIVIDE expr .)
    TIMES           reduce using rule 25 (expr -> expr RDIVIDE expr .)
    MLDIVIDE        reduce using rule 25 (expr -> expr RDIVIDE expr .)
    MRDIVIDE        reduce using rule 25 (expr -> expr RDIVIDE expr .)
    MTIMES          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    MINUS           reduce using rule 25 (expr -> expr RDIVIDE expr .)
    PLUS            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    NE              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    EQ              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    GE              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    GT              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    LE              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    LT              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    AND             reduce using rule 25 (expr -> expr RDIVIDE expr .)
    OR              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    ANDAND          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    OROR            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    COLON           reduce using rule 25 (expr -> expr RDIVIDE expr .)
    LPAREN          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    RPAREN          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    COMMA           reduce using rule 25 (expr -> expr RDIVIDE expr .)
    NOT             reduce using rule 25 (expr -> expr RDIVIDE expr .)
    STRING          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    NUMBER          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    LSQR            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    NAME            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    RSQR            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    FOR             reduce using rule 25 (expr -> expr RDIVIDE expr .)
    IF              reduce using rule 25 (expr -> expr RDIVIDE expr .)
    COMMAND         reduce using rule 25 (expr -> expr RDIVIDE expr .)
    $end            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    END             reduce using rule 25 (expr -> expr RDIVIDE expr .)
    ELSE            reduce using rule 25 (expr -> expr RDIVIDE expr .)
    ELSEIF          reduce using rule 25 (expr -> expr RDIVIDE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 77

    (26) expr -> expr TIMES expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 26 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr TIMES expr .)
    LDIVIDE         reduce using rule 26 (expr -> expr TIMES expr .)
    RDIVIDE         reduce using rule 26 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 26 (expr -> expr TIMES expr .)
    MLDIVIDE        reduce using rule 26 (expr -> expr TIMES expr .)
    MRDIVIDE        reduce using rule 26 (expr -> expr TIMES expr .)
    MTIMES          reduce using rule 26 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 26 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 26 (expr -> expr TIMES expr .)
    NE              reduce using rule 26 (expr -> expr TIMES expr .)
    EQ              reduce using rule 26 (expr -> expr TIMES expr .)
    GE              reduce using rule 26 (expr -> expr TIMES expr .)
    GT              reduce using rule 26 (expr -> expr TIMES expr .)
    LE              reduce using rule 26 (expr -> expr TIMES expr .)
    LT              reduce using rule 26 (expr -> expr TIMES expr .)
    AND             reduce using rule 26 (expr -> expr TIMES expr .)
    OR              reduce using rule 26 (expr -> expr TIMES expr .)
    ANDAND          reduce using rule 26 (expr -> expr TIMES expr .)
    OROR            reduce using rule 26 (expr -> expr TIMES expr .)
    COLON           reduce using rule 26 (expr -> expr TIMES expr .)
    LPAREN          reduce using rule 26 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 26 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 26 (expr -> expr TIMES expr .)
    NOT             reduce using rule 26 (expr -> expr TIMES expr .)
    STRING          reduce using rule 26 (expr -> expr TIMES expr .)
    NUMBER          reduce using rule 26 (expr -> expr TIMES expr .)
    LSQR            reduce using rule 26 (expr -> expr TIMES expr .)
    NAME            reduce using rule 26 (expr -> expr TIMES expr .)
    RSQR            reduce using rule 26 (expr -> expr TIMES expr .)
    FOR             reduce using rule 26 (expr -> expr TIMES expr .)
    IF              reduce using rule 26 (expr -> expr TIMES expr .)
    COMMAND         reduce using rule 26 (expr -> expr TIMES expr .)
    $end            reduce using rule 26 (expr -> expr TIMES expr .)
    END             reduce using rule 26 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 26 (expr -> expr TIMES expr .)
    ELSEIF          reduce using rule 26 (expr -> expr TIMES expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 78

    (27) expr -> expr MLDIVIDE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    LDIVIDE         reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    RDIVIDE         reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    TIMES           reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    MLDIVIDE        reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    MRDIVIDE        reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    MTIMES          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    MINUS           reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    PLUS            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    NE              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    EQ              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    GE              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    GT              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    LE              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    LT              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    AND             reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    OR              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    ANDAND          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    OROR            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    COLON           reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    LPAREN          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    RPAREN          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    COMMA           reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    NOT             reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    STRING          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    NUMBER          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    LSQR            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    NAME            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    RSQR            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    FOR             reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    IF              reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    COMMAND         reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    $end            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    END             reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    ELSE            reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    ELSEIF          reduce using rule 27 (expr -> expr MLDIVIDE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 79

    (28) expr -> expr MRDIVIDE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    LDIVIDE         reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    RDIVIDE         reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    TIMES           reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    MLDIVIDE        reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    MRDIVIDE        reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    MTIMES          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    MINUS           reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    PLUS            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    NE              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    EQ              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    GE              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    GT              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    LE              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    LT              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    AND             reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    OR              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    ANDAND          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    OROR            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    COLON           reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    LPAREN          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    RPAREN          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    COMMA           reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    NOT             reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    STRING          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    NUMBER          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    LSQR            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    NAME            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    RSQR            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    FOR             reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    IF              reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    COMMAND         reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    $end            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    END             reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    ELSE            reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    ELSEIF          reduce using rule 28 (expr -> expr MRDIVIDE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 80

    (29) expr -> expr MTIMES expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 29 (expr -> expr MTIMES expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr MTIMES expr .)
    LDIVIDE         reduce using rule 29 (expr -> expr MTIMES expr .)
    RDIVIDE         reduce using rule 29 (expr -> expr MTIMES expr .)
    TIMES           reduce using rule 29 (expr -> expr MTIMES expr .)
    MLDIVIDE        reduce using rule 29 (expr -> expr MTIMES expr .)
    MRDIVIDE        reduce using rule 29 (expr -> expr MTIMES expr .)
    MTIMES          reduce using rule 29 (expr -> expr MTIMES expr .)
    MINUS           reduce using rule 29 (expr -> expr MTIMES expr .)
    PLUS            reduce using rule 29 (expr -> expr MTIMES expr .)
    NE              reduce using rule 29 (expr -> expr MTIMES expr .)
    EQ              reduce using rule 29 (expr -> expr MTIMES expr .)
    GE              reduce using rule 29 (expr -> expr MTIMES expr .)
    GT              reduce using rule 29 (expr -> expr MTIMES expr .)
    LE              reduce using rule 29 (expr -> expr MTIMES expr .)
    LT              reduce using rule 29 (expr -> expr MTIMES expr .)
    AND             reduce using rule 29 (expr -> expr MTIMES expr .)
    OR              reduce using rule 29 (expr -> expr MTIMES expr .)
    ANDAND          reduce using rule 29 (expr -> expr MTIMES expr .)
    OROR            reduce using rule 29 (expr -> expr MTIMES expr .)
    COLON           reduce using rule 29 (expr -> expr MTIMES expr .)
    LPAREN          reduce using rule 29 (expr -> expr MTIMES expr .)
    RPAREN          reduce using rule 29 (expr -> expr MTIMES expr .)
    COMMA           reduce using rule 29 (expr -> expr MTIMES expr .)
    NOT             reduce using rule 29 (expr -> expr MTIMES expr .)
    STRING          reduce using rule 29 (expr -> expr MTIMES expr .)
    NUMBER          reduce using rule 29 (expr -> expr MTIMES expr .)
    LSQR            reduce using rule 29 (expr -> expr MTIMES expr .)
    NAME            reduce using rule 29 (expr -> expr MTIMES expr .)
    RSQR            reduce using rule 29 (expr -> expr MTIMES expr .)
    FOR             reduce using rule 29 (expr -> expr MTIMES expr .)
    IF              reduce using rule 29 (expr -> expr MTIMES expr .)
    COMMAND         reduce using rule 29 (expr -> expr MTIMES expr .)
    $end            reduce using rule 29 (expr -> expr MTIMES expr .)
    END             reduce using rule 29 (expr -> expr MTIMES expr .)
    ELSE            reduce using rule 29 (expr -> expr MTIMES expr .)
    ELSEIF          reduce using rule 29 (expr -> expr MTIMES expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37


state 81

    (30) expr -> expr MINUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 30 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 30 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 30 (expr -> expr MINUS expr .)
    NE              reduce using rule 30 (expr -> expr MINUS expr .)
    EQ              reduce using rule 30 (expr -> expr MINUS expr .)
    GE              reduce using rule 30 (expr -> expr MINUS expr .)
    GT              reduce using rule 30 (expr -> expr MINUS expr .)
    LE              reduce using rule 30 (expr -> expr MINUS expr .)
    LT              reduce using rule 30 (expr -> expr MINUS expr .)
    AND             reduce using rule 30 (expr -> expr MINUS expr .)
    OR              reduce using rule 30 (expr -> expr MINUS expr .)
    ANDAND          reduce using rule 30 (expr -> expr MINUS expr .)
    OROR            reduce using rule 30 (expr -> expr MINUS expr .)
    COLON           reduce using rule 30 (expr -> expr MINUS expr .)
    LPAREN          reduce using rule 30 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 30 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 30 (expr -> expr MINUS expr .)
    NOT             reduce using rule 30 (expr -> expr MINUS expr .)
    STRING          reduce using rule 30 (expr -> expr MINUS expr .)
    NUMBER          reduce using rule 30 (expr -> expr MINUS expr .)
    LSQR            reduce using rule 30 (expr -> expr MINUS expr .)
    NAME            reduce using rule 30 (expr -> expr MINUS expr .)
    RSQR            reduce using rule 30 (expr -> expr MINUS expr .)
    FOR             reduce using rule 30 (expr -> expr MINUS expr .)
    IF              reduce using rule 30 (expr -> expr MINUS expr .)
    COMMAND         reduce using rule 30 (expr -> expr MINUS expr .)
    $end            reduce using rule 30 (expr -> expr MINUS expr .)
    END             reduce using rule 30 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 30 (expr -> expr MINUS expr .)
    ELSEIF          reduce using rule 30 (expr -> expr MINUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 82

    (31) expr -> expr PLUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 31 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 31 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 31 (expr -> expr PLUS expr .)
    NE              reduce using rule 31 (expr -> expr PLUS expr .)
    EQ              reduce using rule 31 (expr -> expr PLUS expr .)
    GE              reduce using rule 31 (expr -> expr PLUS expr .)
    GT              reduce using rule 31 (expr -> expr PLUS expr .)
    LE              reduce using rule 31 (expr -> expr PLUS expr .)
    LT              reduce using rule 31 (expr -> expr PLUS expr .)
    AND             reduce using rule 31 (expr -> expr PLUS expr .)
    OR              reduce using rule 31 (expr -> expr PLUS expr .)
    ANDAND          reduce using rule 31 (expr -> expr PLUS expr .)
    OROR            reduce using rule 31 (expr -> expr PLUS expr .)
    COLON           reduce using rule 31 (expr -> expr PLUS expr .)
    LPAREN          reduce using rule 31 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 31 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 31 (expr -> expr PLUS expr .)
    NOT             reduce using rule 31 (expr -> expr PLUS expr .)
    STRING          reduce using rule 31 (expr -> expr PLUS expr .)
    NUMBER          reduce using rule 31 (expr -> expr PLUS expr .)
    LSQR            reduce using rule 31 (expr -> expr PLUS expr .)
    NAME            reduce using rule 31 (expr -> expr PLUS expr .)
    RSQR            reduce using rule 31 (expr -> expr PLUS expr .)
    FOR             reduce using rule 31 (expr -> expr PLUS expr .)
    IF              reduce using rule 31 (expr -> expr PLUS expr .)
    COMMAND         reduce using rule 31 (expr -> expr PLUS expr .)
    $end            reduce using rule 31 (expr -> expr PLUS expr .)
    END             reduce using rule 31 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 31 (expr -> expr PLUS expr .)
    ELSEIF          reduce using rule 31 (expr -> expr PLUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 83

    (32) expr -> expr NE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 32 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr NE expr .)
    NE              reduce using rule 32 (expr -> expr NE expr .)
    EQ              reduce using rule 32 (expr -> expr NE expr .)
    GE              reduce using rule 32 (expr -> expr NE expr .)
    GT              reduce using rule 32 (expr -> expr NE expr .)
    LE              reduce using rule 32 (expr -> expr NE expr .)
    LT              reduce using rule 32 (expr -> expr NE expr .)
    AND             reduce using rule 32 (expr -> expr NE expr .)
    OR              reduce using rule 32 (expr -> expr NE expr .)
    ANDAND          reduce using rule 32 (expr -> expr NE expr .)
    OROR            reduce using rule 32 (expr -> expr NE expr .)
    LPAREN          reduce using rule 32 (expr -> expr NE expr .)
    RPAREN          reduce using rule 32 (expr -> expr NE expr .)
    COMMA           reduce using rule 32 (expr -> expr NE expr .)
    NOT             reduce using rule 32 (expr -> expr NE expr .)
    STRING          reduce using rule 32 (expr -> expr NE expr .)
    NUMBER          reduce using rule 32 (expr -> expr NE expr .)
    LSQR            reduce using rule 32 (expr -> expr NE expr .)
    NAME            reduce using rule 32 (expr -> expr NE expr .)
    RSQR            reduce using rule 32 (expr -> expr NE expr .)
    FOR             reduce using rule 32 (expr -> expr NE expr .)
    IF              reduce using rule 32 (expr -> expr NE expr .)
    COMMAND         reduce using rule 32 (expr -> expr NE expr .)
    $end            reduce using rule 32 (expr -> expr NE expr .)
    END             reduce using rule 32 (expr -> expr NE expr .)
    ELSE            reduce using rule 32 (expr -> expr NE expr .)
    ELSEIF          reduce using rule 32 (expr -> expr NE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 84

    (33) expr -> expr EQ expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 33 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr EQ expr .)
    NE              reduce using rule 33 (expr -> expr EQ expr .)
    EQ              reduce using rule 33 (expr -> expr EQ expr .)
    GE              reduce using rule 33 (expr -> expr EQ expr .)
    GT              reduce using rule 33 (expr -> expr EQ expr .)
    LE              reduce using rule 33 (expr -> expr EQ expr .)
    LT              reduce using rule 33 (expr -> expr EQ expr .)
    AND             reduce using rule 33 (expr -> expr EQ expr .)
    OR              reduce using rule 33 (expr -> expr EQ expr .)
    ANDAND          reduce using rule 33 (expr -> expr EQ expr .)
    OROR            reduce using rule 33 (expr -> expr EQ expr .)
    LPAREN          reduce using rule 33 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 33 (expr -> expr EQ expr .)
    COMMA           reduce using rule 33 (expr -> expr EQ expr .)
    NOT             reduce using rule 33 (expr -> expr EQ expr .)
    STRING          reduce using rule 33 (expr -> expr EQ expr .)
    NUMBER          reduce using rule 33 (expr -> expr EQ expr .)
    LSQR            reduce using rule 33 (expr -> expr EQ expr .)
    NAME            reduce using rule 33 (expr -> expr EQ expr .)
    RSQR            reduce using rule 33 (expr -> expr EQ expr .)
    FOR             reduce using rule 33 (expr -> expr EQ expr .)
    IF              reduce using rule 33 (expr -> expr EQ expr .)
    COMMAND         reduce using rule 33 (expr -> expr EQ expr .)
    $end            reduce using rule 33 (expr -> expr EQ expr .)
    END             reduce using rule 33 (expr -> expr EQ expr .)
    ELSE            reduce using rule 33 (expr -> expr EQ expr .)
    ELSEIF          reduce using rule 33 (expr -> expr EQ expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 85

    (34) expr -> expr GE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 34 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr GE expr .)
    NE              reduce using rule 34 (expr -> expr GE expr .)
    EQ              reduce using rule 34 (expr -> expr GE expr .)
    GE              reduce using rule 34 (expr -> expr GE expr .)
    GT              reduce using rule 34 (expr -> expr GE expr .)
    LE              reduce using rule 34 (expr -> expr GE expr .)
    LT              reduce using rule 34 (expr -> expr GE expr .)
    AND             reduce using rule 34 (expr -> expr GE expr .)
    OR              reduce using rule 34 (expr -> expr GE expr .)
    ANDAND          reduce using rule 34 (expr -> expr GE expr .)
    OROR            reduce using rule 34 (expr -> expr GE expr .)
    LPAREN          reduce using rule 34 (expr -> expr GE expr .)
    RPAREN          reduce using rule 34 (expr -> expr GE expr .)
    COMMA           reduce using rule 34 (expr -> expr GE expr .)
    NOT             reduce using rule 34 (expr -> expr GE expr .)
    STRING          reduce using rule 34 (expr -> expr GE expr .)
    NUMBER          reduce using rule 34 (expr -> expr GE expr .)
    LSQR            reduce using rule 34 (expr -> expr GE expr .)
    NAME            reduce using rule 34 (expr -> expr GE expr .)
    RSQR            reduce using rule 34 (expr -> expr GE expr .)
    FOR             reduce using rule 34 (expr -> expr GE expr .)
    IF              reduce using rule 34 (expr -> expr GE expr .)
    COMMAND         reduce using rule 34 (expr -> expr GE expr .)
    $end            reduce using rule 34 (expr -> expr GE expr .)
    END             reduce using rule 34 (expr -> expr GE expr .)
    ELSE            reduce using rule 34 (expr -> expr GE expr .)
    ELSEIF          reduce using rule 34 (expr -> expr GE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 86

    (35) expr -> expr GT expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 35 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr GT expr .)
    NE              reduce using rule 35 (expr -> expr GT expr .)
    EQ              reduce using rule 35 (expr -> expr GT expr .)
    GE              reduce using rule 35 (expr -> expr GT expr .)
    GT              reduce using rule 35 (expr -> expr GT expr .)
    LE              reduce using rule 35 (expr -> expr GT expr .)
    LT              reduce using rule 35 (expr -> expr GT expr .)
    AND             reduce using rule 35 (expr -> expr GT expr .)
    OR              reduce using rule 35 (expr -> expr GT expr .)
    ANDAND          reduce using rule 35 (expr -> expr GT expr .)
    OROR            reduce using rule 35 (expr -> expr GT expr .)
    LPAREN          reduce using rule 35 (expr -> expr GT expr .)
    RPAREN          reduce using rule 35 (expr -> expr GT expr .)
    COMMA           reduce using rule 35 (expr -> expr GT expr .)
    NOT             reduce using rule 35 (expr -> expr GT expr .)
    STRING          reduce using rule 35 (expr -> expr GT expr .)
    NUMBER          reduce using rule 35 (expr -> expr GT expr .)
    LSQR            reduce using rule 35 (expr -> expr GT expr .)
    NAME            reduce using rule 35 (expr -> expr GT expr .)
    RSQR            reduce using rule 35 (expr -> expr GT expr .)
    FOR             reduce using rule 35 (expr -> expr GT expr .)
    IF              reduce using rule 35 (expr -> expr GT expr .)
    COMMAND         reduce using rule 35 (expr -> expr GT expr .)
    $end            reduce using rule 35 (expr -> expr GT expr .)
    END             reduce using rule 35 (expr -> expr GT expr .)
    ELSE            reduce using rule 35 (expr -> expr GT expr .)
    ELSEIF          reduce using rule 35 (expr -> expr GT expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 87

    (36) expr -> expr LE expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 36 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr LE expr .)
    NE              reduce using rule 36 (expr -> expr LE expr .)
    EQ              reduce using rule 36 (expr -> expr LE expr .)
    GE              reduce using rule 36 (expr -> expr LE expr .)
    GT              reduce using rule 36 (expr -> expr LE expr .)
    LE              reduce using rule 36 (expr -> expr LE expr .)
    LT              reduce using rule 36 (expr -> expr LE expr .)
    AND             reduce using rule 36 (expr -> expr LE expr .)
    OR              reduce using rule 36 (expr -> expr LE expr .)
    ANDAND          reduce using rule 36 (expr -> expr LE expr .)
    OROR            reduce using rule 36 (expr -> expr LE expr .)
    LPAREN          reduce using rule 36 (expr -> expr LE expr .)
    RPAREN          reduce using rule 36 (expr -> expr LE expr .)
    COMMA           reduce using rule 36 (expr -> expr LE expr .)
    NOT             reduce using rule 36 (expr -> expr LE expr .)
    STRING          reduce using rule 36 (expr -> expr LE expr .)
    NUMBER          reduce using rule 36 (expr -> expr LE expr .)
    LSQR            reduce using rule 36 (expr -> expr LE expr .)
    NAME            reduce using rule 36 (expr -> expr LE expr .)
    RSQR            reduce using rule 36 (expr -> expr LE expr .)
    FOR             reduce using rule 36 (expr -> expr LE expr .)
    IF              reduce using rule 36 (expr -> expr LE expr .)
    COMMAND         reduce using rule 36 (expr -> expr LE expr .)
    $end            reduce using rule 36 (expr -> expr LE expr .)
    END             reduce using rule 36 (expr -> expr LE expr .)
    ELSE            reduce using rule 36 (expr -> expr LE expr .)
    ELSEIF          reduce using rule 36 (expr -> expr LE expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 88

    (37) expr -> expr LT expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 37 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr LT expr .)
    NE              reduce using rule 37 (expr -> expr LT expr .)
    EQ              reduce using rule 37 (expr -> expr LT expr .)
    GE              reduce using rule 37 (expr -> expr LT expr .)
    GT              reduce using rule 37 (expr -> expr LT expr .)
    LE              reduce using rule 37 (expr -> expr LT expr .)
    LT              reduce using rule 37 (expr -> expr LT expr .)
    AND             reduce using rule 37 (expr -> expr LT expr .)
    OR              reduce using rule 37 (expr -> expr LT expr .)
    ANDAND          reduce using rule 37 (expr -> expr LT expr .)
    OROR            reduce using rule 37 (expr -> expr LT expr .)
    LPAREN          reduce using rule 37 (expr -> expr LT expr .)
    RPAREN          reduce using rule 37 (expr -> expr LT expr .)
    COMMA           reduce using rule 37 (expr -> expr LT expr .)
    NOT             reduce using rule 37 (expr -> expr LT expr .)
    STRING          reduce using rule 37 (expr -> expr LT expr .)
    NUMBER          reduce using rule 37 (expr -> expr LT expr .)
    LSQR            reduce using rule 37 (expr -> expr LT expr .)
    NAME            reduce using rule 37 (expr -> expr LT expr .)
    RSQR            reduce using rule 37 (expr -> expr LT expr .)
    FOR             reduce using rule 37 (expr -> expr LT expr .)
    IF              reduce using rule 37 (expr -> expr LT expr .)
    COMMAND         reduce using rule 37 (expr -> expr LT expr .)
    $end            reduce using rule 37 (expr -> expr LT expr .)
    END             reduce using rule 37 (expr -> expr LT expr .)
    ELSE            reduce using rule 37 (expr -> expr LT expr .)
    ELSEIF          reduce using rule 37 (expr -> expr LT expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    COLON           shift and go to state 56


state 89

    (38) expr -> expr AND expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 38 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 38 (expr -> expr AND expr .)
    AND             reduce using rule 38 (expr -> expr AND expr .)
    OR              reduce using rule 38 (expr -> expr AND expr .)
    ANDAND          reduce using rule 38 (expr -> expr AND expr .)
    OROR            reduce using rule 38 (expr -> expr AND expr .)
    LPAREN          reduce using rule 38 (expr -> expr AND expr .)
    RPAREN          reduce using rule 38 (expr -> expr AND expr .)
    COMMA           reduce using rule 38 (expr -> expr AND expr .)
    NOT             reduce using rule 38 (expr -> expr AND expr .)
    STRING          reduce using rule 38 (expr -> expr AND expr .)
    NUMBER          reduce using rule 38 (expr -> expr AND expr .)
    LSQR            reduce using rule 38 (expr -> expr AND expr .)
    NAME            reduce using rule 38 (expr -> expr AND expr .)
    RSQR            reduce using rule 38 (expr -> expr AND expr .)
    FOR             reduce using rule 38 (expr -> expr AND expr .)
    IF              reduce using rule 38 (expr -> expr AND expr .)
    COMMAND         reduce using rule 38 (expr -> expr AND expr .)
    $end            reduce using rule 38 (expr -> expr AND expr .)
    END             reduce using rule 38 (expr -> expr AND expr .)
    ELSE            reduce using rule 38 (expr -> expr AND expr .)
    ELSEIF          reduce using rule 38 (expr -> expr AND expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    COLON           shift and go to state 56


state 90

    (39) expr -> expr OR expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 39 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 39 (expr -> expr OR expr .)
    OR              reduce using rule 39 (expr -> expr OR expr .)
    ANDAND          reduce using rule 39 (expr -> expr OR expr .)
    OROR            reduce using rule 39 (expr -> expr OR expr .)
    LPAREN          reduce using rule 39 (expr -> expr OR expr .)
    RPAREN          reduce using rule 39 (expr -> expr OR expr .)
    COMMA           reduce using rule 39 (expr -> expr OR expr .)
    NOT             reduce using rule 39 (expr -> expr OR expr .)
    STRING          reduce using rule 39 (expr -> expr OR expr .)
    NUMBER          reduce using rule 39 (expr -> expr OR expr .)
    LSQR            reduce using rule 39 (expr -> expr OR expr .)
    NAME            reduce using rule 39 (expr -> expr OR expr .)
    RSQR            reduce using rule 39 (expr -> expr OR expr .)
    FOR             reduce using rule 39 (expr -> expr OR expr .)
    IF              reduce using rule 39 (expr -> expr OR expr .)
    COMMAND         reduce using rule 39 (expr -> expr OR expr .)
    $end            reduce using rule 39 (expr -> expr OR expr .)
    END             reduce using rule 39 (expr -> expr OR expr .)
    ELSE            reduce using rule 39 (expr -> expr OR expr .)
    ELSEIF          reduce using rule 39 (expr -> expr OR expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    COLON           shift and go to state 56


state 91

    (40) expr -> expr ANDAND expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 40 (expr -> expr ANDAND expr .)
    SEMICOLON       reduce using rule 40 (expr -> expr ANDAND expr .)
    ANDAND          reduce using rule 40 (expr -> expr ANDAND expr .)
    OROR            reduce using rule 40 (expr -> expr ANDAND expr .)
    LPAREN          reduce using rule 40 (expr -> expr ANDAND expr .)
    RPAREN          reduce using rule 40 (expr -> expr ANDAND expr .)
    COMMA           reduce using rule 40 (expr -> expr ANDAND expr .)
    NOT             reduce using rule 40 (expr -> expr ANDAND expr .)
    STRING          reduce using rule 40 (expr -> expr ANDAND expr .)
    NUMBER          reduce using rule 40 (expr -> expr ANDAND expr .)
    LSQR            reduce using rule 40 (expr -> expr ANDAND expr .)
    NAME            reduce using rule 40 (expr -> expr ANDAND expr .)
    RSQR            reduce using rule 40 (expr -> expr ANDAND expr .)
    FOR             reduce using rule 40 (expr -> expr ANDAND expr .)
    IF              reduce using rule 40 (expr -> expr ANDAND expr .)
    COMMAND         reduce using rule 40 (expr -> expr ANDAND expr .)
    $end            reduce using rule 40 (expr -> expr ANDAND expr .)
    END             reduce using rule 40 (expr -> expr ANDAND expr .)
    ELSE            reduce using rule 40 (expr -> expr ANDAND expr .)
    ELSEIF          reduce using rule 40 (expr -> expr ANDAND expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    COLON           shift and go to state 56


state 92

    (41) expr -> expr OROR expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 41 (expr -> expr OROR expr .)
    SEMICOLON       reduce using rule 41 (expr -> expr OROR expr .)
    OROR            reduce using rule 41 (expr -> expr OROR expr .)
    LPAREN          reduce using rule 41 (expr -> expr OROR expr .)
    RPAREN          reduce using rule 41 (expr -> expr OROR expr .)
    COMMA           reduce using rule 41 (expr -> expr OROR expr .)
    NOT             reduce using rule 41 (expr -> expr OROR expr .)
    STRING          reduce using rule 41 (expr -> expr OROR expr .)
    NUMBER          reduce using rule 41 (expr -> expr OROR expr .)
    LSQR            reduce using rule 41 (expr -> expr OROR expr .)
    NAME            reduce using rule 41 (expr -> expr OROR expr .)
    RSQR            reduce using rule 41 (expr -> expr OROR expr .)
    FOR             reduce using rule 41 (expr -> expr OROR expr .)
    IF              reduce using rule 41 (expr -> expr OROR expr .)
    COMMAND         reduce using rule 41 (expr -> expr OROR expr .)
    $end            reduce using rule 41 (expr -> expr OROR expr .)
    END             reduce using rule 41 (expr -> expr OROR expr .)
    ELSE            reduce using rule 41 (expr -> expr OROR expr .)
    ELSEIF          reduce using rule 41 (expr -> expr OROR expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    COLON           shift and go to state 56


state 93

    (48) expr -> expr COLON expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 48 (expr -> expr COLON expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr COLON expr .)
    NE              reduce using rule 48 (expr -> expr COLON expr .)
    EQ              reduce using rule 48 (expr -> expr COLON expr .)
    GE              reduce using rule 48 (expr -> expr COLON expr .)
    GT              reduce using rule 48 (expr -> expr COLON expr .)
    LE              reduce using rule 48 (expr -> expr COLON expr .)
    LT              reduce using rule 48 (expr -> expr COLON expr .)
    AND             reduce using rule 48 (expr -> expr COLON expr .)
    OR              reduce using rule 48 (expr -> expr COLON expr .)
    ANDAND          reduce using rule 48 (expr -> expr COLON expr .)
    OROR            reduce using rule 48 (expr -> expr COLON expr .)
    COLON           reduce using rule 48 (expr -> expr COLON expr .)
    LPAREN          reduce using rule 48 (expr -> expr COLON expr .)
    RPAREN          reduce using rule 48 (expr -> expr COLON expr .)
    COMMA           reduce using rule 48 (expr -> expr COLON expr .)
    NOT             reduce using rule 48 (expr -> expr COLON expr .)
    STRING          reduce using rule 48 (expr -> expr COLON expr .)
    NUMBER          reduce using rule 48 (expr -> expr COLON expr .)
    LSQR            reduce using rule 48 (expr -> expr COLON expr .)
    NAME            reduce using rule 48 (expr -> expr COLON expr .)
    RSQR            reduce using rule 48 (expr -> expr COLON expr .)
    FOR             reduce using rule 48 (expr -> expr COLON expr .)
    IF              reduce using rule 48 (expr -> expr COLON expr .)
    COMMAND         reduce using rule 48 (expr -> expr COLON expr .)
    $end            reduce using rule 48 (expr -> expr COLON expr .)
    END             reduce using rule 48 (expr -> expr COLON expr .)
    ELSE            reduce using rule 48 (expr -> expr COLON expr .)
    ELSEIF          reduce using rule 48 (expr -> expr COLON expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45


state 94

    (51) function_call -> expr LPAREN RPAREN .
    ASSIGN          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    NEWLINE         reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    SEMICOLON       reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    CTRANSPOSE      reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    TRANSPOSE       reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    DOT             reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    MPOWER          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    POWER           reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    LDIVIDE         reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    RDIVIDE         reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    TIMES           reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    MLDIVIDE        reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    MRDIVIDE        reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    MTIMES          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    MINUS           reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    PLUS            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    NE              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    EQ              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    GE              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    GT              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    LE              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    LT              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    AND             reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    OR              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    ANDAND          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    OROR            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    COLON           reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    LPAREN          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    RPAREN          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    COMMA           reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    NOT             reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    STRING          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    NUMBER          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    LSQR            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    NAME            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    RSQR            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    FOR             reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    IF              reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    COMMAND         reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    $end            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    END             reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    ELSE            reduce using rule 51 (function_call -> expr LPAREN RPAREN .)
    ELSEIF          reduce using rule 51 (function_call -> expr LPAREN RPAREN .)


state 95

    (63) if_block -> IF expr NEWLINE . statements ELSE statements END
    (64) if_block -> IF expr NEWLINE . statements elseif_block
    (65) if_block -> IF expr NEWLINE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statements                     shift and go to state 109
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 96

    (15) assign -> ref_expr ASSIGN expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    SEMICOLON       reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    FOR             reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    IF              reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    COMMAND         reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    LPAREN          reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    NOT             reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    STRING          reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    NUMBER          reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    NAME            reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    LSQR            reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    $end            reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    END             reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    ELSE            reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    ELSEIF          reduce using rule 15 (assign -> ref_expr ASSIGN expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56


state 97

    (52) function_call -> NAME LPAREN args . RPAREN
    (54) args -> args . COMMA expr
    RPAREN          shift and go to state 110
    COMMA           shift and go to state 111


state 98

    (53) args -> expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    RPAREN          reduce using rule 53 (args -> expr .)
    COMMA           reduce using rule 53 (args -> expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 99

    (21) expr -> LPAREN expr RPAREN .
    NEWLINE         reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    CTRANSPOSE      reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MPOWER          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    POWER           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LDIVIDE         reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    RDIVIDE         reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MLDIVIDE        reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MRDIVIDE        reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MTIMES          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    NOT             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    STRING          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    NUMBER          reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    LSQR            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    NAME            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    RSQR            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    FOR             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    IF              reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    COMMAND         reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 21 (expr -> LPAREN expr RPAREN .)
    ELSEIF          reduce using rule 21 (expr -> LPAREN expr RPAREN .)


state 100

    (58) array_literal -> LSQR array_vals RSQR .
    NEWLINE         reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    SEMICOLON       reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    CTRANSPOSE      reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    TRANSPOSE       reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    DOT             reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    MPOWER          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    POWER           reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    LDIVIDE         reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    RDIVIDE         reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    TIMES           reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    MLDIVIDE        reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    MRDIVIDE        reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    MTIMES          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    MINUS           reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    PLUS            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    NE              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    EQ              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    GE              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    GT              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    LE              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    LT              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    AND             reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    OR              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    ANDAND          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    OROR            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    COLON           reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    LPAREN          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    RPAREN          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    COMMA           reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    NOT             reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    STRING          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    NUMBER          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    LSQR            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    NAME            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    RSQR            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    FOR             reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    IF              reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    COMMAND         reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    $end            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    END             reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    ELSE            reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)
    ELSEIF          reduce using rule 58 (array_literal -> LSQR array_vals RSQR .)


state 101

    (60) matrix_row_inner -> array_vals SEMICOLON .
    LPAREN          reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    NOT             reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    MINUS           reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    PLUS            reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    STRING          reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    NUMBER          reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    LSQR            reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)
    NAME            reduce using rule 60 (matrix_row_inner -> array_vals SEMICOLON .)


state 102

    (61) matrix_literal -> LSQR matrix_row_inner array_vals . RSQR
    (59) matrix_row_inner -> matrix_row_inner array_vals . SEMICOLON
    RSQR            shift and go to state 112
    SEMICOLON       shift and go to state 113


state 103

    (56) array_vals -> expr array_vals .
    RSQR            reduce using rule 56 (array_vals -> expr array_vals .)
    SEMICOLON       reduce using rule 56 (array_vals -> expr array_vals .)


state 104

    (57) array_vals -> expr COMMA . array_vals
    (55) array_vals -> . expr
    (56) array_vals -> . expr array_vals
    (57) array_vals -> . expr COMMA array_vals
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 68
    array_vals                     shift and go to state 114
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 105

    (30) expr -> expr MINUS . expr
    (43) expr -> MINUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 115
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 106

    (31) expr -> expr PLUS . expr
    (44) expr -> PLUS . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 116
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 107

    (51) function_call -> expr LPAREN . RPAREN
    (21) expr -> LPAREN . expr RPAREN
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    RPAREN          shift and go to state 94
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 62
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 108

    (8) statement -> FOR assign statements END .
    NEWLINE         reduce using rule 8 (statement -> FOR assign statements END .)
    SEMICOLON       reduce using rule 8 (statement -> FOR assign statements END .)
    FOR             reduce using rule 8 (statement -> FOR assign statements END .)
    IF              reduce using rule 8 (statement -> FOR assign statements END .)
    COMMAND         reduce using rule 8 (statement -> FOR assign statements END .)
    LPAREN          reduce using rule 8 (statement -> FOR assign statements END .)
    NOT             reduce using rule 8 (statement -> FOR assign statements END .)
    MINUS           reduce using rule 8 (statement -> FOR assign statements END .)
    PLUS            reduce using rule 8 (statement -> FOR assign statements END .)
    STRING          reduce using rule 8 (statement -> FOR assign statements END .)
    NUMBER          reduce using rule 8 (statement -> FOR assign statements END .)
    NAME            reduce using rule 8 (statement -> FOR assign statements END .)
    LSQR            reduce using rule 8 (statement -> FOR assign statements END .)
    $end            reduce using rule 8 (statement -> FOR assign statements END .)
    END             reduce using rule 8 (statement -> FOR assign statements END .)
    ELSE            reduce using rule 8 (statement -> FOR assign statements END .)
    ELSEIF          reduce using rule 8 (statement -> FOR assign statements END .)


state 109

    (63) if_block -> IF expr NEWLINE statements . ELSE statements END
    (64) if_block -> IF expr NEWLINE statements . elseif_block
    (65) if_block -> IF expr NEWLINE statements . END
    (3) statements -> statements . statement
    (66) elseif_block -> . ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
    (67) elseif_block -> . ELSEIF expr NEWLINE statements elseif_block
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    ELSE            shift and go to state 117
    END             shift and go to state 118
    ELSEIF          shift and go to state 120
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    elseif_block                   shift and go to state 119
    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 110

    (52) function_call -> NAME LPAREN args RPAREN .
    ASSIGN          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    NEWLINE         reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    CTRANSPOSE      reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    TRANSPOSE       reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    DOT             reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    MPOWER          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    POWER           reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    LDIVIDE         reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    RDIVIDE         reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    TIMES           reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    MLDIVIDE        reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    MRDIVIDE        reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    MTIMES          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    MINUS           reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    PLUS            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    NE              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    EQ              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    GE              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    GT              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    LE              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    LT              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    AND             reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    OR              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    ANDAND          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    OROR            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    COLON           reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    LPAREN          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    RPAREN          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    COMMA           reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    NOT             reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    STRING          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    NUMBER          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    LSQR            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    NAME            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    RSQR            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    FOR             reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    IF              reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    COMMAND         reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    $end            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    END             reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    ELSE            reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)
    ELSEIF          reduce using rule 52 (function_call -> NAME LPAREN args RPAREN .)


state 111

    (54) args -> args COMMA . expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 121
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 112

    (61) matrix_literal -> LSQR matrix_row_inner array_vals RSQR .
    NEWLINE         reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    SEMICOLON       reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    CTRANSPOSE      reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    TRANSPOSE       reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    DOT             reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MPOWER          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    POWER           reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LDIVIDE         reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RDIVIDE         reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    TIMES           reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MLDIVIDE        reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MRDIVIDE        reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MTIMES          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    MINUS           reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    PLUS            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NE              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    EQ              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    GE              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    GT              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LE              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LT              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    AND             reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    OR              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ANDAND          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    OROR            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COLON           reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LPAREN          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RPAREN          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COMMA           reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NOT             reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    STRING          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NUMBER          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    LSQR            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    NAME            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    RSQR            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    FOR             reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    IF              reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    COMMAND         reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    $end            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    END             reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ELSE            reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)
    ELSEIF          reduce using rule 61 (matrix_literal -> LSQR matrix_row_inner array_vals RSQR .)


state 113

    (59) matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .
    LPAREN          reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NOT             reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    MINUS           reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    PLUS            reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    STRING          reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NUMBER          reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    LSQR            reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)
    NAME            reduce using rule 59 (matrix_row_inner -> matrix_row_inner array_vals SEMICOLON .)


state 114

    (57) array_vals -> expr COMMA array_vals .
    RSQR            reduce using rule 57 (array_vals -> expr COMMA array_vals .)
    SEMICOLON       reduce using rule 57 (array_vals -> expr COMMA array_vals .)


state 115

    (30) expr -> expr MINUS expr .
    (43) expr -> MINUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
  ! reduce/reduce conflict for COMMA resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for CTRANSPOSE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for DOT resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MPOWER resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for POWER resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LDIVIDE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for RDIVIDE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MLDIVIDE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MRDIVIDE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MTIMES resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for GE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for GT resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LE resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LT resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for AND resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for ANDAND resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for OROR resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NOT resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for STRING resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NUMBER resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for LSQR resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for NAME resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for RSQR resolved using rule 43 (expr -> MINUS expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (expr -> MINUS expr .)
    COMMA           reduce using rule 43 (expr -> MINUS expr .)
    MINUS           reduce using rule 43 (expr -> MINUS expr .)
    PLUS            reduce using rule 43 (expr -> MINUS expr .)
    NE              reduce using rule 43 (expr -> MINUS expr .)
    EQ              reduce using rule 43 (expr -> MINUS expr .)
    GE              reduce using rule 43 (expr -> MINUS expr .)
    GT              reduce using rule 43 (expr -> MINUS expr .)
    LE              reduce using rule 43 (expr -> MINUS expr .)
    LT              reduce using rule 43 (expr -> MINUS expr .)
    AND             reduce using rule 43 (expr -> MINUS expr .)
    OR              reduce using rule 43 (expr -> MINUS expr .)
    ANDAND          reduce using rule 43 (expr -> MINUS expr .)
    OROR            reduce using rule 43 (expr -> MINUS expr .)
    COLON           reduce using rule 43 (expr -> MINUS expr .)
    LPAREN          reduce using rule 43 (expr -> MINUS expr .)
    NOT             reduce using rule 43 (expr -> MINUS expr .)
    STRING          reduce using rule 43 (expr -> MINUS expr .)
    NUMBER          reduce using rule 43 (expr -> MINUS expr .)
    LSQR            reduce using rule 43 (expr -> MINUS expr .)
    NAME            reduce using rule 43 (expr -> MINUS expr .)
    RSQR            reduce using rule 43 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 43 (expr -> MINUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 116

    (31) expr -> expr PLUS expr .
    (44) expr -> PLUS expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
  ! reduce/reduce conflict for COMMA resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for CTRANSPOSE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for TRANSPOSE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for DOT resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MPOWER resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for POWER resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LDIVIDE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for RDIVIDE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for TIMES resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MLDIVIDE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MRDIVIDE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MTIMES resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for MINUS resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for PLUS resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for EQ resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for GE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for GT resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LE resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LT resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for AND resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for OR resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for ANDAND resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for OROR resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for COLON resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LPAREN resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NOT resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for STRING resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NUMBER resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for LSQR resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for NAME resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for RSQR resolved using rule 44 (expr -> PLUS expr .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 44 (expr -> PLUS expr .)
    COMMA           reduce using rule 44 (expr -> PLUS expr .)
    MINUS           reduce using rule 44 (expr -> PLUS expr .)
    PLUS            reduce using rule 44 (expr -> PLUS expr .)
    NE              reduce using rule 44 (expr -> PLUS expr .)
    EQ              reduce using rule 44 (expr -> PLUS expr .)
    GE              reduce using rule 44 (expr -> PLUS expr .)
    GT              reduce using rule 44 (expr -> PLUS expr .)
    LE              reduce using rule 44 (expr -> PLUS expr .)
    LT              reduce using rule 44 (expr -> PLUS expr .)
    AND             reduce using rule 44 (expr -> PLUS expr .)
    OR              reduce using rule 44 (expr -> PLUS expr .)
    ANDAND          reduce using rule 44 (expr -> PLUS expr .)
    OROR            reduce using rule 44 (expr -> PLUS expr .)
    COLON           reduce using rule 44 (expr -> PLUS expr .)
    LPAREN          reduce using rule 44 (expr -> PLUS expr .)
    NOT             reduce using rule 44 (expr -> PLUS expr .)
    STRING          reduce using rule 44 (expr -> PLUS expr .)
    NUMBER          reduce using rule 44 (expr -> PLUS expr .)
    LSQR            reduce using rule 44 (expr -> PLUS expr .)
    NAME            reduce using rule 44 (expr -> PLUS expr .)
    RSQR            reduce using rule 44 (expr -> PLUS expr .)
    SEMICOLON       reduce using rule 44 (expr -> PLUS expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43


state 117

    (63) if_block -> IF expr NEWLINE statements ELSE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statements                     shift and go to state 122
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 118

    (65) if_block -> IF expr NEWLINE statements END .
    NEWLINE         reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    SEMICOLON       reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    FOR             reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    IF              reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    COMMAND         reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    LPAREN          reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    NOT             reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    MINUS           reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    PLUS            reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    STRING          reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    NUMBER          reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    NAME            reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    LSQR            reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    $end            reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    END             reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    ELSE            reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)
    ELSEIF          reduce using rule 65 (if_block -> IF expr NEWLINE statements END .)


state 119

    (64) if_block -> IF expr NEWLINE statements elseif_block .
    NEWLINE         reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    SEMICOLON       reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    FOR             reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    IF              reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    COMMAND         reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    LPAREN          reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    NOT             reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    MINUS           reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    PLUS            reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    STRING          reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    NUMBER          reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    NAME            reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    LSQR            reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    $end            reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    END             reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    ELSE            reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)
    ELSEIF          reduce using rule 64 (if_block -> IF expr NEWLINE statements elseif_block .)


state 120

    (66) elseif_block -> ELSEIF . expr NEWLINE statements ELSE NEWLINE statements END
    (67) elseif_block -> ELSEIF . expr NEWLINE statements elseif_block
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    LSQR            shift and go to state 24
    NAME            shift and go to state 16

    expr                           shift and go to state 123
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    ref_expr                       shift and go to state 59
    function_call                  shift and go to state 23

state 121

    (54) args -> args COMMA expr .
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    RPAREN          reduce using rule 54 (args -> args COMMA expr .)
    COMMA           reduce using rule 54 (args -> args COMMA expr .)
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 122

    (63) if_block -> IF expr NEWLINE statements ELSE statements . END
    (3) statements -> statements . statement
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 124
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 123

    (66) elseif_block -> ELSEIF expr . NEWLINE statements ELSE NEWLINE statements END
    (67) elseif_block -> ELSEIF expr . NEWLINE statements elseif_block
    (16) expr -> expr . CTRANSPOSE
    (17) expr -> expr . TRANSPOSE
    (20) expr -> expr . DOT NAME
    (22) expr -> expr . MPOWER expr
    (23) expr -> expr . POWER expr
    (24) expr -> expr . LDIVIDE expr
    (25) expr -> expr . RDIVIDE expr
    (26) expr -> expr . TIMES expr
    (27) expr -> expr . MLDIVIDE expr
    (28) expr -> expr . MRDIVIDE expr
    (29) expr -> expr . MTIMES expr
    (30) expr -> expr . MINUS expr
    (31) expr -> expr . PLUS expr
    (32) expr -> expr . NE expr
    (33) expr -> expr . EQ expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . GT expr
    (36) expr -> expr . LE expr
    (37) expr -> expr . LT expr
    (38) expr -> expr . AND expr
    (39) expr -> expr . OR expr
    (40) expr -> expr . ANDAND expr
    (41) expr -> expr . OROR expr
    (48) expr -> expr . COLON expr
    (51) function_call -> expr . LPAREN RPAREN
    NEWLINE         shift and go to state 125
    CTRANSPOSE      shift and go to state 33
    TRANSPOSE       shift and go to state 34
    DOT             shift and go to state 35
    MPOWER          shift and go to state 36
    POWER           shift and go to state 37
    LDIVIDE         shift and go to state 38
    RDIVIDE         shift and go to state 39
    TIMES           shift and go to state 40
    MLDIVIDE        shift and go to state 41
    MRDIVIDE        shift and go to state 42
    MTIMES          shift and go to state 43
    MINUS           shift and go to state 44
    PLUS            shift and go to state 45
    NE              shift and go to state 46
    EQ              shift and go to state 47
    GE              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    LT              shift and go to state 51
    AND             shift and go to state 52
    OR              shift and go to state 53
    ANDAND          shift and go to state 54
    OROR            shift and go to state 55
    COLON           shift and go to state 56
    LPAREN          shift and go to state 57


state 124

    (63) if_block -> IF expr NEWLINE statements ELSE statements END .
    NEWLINE         reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    SEMICOLON       reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    FOR             reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    IF              reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    COMMAND         reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    LPAREN          reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NOT             reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    MINUS           reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    PLUS            reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    STRING          reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NUMBER          reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    NAME            reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    LSQR            reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    $end            reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    END             reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    ELSE            reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)
    ELSEIF          reduce using rule 63 (if_block -> IF expr NEWLINE statements ELSE statements END .)


state 125

    (66) elseif_block -> ELSEIF expr NEWLINE . statements ELSE NEWLINE statements END
    (67) elseif_block -> ELSEIF expr NEWLINE . statements elseif_block
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statements                     shift and go to state 126
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 126

    (66) elseif_block -> ELSEIF expr NEWLINE statements . ELSE NEWLINE statements END
    (67) elseif_block -> ELSEIF expr NEWLINE statements . elseif_block
    (3) statements -> statements . statement
    (66) elseif_block -> . ELSEIF expr NEWLINE statements ELSE NEWLINE statements END
    (67) elseif_block -> . ELSEIF expr NEWLINE statements elseif_block
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    ELSE            shift and go to state 127
    ELSEIF          shift and go to state 120
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    elseif_block                   shift and go to state 128
    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 127

    (66) elseif_block -> ELSEIF expr NEWLINE statements ELSE . NEWLINE statements END
    NEWLINE         shift and go to state 129


state 128

    (67) elseif_block -> ELSEIF expr NEWLINE statements elseif_block .
    NEWLINE         reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    SEMICOLON       reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    FOR             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    IF              reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    COMMAND         reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    LPAREN          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NOT             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    MINUS           reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    PLUS            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    STRING          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NUMBER          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    NAME            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    LSQR            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    $end            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    END             reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    ELSE            reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)
    ELSEIF          reduce using rule 67 (elseif_block -> ELSEIF expr NEWLINE statements elseif_block .)


state 129

    (66) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE . statements END
    (2) statements -> . statement
    (3) statements -> . statements statement
    (4) statements -> . statement statements
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statements                     shift and go to state 130
    statement                      shift and go to state 3
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 130

    (66) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements . END
    (3) statements -> statements . statement
    (5) statement -> . if_block
    (6) statement -> . command
    (7) statement -> . assign
    (8) statement -> . FOR assign statements END
    (9) statement -> . expr NEWLINE
    (10) statement -> . expr SEMICOLON
    (11) statement -> . NEWLINE
    (12) statement -> . SEMICOLON
    (13) statement -> . statement NEWLINE
    (14) statement -> . statement SEMICOLON
    (63) if_block -> . IF expr NEWLINE statements ELSE statements END
    (64) if_block -> . IF expr NEWLINE statements elseif_block
    (65) if_block -> . IF expr NEWLINE statements END
    (62) command -> . COMMAND
    (15) assign -> . ref_expr ASSIGN expr
    (16) expr -> . expr CTRANSPOSE
    (17) expr -> . expr TRANSPOSE
    (18) expr -> . array_literal
    (19) expr -> . matrix_literal
    (20) expr -> . expr DOT NAME
    (21) expr -> . LPAREN expr RPAREN
    (22) expr -> . expr MPOWER expr
    (23) expr -> . expr POWER expr
    (24) expr -> . expr LDIVIDE expr
    (25) expr -> . expr RDIVIDE expr
    (26) expr -> . expr TIMES expr
    (27) expr -> . expr MLDIVIDE expr
    (28) expr -> . expr MRDIVIDE expr
    (29) expr -> . expr MTIMES expr
    (30) expr -> . expr MINUS expr
    (31) expr -> . expr PLUS expr
    (32) expr -> . expr NE expr
    (33) expr -> . expr EQ expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr GT expr
    (36) expr -> . expr LE expr
    (37) expr -> . expr LT expr
    (38) expr -> . expr AND expr
    (39) expr -> . expr OR expr
    (40) expr -> . expr ANDAND expr
    (41) expr -> . expr OROR expr
    (42) expr -> . NOT expr
    (43) expr -> . MINUS expr
    (44) expr -> . PLUS expr
    (45) expr -> . STRING
    (46) expr -> . NUMBER
    (47) expr -> . ref_expr
    (48) expr -> . expr COLON expr
    (49) ref_expr -> . function_call
    (50) ref_expr -> . NAME
    (58) array_literal -> . LSQR array_vals RSQR
    (61) matrix_literal -> . LSQR matrix_row_inner array_vals RSQR
    (51) function_call -> . expr LPAREN RPAREN
    (52) function_call -> . NAME LPAREN args RPAREN
    END             shift and go to state 131
    FOR             shift and go to state 7
    NEWLINE         shift and go to state 9
    SEMICOLON       shift and go to state 10
    IF              shift and go to state 11
    COMMAND         shift and go to state 12
    LPAREN          shift and go to state 17
    NOT             shift and go to state 20
    MINUS           shift and go to state 18
    PLUS            shift and go to state 19
    STRING          shift and go to state 21
    NUMBER          shift and go to state 22
    NAME            shift and go to state 16
    LSQR            shift and go to state 24

    expr                           shift and go to state 8
    statement                      shift and go to state 25
    if_block                       shift and go to state 4
    command                        shift and go to state 5
    assign                         shift and go to state 6
    ref_expr                       shift and go to state 13
    array_literal                  shift and go to state 14
    matrix_literal                 shift and go to state 15
    function_call                  shift and go to state 23

state 131

    (66) elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .
    NEWLINE         reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    SEMICOLON       reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    FOR             reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    IF              reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    COMMAND         reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    LPAREN          reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NOT             reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    MINUS           reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    PLUS            reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    STRING          reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NUMBER          reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    NAME            reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    LSQR            reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    $end            reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    END             reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    ELSE            reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)
    ELSEIF          reduce using rule 66 (elseif_block -> ELSEIF expr NEWLINE statements ELSE NEWLINE statements END .)


Conflicts:

shift/reduce conflict for NEWLINE in state 3 resolved as shift
shift/reduce conflict for SEMICOLON in state 3 resolved as shift
shift/reduce conflict for FOR in state 3 resolved as shift
shift/reduce conflict for IF in state 3 resolved as shift
shift/reduce conflict for COMMAND in state 3 resolved as shift
shift/reduce conflict for LPAREN in state 3 resolved as shift
shift/reduce conflict for NOT in state 3 resolved as shift
shift/reduce conflict for MINUS in state 3 resolved as shift
shift/reduce conflict for PLUS in state 3 resolved as shift
shift/reduce conflict for STRING in state 3 resolved as shift
shift/reduce conflict for NUMBER in state 3 resolved as shift
shift/reduce conflict for NAME in state 3 resolved as shift
shift/reduce conflict for LSQR in state 3 resolved as shift
shift/reduce conflict for LPAREN in state 16 resolved as shift
shift/reduce conflict for NEWLINE in state 25 resolved as shift
shift/reduce conflict for SEMICOLON in state 25 resolved as shift
shift/reduce conflict for FOR in state 26 resolved as shift
shift/reduce conflict for NEWLINE in state 26 resolved as shift
shift/reduce conflict for SEMICOLON in state 26 resolved as shift
shift/reduce conflict for IF in state 26 resolved as shift
shift/reduce conflict for COMMAND in state 26 resolved as shift
shift/reduce conflict for LPAREN in state 26 resolved as shift
shift/reduce conflict for NOT in state 26 resolved as shift
shift/reduce conflict for MINUS in state 26 resolved as shift
shift/reduce conflict for PLUS in state 26 resolved as shift
shift/reduce conflict for STRING in state 26 resolved as shift
shift/reduce conflict for NUMBER in state 26 resolved as shift
shift/reduce conflict for NAME in state 26 resolved as shift
shift/reduce conflict for LSQR in state 26 resolved as shift
reduce/reduce conflict in state 27 resolved using rule statement -> statement NEWLINE
rejected rule (statement -> NEWLINE) in state 27
reduce/reduce conflict in state 28 resolved using rule statement -> statement SEMICOLON
rejected rule (statement -> SEMICOLON) in state 28
reduce/reduce conflict in state 115 resolved using rule expr -> MINUS expr  [precedence=left, level=9]
rejected rule (expr -> expr MINUS expr  [precedence=left, level=9]) in state 115
reduce/reduce conflict in state 116 resolved using rule expr -> PLUS expr  [precedence=left, level=9]
rejected rule (expr -> expr PLUS expr  [precedence=left, level=9]) in state 116